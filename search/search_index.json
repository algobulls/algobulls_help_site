{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"AlgoBulls Help Site","text":""},{"location":"index.html#1-introduction","title":"1. Introduction","text":"<p>Welcome to AlgoBulls! We are an algorithmic trading platform offering 100% automated trading algorithms, allowing you to deploy multiple trading strategies across various asset classes. You can choose from a wide range of ready-to-use strategies or create and execute your own strategy in Backtesting, **Papertrading and Livetrading mode. Additionally, AlgoBulls provides a Fixed Income marketplace where you can invest in Bonds &amp; NCDs.</p> <p>Here's a quick guide to help you start trading or investing on our user-friendly platform right away!</p>"},{"location":"index.html#2-sign-up-with-algobulls","title":"2. Sign Up with AlgoBulls","text":""},{"location":"index.html#i-sign-up-using-google","title":"i. Sign Up using Google","text":"<p>Register with AlgoBulls in less than a minute using the Login with Google option.</p> <p></p>"},{"location":"index.html#ii-sign-up-using-whatsapp","title":"ii. Sign Up using WhatsApp","text":"<p>You can also register with AlgoBulls using WhatsApp. Follow these simple steps:</p> <p>Step 1: Click on the WhatsApp icon.</p> <p></p> <p>Step 2: Scan the QR code using your phone camera. Open the link that appears on your screen, which will redirect you to WhatsApp.</p> <p></p> <p>Step 3: Send the pre-formatted text in whatsapp chat. It will redirect and allow you to sign-up you to AlgoBulls.</p>"},{"location":"index.html#iii-sign-up-in-3-simple-steps","title":"iii. Sign Up in 3 simple steps","text":"<p>Step 1:</p> <p>Profile: Enter your Name, Email, and Phone Number. Click on Get OTP.</p> <p></p> <p>Step 2:</p> <p>Credentials: Enter the OTP and other credentials such as password.</p> <p></p> <p>Haven't registered with AlgoBulls yet? Register now!</p>"},{"location":"index.html#3-log-in-with-algobulls","title":"3. Log in with AlgoBulls","text":"<p>If you already have an AlgoBulls account, simply log in using the following options:</p>"},{"location":"index.html#i-login-using-google","title":"i. Login using Google","text":"<p>Use your Google account to Log in. Just click on the Google icon and log in with your Google credentials.</p> <p></p>"},{"location":"index.html#ii-login-using-whatsapp","title":"ii. Login using WhatsApp","text":"<p>Log in using your WhatsApp account by clicking on the WhatsApp icon.</p> <p></p>"},{"location":"index.html#iii-login-with-mobile-number","title":"iii. Login with Mobile Number","text":"<p>Use your mobile number and password to log in.</p> <p></p>"},{"location":"index.html#iv-login-with-otp","title":"iv. Login with OTP","text":"<p>You can also choose the Login with OTP option. Enter your phone number, and an OTP will be sent to your registered mobile number.</p> <p></p>"},{"location":"index.html#5-forgot-password","title":"5. Forgot Password?","text":"<p>If you've forgotten your password, you can reset it here.</p> <p>Ready to start trading? Log in now.</p>"},{"location":"index.html#6-how-to-add-a-broking-account","title":"6. How to Add a Broking Account?","text":"<p>To begin trading, it's necessary to add your broker details and link your broking account. Follow these three simple steps:</p> <p>Step 1: From the AlgoBulls sidebar navigation, select Broking Details  and click on the Add Broker button.</p> <p>Step 2: Select your broker and fill in the necessary information. Click Confirm.</p> <p>Step 3: Once confirmed, the broker will be added to your account.</p> <p>For more information on adding, removing, and editing broker details, click here.</p> <p>To visit the broker details page, click here.</p>"},{"location":"index.html#7-adding-funds-to-your-algobulls-account","title":"7. Adding Funds to Your AlgoBulls Account","text":"<p>After linking your broker with AlgoBulls, you can add funds by navigating to the My Plans page from the sidebar menu and clicking on Payment Gateway Transactions.</p> <p>Step 1: Edit or continue with the default amount of 1000 and click Add Money.</p> <p></p> <p>Step 2: Enter your phone number and click Proceed.</p> <p></p> <p>Step 3: Choose your preferred payment method. Once the payment is successful, the balance will be added to your AlgoBulls account.</p> <p>Running low on funds? Add money now!</p> <p>Learn more about Pricing.</p>"},{"location":"index.html#8-how-to-subscribe-to-a-plan","title":"8. How to Subscribe to a Plan","text":"<p>To subscribe to a plan, choose from various plans on the Pricing page. These plans are active for a specific duration, and all included services will not incur additional charges during that period.</p> <p>Find out more about Pricing.</p> <p>AlgoBulls also offers free plans. Visit the pricing page to explore available free plans.</p>"},{"location":"index.html#9-how-to-select-a-strategy","title":"9. How to Select a Strategy","text":"<p>After subscribing to a plan, choose an Algo Strategy from the Odyssey section, which features over 150+ strategies created by industry experts. Odyssey is divided into three categories: Retail, Premium &amp; HNI.</p> <p>Retail Strategies: Ideal for all levels of experience, these include strategies for Equity, Futures, and Commodities cash segments. Learn more about Retail Strategies.</p> <p>Premium Strategies: Access intelligent and powerful Index Option Strategies. Read more about Premium Strategies.</p> <p>HNI Strategies: AI-driven trading algorithms tailored to individual needs and risk appetites, including Index Option Strategies. Learn more about HNI Strategies.</p> <p>Select a strategy from the AlgoBulls Odyssey now!</p>"},{"location":"index.html#10-my-portfolio","title":"10. My Portfolio","text":"<p>All strategies deployed from the Odyssey page are accessible here as well as Phoenix Strategies. You can leverage these strategies for Live Trading (LT), Paper Trading (PT), and Back Testing (BT). The key functionalities include:</p> <ul> <li> <p>Start Button: Execute a strategy using the Start button.</p> </li> <li> <p>Strategy: This column displays the name of the strategy.</p> </li> <li> <p>Instruments: This column shows the instruments added to the strategy.</p> </li> <li> <p>Tweak Button: Adjust and fine-tune a strategy using the tweak button.</p> </li> <li> <p>Live Reports Section: View real-time P&amp;L and trade volume for all active strategies.</p> </li> <li> <p>Mode: Indicates whether the strategy is in LT, PT, or BT mode.</p> </li> <li> <p>Tags: Add tags to strategies for better organisation and categorisation.</p> </li> </ul> <p></p> <p>You can initiate a strategy by clicking on the Start button. When you do so, a modal will appear with several options. To run the strategy in live market, select the Live Trading option from the modal. Additionally, you have the flexibility to perform Back Tests and paper trades by choosing the respective options within the same modal. This allows you to thoroughly evaluate and refine your strategies before deploying them in real market conditions.</p>"},{"location":"index.html#11-live-reports","title":"11. Live Reports","text":"<p>The Live Reports section is divided into three parts: P&amp;L Book, Trade Book.</p> <ul> <li> <p>The P&amp;L Book displays the Profit &amp; Loss of your trades in your account. All trades/orders in your account are updated in real-time as transactions occur. Learn more.</p> </li> <li> <p>The Trade Book displays the activities of chosen strategies in your account. Read more.</p> </li> </ul> <p>Want to check Live Reports for your Strategies? Visit the P&amp;L Book and Trade Book now!</p>"},{"location":"index.html#11-the-dashboard","title":"11. The Dashboard","text":"<p>Once you have successfully registered with AlgoBulls, you will be redirected to the AlgoBulls Dashboard. The AlgoBulls Dashboard gives you an overview of your account and trades.</p> <p>Go to my dashboard.</p>"},{"location":"index.html#12-settings","title":"12. Settings","text":"<p>The AlgoBulls Settings page allows you to:</p> <ul> <li> <p>Update your profile</p> </li> <li> <p>Update Password</p> </li> <li> <p>Add Trade Manager</p> </li> <li> <p>Manage notification preferences</p> </li> <li> <p>Generate and manage API keys</p> </li> <li> <p>Set trading preferences</p> </li> <li> <p>Manage Execution Mode Preference</p> </li> </ul> <p>This page provides a centralized location to tailor your AlgoBulls account to your specific needs and preferences.</p> <p>For further information regarding the AlgoBulls platform you can always reach out to our customer service team at support@algobulls.com OR call us on +91 8069 230 300.</p>"},{"location":"developers.html","title":"Developer Options","text":"<p>You can use the Developer Options offered by the AlgoBulls Platform to create, load, test and execute your own strategies.</p> <ul> <li> <p>Create - Write your own strategy code in Python using the pyalgotrading package. Read the API documentation for this package to learn more!</p> </li> <li> <p>Load - Write Python code in a Jupyter Notebook to upload your strategy into your AlgoBulls account for testing.</p> </li> <li> <p>Test - Write Python code in a Jupyter Notebook to test your strategy into your AlgoBulls account for testing. Alternatively, login to the AlgoBulls Website to access your account and test your strategy.</p> <p>See how to test using Python code | See how to test using your account</p> </li> <li> <p>Execute - Write Python code in a Jupyter Notebook to execute Real Trading in your Portfolio using your strategy. Alternatively, login to the AlgoBulls Website to access your account and start Real Trading on your strategy.</p> <p>See how to trade using Python code | See how to trade using your account</p> </li> </ul>"},{"location":"developers.html#checklist-for-backtesting-and-paper-trading","title":"Checklist for Backtesting and Paper Trading","text":"<p>\u2705 - Register and Login to your AlgoBulls Account.</p> <p>\u2705 - Activate a plan for your account. Learn More</p> <p>\u2705 - Create your strategy using the pyalgotrading package or choose a readymade strategy from the pyalgostrategypool package.</p> <p>\u2705 - Pick up the API Token from Developer Options Menu on the General Settings page of your account. Learn More</p> <p>\u2705 - Upload your strategy into your account.</p> <p>Now you can perform Backtesting and Paper Trading for your strategy using Python code or by logging in to your account.</p> <p>Note</p> <ul> <li>The API Token is used for all actions performed through Python code into your account. Actions include uploading a strategy, performing testing, running real trade, etc.</li> <li>Pick up the updated API Token periodically from your account if there is an error while executing your actions through Python code. </li> <li>Choose and activate an appropriate plan by visiting the Wallet page from your account. </li> </ul>"},{"location":"developers.html#checklist-for-real-trading","title":"Checklist for Real Trading","text":"<p>\u2705 - All points from the Checklist for Backtesting and Paper Trading mentioned above and</p> <p>\u2705 - Add and Bind a broker on the Broker Settings page of your account. Learn More</p> <p>\u2705 - Add the Aadhar and PAN details of the person to whom the broker account belongs to, on the General Settings page of your account.</p> <p>\u2705 - Set up the Risk Management values, Max Drawdown Limit and Desired Profit on the General Settings page of your account. Learn More</p> <p>Note</p> <ul> <li>AlgoBulls reserves the right to suspend or deactivate your account without notice if your Aadhar and PAN details are not valid.</li> <li>Any plans which are activated will not be refunded and the lost days cannot be redeemed while the account is re-activated upon uploading the proper details.</li> </ul>"},{"location":"developers.html#api-documentation-and-tutorial-resources","title":"API Documentation and Tutorial Resources","text":"<ul> <li> <p>Tutorial</p> </li> <li> <p>API</p> </li> </ul>"},{"location":"developers.html#indian-markets","title":"Indian Markets","text":"<p>For traders who wish to test their strategies on Indian Markets, or to execute Real Trading on Indian markets may do so directly after following the checklist above.</p>"},{"location":"developers.html#other-markets","title":"Other Markets","text":"<p>For traders who wish to test their strategies on other Markets, or to execute Real Trading on other markets, Kindly drop a mail to developers@algobulls.com.</p>"},{"location":"broker/acagarwal.html","title":"AC Agarwal","text":"<ul> <li> <p>Official Website: https://www.acagarwal.com/</p> </li> <li> <p>Trading Website: https://www.acagarwal.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/acagarwal.html#1-login-and-setup-your-ac-agarwal-account","title":"1. Login and Setup your AC Agarwal Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/acagarwal.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>2FA Answers (your DOB in ddmmyyyy format)</p> </li> </ul>"},{"location":"broker/acagarwal.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li> <p>Visit the AlgoBulls Login Page and click on 'Ac Agarwal' under Login with your Broking Account.</p> </li> <li> <p>If you do not see your broker name, then click on + x more where x is the number of brokers.</p> </li> </ul> <p> </p> <ul> <li>Type Ac Agarwal in the Search Box. and then click on the Broker Link that is shown in the search results.</li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button.</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). 2FA Answers: The 2-factor authentication answer you have given (your DOB in ddmmyyyy format).</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/acagarwal.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/aliceblue.html","title":"AliceBlue","text":"<ul> <li> <p>Official Website: https://aliceblueonline.com/</p> </li> <li> <p>Trading Website: https://ant.aliceblueonline.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/aliceblue.html#1-login-and-set-up-your-aliceblue-account","title":"1. Login and Set up your AliceBlue Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/aliceblue.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>ClientID</p> </li> <li> <p>Password</p> </li> <li> <p>Year of Birth</p> </li> </ul>"},{"location":"broker/aliceblue.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li>Type the first few characters of your Broker Name.</li> </ul> <p>As seen here, AliceBlue supports 2 ways of logging in:</p> <ol> <li> <p>non-OAuth Method </p> </li> <li> <p>OAuth Method.</p> </li> </ol> <p>Both are explained below</p>"},{"location":"broker/aliceblue.html#iii-login-with-non-oauth-method","title":"iii. Login with non-OAuth Method","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ALICEBLUE broker under other available brokers.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button.</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker. </li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). Client ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Year of Birth: The year of birth you have given while creating the broker account.</p> <p>(4). Click Confirm.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/aliceblue.html#iv-login-with-oauth-method","title":"iv. Login with OAuth Method","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ALICEBLUE broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(1). Client ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click SIGN IN.</p> <p> </p> <p>(4). Year of Birth: The year of birth you have given while creating the broker account</p> <p>(5). Click Submit</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/aliceblue.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/alpaca.html","title":"Alpaca","text":"<ul> <li> <p>Official Website: https://alpaca.markets/</p> </li> <li> <p>Trading Website: https://alpaca.markets/</p> </li> <li> <p>Markets Supported: USA</p> </li> </ul>"},{"location":"broker/alpaca.html#1-login-and-set-up-your-alpaca-account","title":"1. Login and Set up your Alpaca Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/alpaca.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Email</p> </li> <li> <p>Password</p> </li> </ul>"},{"location":"broker/alpaca.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li>Type the first few characters of your Broker Name.</li> </ul> <p>As seen here, Alpaca supports 2 ways of logging in:</p> <ol> <li> <p>Alpaca Paper (OAuth) Method</p> </li> <li> <p>Alpaca Real (OAuth) Method</p> </li> </ol> <p>Both are explained below</p>"},{"location":"broker/alpaca.html#iii-login-with-alpaca-paper-oauth-method","title":"iii. Login with Alpaca Paper (OAuth) Method","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ALPACA PAPER broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(1). Click Log In.</p> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(2). Email ID: Your Email ID.</p> <p>(3). Password: The password you have set.</p> <p>(4). Click Login.</p> <p> </p> <p>(5). Click Allow if asked for authorization.</p> <p> </p>"},{"location":"broker/alpaca.html#iv-login-with-alpaca-real-oauth-method","title":"iv. Login with Alpaca Real (OAuth) Method","text":"<p>Note</p> <pre><code>Coming Soon! This option is not yet enabled!\n</code></pre> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ALPACA REAL broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(4). Click Log In.</p> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(5). Email ID: Your Email ID.</p> <p>(6). Password: The password you have set.</p> <p>(7). Click Login.</p> <p> </p> <p>(8). Click Allow if asked for authorization.</p> <p> </p>"},{"location":"broker/alpaca.html#v-after-any-of-the-above-2-methods","title":"v. After any of the above 2 methods...","text":"<p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p>"},{"location":"broker/alpaca.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/anandrathi.html","title":"Anand Rathi","text":"<ul> <li> <p>Official Website: https://anandrathi.com/</p> </li> <li> <p>Trading Website: https://algozy.rathi.com:3000/dashboard#!/login</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/anandrathi.html#1-login-and-set-up-your-anand-rathi-account","title":"1. Login and Set up your Anand Rathi Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/anandrathi.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Client ID</p> </li> <li> <p>App Key</p> </li> <li> <p>Secret Key</p> </li> </ul> <p>Contact your broker to get the Client ID, App Key and Secret Key.</p>"},{"location":"broker/anandrathi.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on Login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the Anand Rathi broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). Client ID: The ID given to you by your broker.</p> <p>(2). App Key: The app key given to you by the broker.</p> <p>(3). Secret Key: The secret key given to you by the broker.</p> <p>Contact your broker to get your App Key and Secret Key.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/anandrathi.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/angelbroking.html","title":"Angel Broking","text":"<ul> <li> <p>Official Website: https://www.angelbroking.com/</p> </li> <li> <p>Trading Website: https://trade.angelbroking.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/angelbroking.html#important-points-to-note","title":"Important Points to Note","text":"<p>To enable the TOTP please click here.</p>"},{"location":"broker/angelbroking.html#1-login-and-set-up-your-angel-broking-account","title":"1. Login and Set up your Angel Broking Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/angelbroking.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>API Key</p> </li> <li> <p>API Secret</p> </li> </ul> <p>Note</p> <ul> <li>To know more about API Key and Secret, see the following video (Only for Non-Oauth based login):</li> </ul>"},{"location":"broker/angelbroking.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li>Type the first few characters of your Broker Name.</li> </ul> <p>As seen here, Angel Broking supports 2 ways of logging in:</p> <ol> <li> <p>non-OAuth Method</p> </li> <li> <p>OAuth Method</p> </li> </ol> <p>Both are explained below</p>"},{"location":"broker/angelbroking.html#iii-login-with-non-oauth-method","title":"iii. Login with non-OAuth Method","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ANGELBROKING broker under other available brokers.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). API Key: The API Key given to you by your broker.</p> <p>(4). API Secret: The API Secret given to you by your broker.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/angelbroking.html#iv-login-with-oauth-method","title":"iv. Login with OAuth Method","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ANGELBROKING broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click Login.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/angelbroking.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/arhamwealth.html","title":"Arham Wealth","text":"<ul> <li> <p>Official Website: https://klevertrade.arhamwealth.com/</p> </li> <li> <p>Trading Website: https://klevertrade.arhamwealth.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/arhamwealth.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/arhamwealth.html#2-login-and-setup-your-arham-wealth-account","title":"2. Login and Setup your Arham Wealth Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/arhamwealth.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> </ul>"},{"location":"broker/arhamwealth.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on Login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ARHAMWEALTH OAuth broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click the Sign In button.</p> <p> </p> <p>(4). PIN: The PIN given to you by the broker.</p> <p>(5). Click the Submit button.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/arhamwealth.html#iii-another-way-to-bind-the-broker","title":"iii. Another Way to Bind the Broker","text":"<p>Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click the Sign In button.</p> <p> </p> <p>(4). PIN: The PIN given to you by the broker</p> <p>(5). Click the Submit button</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/arhamwealth.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/choice.html","title":"Choice Broker","text":"<ul> <li> <p>Official Website:  https://choiceindia.com/</p> </li> <li> <p>Trading Website: https://jiffy.choiceindia.com/auth/login</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/choice.html#1-login-and-set-up-your-choice-broking-account","title":"1. Login and Set up your Choice Broking Account","text":"<p>This section will take you through the step-wise instructions to log in, set up, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/choice.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> </ul>"},{"location":"broker/choice.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li>If the broker name is not visible in the list, click on + x more (where x is the number of brokers) on the bottom right corner of the page.</li> </ul> <ul> <li>In the search box, enter CHOICE, and then click on the broker link that appears in the list of results.</li> </ul>"},{"location":"broker/choice.html#iii-login-with-non-oauth-method","title":"iii. Login with non-OAuth Method","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the CHOICE broker.</p> </li> </ul> <p></p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p></p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p></p> <ul> <li>Choose the broker.</li> </ul> <p></p> <ul> <li> <p>Now Provide data for the following fields:</p> <ol> <li> <p>User ID: The ID given to you by your broker.</p> </li> <li> <p>Password: The password given to you by the broker.</p> </li> <li> <p>PIN</p> </li> </ol> </li> </ul> <p></p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p></p>"},{"location":"broker/choice.html#2-support","title":"2. Support","text":"<p>For further support related to adding your Choice broker account, contact our helpful customer support team on +91 80692 30300 or email us at support@algobulls.com.</p>"},{"location":"broker/edelweiss.html","title":"Edelweiss","text":"<ul> <li> <p>Official Website: https://www.edelweiss.in</p> </li> <li> <p>Trading Website: https://www.edelweiss.in/login</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/edelweiss.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/edelweiss.html#2-login-and-set-up-your-edelweiss-account","title":"2. Login and Set up your Edelweiss Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/edelweiss.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Login ID</p> </li> <li> <p>Password</p> </li> <li> <p>Year of Birth</p> </li> </ul>"},{"location":"broker/edelweiss.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li> <p>Visit the AlgoBulls Login Page and click on 'Edelweiss' under Login with your Broking Account.</p> </li> <li> <p>If you do not see your broker name, then click on + x more where x is the number of brokers.</p> </li> </ul> <p> </p> <ul> <li>Type Edelweiss in the Search Box. and then click on the Broker Link that is shown in the search results.</li> </ul> <p> </p> <p>(1). Type your Login ID.</p> <p>(2). Click on the Proceed button.</p> <p> </p> <p>(3). Type your Password.</p> <p>(4). Make sure that Yes, This is my Security Image is ticked.</p> <p>(5). Click on the Proceed button.</p> <p> </p> <p>(6). Type your Year of Birth.</p> <p>(7). Click on the Continue button.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/edelweiss.html#iii-another-way-to-bind-the-broker","title":"iii. Another Way to Bind the Broker","text":"<p>Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). Type your Login ID.</p> <p>(2). Click on the Proceed button.</p> <p> </p> <p>(3). Type your Password.</p> <p>(4). Make sure that Yes, This is my Security Image is ticked.</p> <p>(5). Click on the Proceed button.</p> <p> </p> <p>(6). Type your Year of Birth.</p> <p>(7). Click on the Continue button.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/edelweiss.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/findoc.html","title":"FinDoc","text":"<ul> <li> <p>Official Website: https://www.myfindoc.com/</p> </li> <li> <p>Trading Website: https://fintrader.myfindoc.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/findoc.html#1-login-and-set-up-your-findoc-account","title":"1. Login and Set up your FinDoc Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/findoc.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>(1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>(2) Broking Account Credentials</p> <ul> <li> <p>Client ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> </ul>"},{"location":"broker/findoc.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on \u2018FinDoc\u2019 under Login with your Broking Account.</li> </ul> <ul> <li>If you do not see your broker name, then click on + x more where x is the number of brokers</li> </ul> <ul> <li>Type FinDoc in the Search Box and then click on the Broker Link that is shown in the search results</li> </ul> <ul> <li> <p>Client ID</p> </li> <li> <p>Password</p> </li> </ul> <p> </p> <ul> <li> <p>PIN</p> </li> <li> <p>Click on Submit</p> </li> </ul> <p> </p>"},{"location":"broker/findoc.html#2-bind-your-broking-account","title":"2. Bind your Broking Account","text":"<ul> <li> <p>The following steps will help you to make sure you have binded your broker account</p> </li> <li> <p>Visit the AlgoBulls Broking Details</p> </li> <li> <p>Bind your account using the Toggle button marked below</p> </li> </ul> <p> </p>"},{"location":"broker/findoc.html#3-support","title":"3. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/finvasia.html","title":"Finvasia","text":"<ul> <li> <p>Official Website: www.finvasia.com</p> </li> <li> <p>Trading Website: https://shoonya.finvasia.com/#/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/finvasia.html#1-login-and-set-up-your-finvasia-account","title":"1. Login and Set up your Finvasia Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/finvasia.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>(1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>(2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PAN/DOB</p> </li> </ul>"},{"location":"broker/finvasia.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on \u2018Finvasia\u2019 under Login with your Broking Account</li> </ul> <ul> <li>If you do not see your broker name, then click on + x more where x is the number of brokers</li> </ul> <ul> <li>Type Finvasia in the Search Box and then click on the Broker Link that is shown in the search results</li> </ul> <ul> <li>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</li> </ul> <p>(1). Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> <p>(2). Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> <ul> <li>Now go to Broking Details and click add broker</li> </ul> <p> </p> <ul> <li>Choose the broker</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker</p> <p>(2). Password: The password given to you by the broker</p> <p>(3). PAN/DOB: The 2-factor authentication answer you have given (your PAN Card number or DOB)</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message</li> </ul> <p> </p>"},{"location":"broker/finvasia.html#3-bind-your-broking-account","title":"3. Bind your Broking Account","text":"<p>The following steps will help you to make sure you have binded your broker account * Visit the AlgoBulls Broker Settings Page * Bind your account using the Toggle button marked below</p>"},{"location":"broker/finvasia.html#4-support","title":"4. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/fivepaisa.html","title":"5PAISA","text":"<ul> <li> <p>Official Website: https://www.5paisa.com/</p> </li> <li> <p>Trading Website: https://login.5paisa.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/fivepaisa.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/fivepaisa.html#2-login-and-set-up-your-5paisa-account","title":"2. Login and Set up your 5PAISA Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/fivepaisa.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Encrypted EMail / ClientCode / Mobile</p> </li> <li> <p>Encrypted Password</p> </li> <li> <p>Encrypted DOB</p> </li> </ul>"},{"location":"broker/fivepaisa.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the 5PAISA broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). EMail/ClientCode/Mobile: Provide any one of the following generated by you.</p> <p>(2). Password: The Password generated by you.</p> <p>(3). DOB: The DOB generated by you.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/fivepaisa.html#iii-another-way-to-bind-the-broker","title":"iii. Another Way to Bind the Broker","text":"<p>Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). EMail/ClientCode/Mobile: Provide any one of the following generated by you.</p> <p>(2). Password: The Password generated by you.</p> <p>(3). DOB: The DOB generated by you.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/fivepaisa.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/fyers.html","title":"Fyers","text":"<ul> <li> <p>Official Website: https://login.fyers.in/</p> </li> <li> <p>Trading Website: https://login.fyers.in/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/fyers.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/fyers.html#2-login-and-set-up-your-fyers-account","title":"2. Login and Set up your Fyers Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/fyers.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>App ID</p> </li> <li> <p>Secret ID</p> </li> <li> <p>4-digit Pin</p> </li> </ul> <p>Note</p> <p>To get the App ID and Secret ID, you'll have to create an App in your Fyers account. Please follow the below steps to create an app in your Fyers account.</p>"},{"location":"broker/fyers.html#ii-app-creation","title":"ii. App Creation","text":"<ul> <li>Login to your Fyers account and click on the Create App button.</li> </ul> <ul> <li>Give the App Name as AlgoBulls</li> <li>Give the Redirect URL as https://app.algobulls.com/loading</li> </ul> <ol> <li> <p>Scroll down and delete the default Webhook/Postbacks.</p> </li> <li> <p>Check all the checkboxes in the App Permission section.</p> </li> <li> <p>Check the Terms and Conditions checkbox.</p> </li> <li> <p>Click on the Create App button at the bottom.</p> </li> </ol> <p> </p> <ul> <li>Once the app is created, copy the App ID and Secret ID for the next steps.</li> </ul> <p> </p>"},{"location":"broker/fyers.html#iii-one-time-activity","title":"iii. One-Time Activity","text":"<ul> <li>Visit the AlgoBulls Login Page.</li> </ul> <ul> <li>If you do not see your broker name, then type Fyers in the Search Box. and then click on the Broker Link that shows 1-time-activity as the tooltip.</li> </ul> <ul> <li> <p>Login to your AlgoBulls account.</p> </li> <li> <p>Once you login you'll be redirected to the pane with the Fyers 1-time activity selected. Click on Next.</p> </li> </ul> <p> </p> <ul> <li>Enter your App ID in the CLIENT_API_KEY field and your Secret ID in the CLIENT_SECRET_KEY field. Click on Confirm.</li> </ul> <p> </p> <ul> <li>Your 1-time activity is complete.</li> </ul> <p> </p> <ul> <li>You can see the broker added in the Broking Details section.</li> </ul> <p> </p>"},{"location":"broker/fyers.html#iv-daily-activity-login","title":"iv. Daily Activity (Login)","text":"<ul> <li>Now click on Add Broker, type Fyers in the search bar and click on the Broker Link that shows Daily Login as the tooltip.</li> </ul> <ul> <li>You'll be redirected to the Fyers login page. Enter your mobile number and click on Continue.</li> </ul> <ul> <li>Type the OTP that you receive and click on Confirm OTP.</li> </ul> <ul> <li>Enter your 4-digit Pin and click on Sign in.</li> </ul> <ul> <li>You'll be redirected back to the AlgoBulls Broking Details section where you can see the broker added.</li> </ul>"},{"location":"broker/fyers.html#v-another-way-to-login","title":"v. Another way to login","text":""},{"location":"broker/fyers.html#a-one-time-activity","title":"a. One-Time Activity","text":"<ul> <li>Login to your AlgoBulls account</li> </ul> <ul> <li>Go to the Broking Details section and click on Add Broker.</li> </ul> <ul> <li>Select the Non OAuth broker and click Next.</li> </ul> <ul> <li>Enter your App ID in the CLIENT_API_KEY field and Secret ID in the CLIENT_SECRET_KEY field. Click on Confirm.</li> </ul> <ul> <li>Broker is binded to your account.</li> </ul>"},{"location":"broker/fyers.html#b-daily-activity-login","title":"b. Daily Activity (Login)","text":"<ul> <li>Click on Add Broker, type Fyers in the search bar and select the broker.</li> </ul> <ul> <li>You'll be redirected to the Fyers login page, Enter your mobile number and click on Continue.</li> </ul> <ul> <li>Type the OTP that you receive and click on Confirm OTP.</li> </ul> <ul> <li>Enter your 4-digit Pin and click on Sign in.</li> </ul> <ul> <li>You'll be redirected back to the AlgoBulls Broking Details section where you can see the broker added.</li> </ul>"},{"location":"broker/fyers.html#3-support","title":"3. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/icicisecurities.html","title":"ICICI Securities","text":"<ul> <li> <p>Official Website: https://www.icicidirect.com/</p> </li> <li> <p>Trading Website: https://www.icicidirect.com/</p> </li> <li> <p>Developer Website: https://api.icicidirect.com/apiuser/home</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/icicisecurities.html#1-important-points-to-note","title":"1. Important Points to Note","text":"<ul> <li>It is required to log in once daily (at the start of the trading day)</li> </ul>"},{"location":"broker/icicisecurities.html#2-login-and-set-up-your-icici-securities-account","title":"2. Login and Set up your ICICI Securities Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/icicisecurities.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PAN No./ DOB </p> </li> </ul>"},{"location":"broker/icicisecurities.html#ii-one-time-activity","title":"ii. One-Time Activity","text":"<p>This activity will help you to link your broking account to the AlgoBulls account via the oauth method.</p> <p>Note</p> <ul> <li>If you have done this activity once before, then you can directly skip to the Daily Activity section</li> </ul> <ul> <li>Visit https://api.icicidirect.com/apiuser/home.</li> </ul> <p> </p> <ul> <li>Enter your User ID, Password and PAN No./DOB. Click the Login button.</li> </ul> <p> </p> <ul> <li>Click the <code>Register an app</code> button.</li> </ul> <p> </p> <ul> <li> <p>On the <code>Register an app</code> page, fill the following fields:</p> <ul> <li> <p>App name: Give the app name. Example: <code>algobulls_icici</code>.</p> </li> <li> <p>Redirect URL: Give the value <code>https://app.algobulls.com/loading</code>.</p> </li> </ul> </li> <li> <p>Click the <code>Submit</code> button.</p> </li> </ul> <p> </p> <ul> <li>Now Copy and Save the App key.</li> </ul> <p> </p> <ul> <li>Now click on the 'View Apps' button.</li> </ul> <p> </p> <ul> <li>Current App Status is 'Deactive'. Click on it to activate the app.</li> </ul> <p> </p> <ul> <li>Click 'Yes' to confirm.</li> </ul> <p> </p> <ul> <li>Ensure that the App status has changed to 'Active'.</li> </ul> <p> </p> <ul> <li> <p>Now visit https://www.urlencoder.org/ to Encode your key.</p> </li> <li> <p>Type your 'APP key' in the box.</p> </li> </ul> <p> </p> <ul> <li> <p>Click on <code>Encode</code> and encoded key will appear in box below .</p> </li> <li> <p>Copy and Save the Encoded key.</p> </li> </ul> <p> </p>"},{"location":"broker/icicisecurities.html#iii-daily-activity-login","title":"iii. Daily Activity (Login)","text":"<p>Note</p> <ul> <li>Perform the following steps at the start of every trading day</li> </ul> <ul> <li>Visit the AlgoBulls Login Page and click on <code>Login with your Broking Account</code></li> </ul> <p> </p> <p>(1). Type the first few characters of your Broker Name.</p> <p>(2). Select the <code>ICICI Securities</code> broker.</p> <p> </p> <p>Now paste your saved Encoded key in the following URL</p> <p>Example: If the Encoded APP key is uS3r@ppKey and the URL is:</p> <pre><code>https://api.icicidirect.com/apiuser/login?api_key=placeappkeyhere\n</code></pre> <p>then the new URL will be:</p> <pre><code>https://api.icicidirect.com/apiuser/login?api_key=uS3r@ppKey\n</code></pre> <p> </p> <p>Press Enter after modifying the URL with your APP key.</p> <p>Now provide data for the following fields:</p> <p>(3). User ID: The ID given to you by your broker.</p> <p>(4). Password: The password given to you by the broker.</p> <p>(5). DOB/PAN: Add Date Of Birth or PAN number.</p> <p>(6). Agree to terms and conditions.</p> <p>(7). Click <code>Submit</code> button.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/icicisecurities.html#iv-another-way-to-bind-the-broker","title":"iv. Another Way to Bind the Broker","text":"<p>Login to your AlgoBulls account. Provide data for the following fields and then click the <code>Login</code> button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to <code>Broking Details</code> and click add broker.</li> </ul> <p> </p> <p>(1) &amp; (2) Choose the broker and click 'Next'.</p> <p> </p> <p>Now paste your saved Encoded key in the following URL</p> <p>Example: If the Encoded APP key is uS3r@ppKey and the URL is:</p> <pre><code>https://api.icicidirect.com/apiuser/login?api_key=placeappkeyhere\n</code></pre> <p>then the new URL will be:</p> <pre><code>https://api.icicidirect.com/apiuser/login?api_key=uS3r@ppKey\n</code></pre> <p> </p> <p>Press Enter after modifying the URL with your APP key</p> <p>Now provide data for the following fields:</p> <p>(3). User ID: The ID given to you by your broker.</p> <p>(4). Password: The password given to you by the broker.</p> <p>(5). DOB/PAN: Add Date Of Birth or PAN number.</p> <p>(6). Agree to terms and conditions.</p> <p>(7). Click <code>Submit</code> button.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/icicisecurities.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/iifl.html","title":"IIFL Securities","text":"<ul> <li> <p>Official Website: https://www.indiainfoline.com/</p> </li> <li> <p>Trading Website: https://ttweb.indiainfoline.com/Trade/Login.aspx</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/iifl.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/iifl.html#2-login-and-set-up-your-iifl-securities-account","title":"2. Login and Set up your IIFL Securities Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/iifl.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Encrypted Client Code</p> </li> <li> <p>Encrypted Password</p> </li> <li> <p>Encrypted DOB</p> </li> </ul>"},{"location":"broker/iifl.html#ii-encrypting-your-credentials","title":"ii. Encrypting your Credentials","text":"<p>To encrypt your credentials, contact Support.</p>"},{"location":"broker/iifl.html#iii-lets-start","title":"iii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the IIFL SECURITIES broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). Encrypted Client Code: The Encrypted Client Code generated by you.</p> <p>(2). Encrypted Password: The Encrypted Password generated by you.</p> <p>(3). Encrypted DOB: The Encrypted DOB generated by you.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/iifl.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/indirasecurities.html","title":"Indira Securities","text":"<ul> <li> <p>Official Website: https://www.indiratrade.com/</p> </li> <li> <p>Trading Website: https://www.indiratrade.com/trade-online</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/indirasecurities.html#1-login-and-set-up-your-indira-securities-account","title":"1. Login and Set up your Indira Securities Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/indirasecurities.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>2FA Answers (your PAN Card number)</p> </li> </ul>"},{"location":"broker/indirasecurities.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the INDIRASECURITIES broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). 2FA Answers: The 2-factor authentication answer you have given (your PAN Card number).</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/indirasecurities.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/jainamduck.html","title":"Jainam Duck","text":"<ul> <li> <p>Official Website: https://spark.jainam.in</p> </li> <li> <p>Trading Website: https://spark.jainam.in</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/jainamduck.html#1-login-and-set-up-your-jainam-duck-account","title":"1. Login and Set up your Jainam Duck Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/jainamduck.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> </ul>"},{"location":"broker/jainamduck.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the JAINAM DUCK OAuth broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click the Sign In button.</p> <p> </p> <p>(4). PIN: The PIN given to you by the broker.</p> <p>(5). Click the Submit button.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/jainamduck.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/kotaksecurities.html","title":"Kotak Securities","text":"<ul> <li> <p>Official Website: https://www.kotaksecurities.com/</p> </li> <li> <p>Trading Website: https://www.kotaksecurities.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/kotaksecurities.html#1-login-and-set-up-your-kotak-securities-account","title":"1. Login and Set up your Kotak Securities Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/kotaksecurities.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>Consumer Key</p> </li> <li> <p>Access Token</p> </li> </ul> <p>Note</p> <ul> <li>Get your Consumer Key and Access Token from here </li> </ul>"},{"location":"broker/kotaksecurities.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the KOTAK SECURITIES broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Consumer Key: The consumer key given to you by the broker.</p> <p>(4). Access Token: The access token given to you by the broker.</p> <p>Get your Consumer Key and Access Token from here.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/kotaksecurities.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/kotaksecuritiesneotrade.html","title":"Kotak Securities Neo Trade","text":"<ul> <li> <p>Official Website: https://www.kotaksecurities.com/</p> </li> <li> <p>Trading Website: https://www.kotaksecurities.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/kotaksecuritiesneotrade.html#1-login-and-set-up-your-kotak-securities-neo-trade-account","title":"1. Login and Set up your Kotak Securities  Neo Trade Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/kotaksecuritiesneotrade.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>API Key</p> </li> <li> <p>API Secret</p> </li> <li> <p>API User ID</p> </li> <li> <p>API Password</p> </li> <li> <p>Mobile Number</p> </li> <li> <p>Password</p> </li> <li> <p>MPIN</p> </li> </ul>"},{"location":"broker/kotaksecuritiesneotrade.html#ii-how-to-get-your-api-key-and-api-secret","title":"ii. How to get your API Key and API Secret","text":"<ul> <li>Click here to login into your WSO2 account. Enter the API User ID as Username and the API Password as Password and click on Continue.</li> </ul> <ul> <li>Click on Applications and then click on DefaultApplication. </li> </ul> <ul> <li>Click on the Production Keys tab to the left to get the API Key (Consumer Key) and API Secret (Consumer Secret).</li> </ul> <ul> <li>Set the expiry to 36000000000000 to ensure that the Consumer Key and Consumer Secret do not expire frequently.</li> </ul>"},{"location":"broker/kotaksecuritiesneotrade.html#iii-lets-start","title":"iii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on Login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the Kotak Securities Neo Trade broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker.</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). API Key: The Consumer Key given to you by your broker.</p> <p>(2). API Secret: The Consumer Secret given to you by your broker.</p> <p>(3). API Secret: The Consumer Secret given to you by your broker.</p> <p>(4). API User ID: Your WSO2 login user id.</p> <p>(5). API Password: Your WSO2 login password.</p> <p>(6). Mobile Number: Your mobile number registered with the broker.</p> <p>(7). Password: The Consumer Secret given to you by your broker.</p> <p>(8). MPIN: The Consumer Secret given to you by your broker.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/kotaksecuritiesneotrade.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/mastertrust.html","title":"Mastertrust","text":"<ul> <li> <p>Official Website: https://www.mastertrust.co.in/</p> </li> <li> <p>Trading Website: https://masterswift-beta.mastertrust.co.in/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/mastertrust.html#1-important-points-to-note","title":"1. Important Points to Note","text":"<ul> <li> <p>Use the following link to login to your broking account: </p> <p>https://masterswift-beta.mastertrust.co.in/</p> </li> <li> <p>You may lose connectivity to your binded broker on the AlgoBulls account if any other app or website is used to login to your account.</p> </li> </ul>"},{"location":"broker/mastertrust.html#2-login-and-set-up-your-mastertrust-account","title":"2. Login and Set up your Mastertrust Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/mastertrust.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>DOB</p> </li> </ul>"},{"location":"broker/mastertrust.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the MASTERTRUST broker.</p> </li> </ul> <p> </p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). DOB: Your Date of Birth.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/mastertrust.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/moneykrishnafinance.html","title":"Money Krishna Financial Services","text":"<ul> <li> <p>Official Website: https://www.moneykrishna.com/</p> </li> <li> <p>Trading Website: https://mkf.hypertrade.in/login</p> </li> <li> <p>MKF Login URL: https://hsconsole.hypertrade.in/login </p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/moneykrishnafinance.html#1-one-time-activity","title":"1. One-Time Activity","text":"<p>This is a pre-requisite activity to be done before you can link your broking account to the AlgoBulls account via the Non-OAuth method.</p> <ul> <li> <p>Visit https://hsconsole.hypertrade.in/login?brokerId=MKF </p> </li> <li> <p>Enter your User ID and Password.</p> </li> </ul> <p> </p> <p>Enter the MPIN:</p> <p> </p> <p>Create the App:</p> <p> </p> <p>Note:</p> <p>Ensure that the App name is AlgoBulls &amp; the App URL you will be redirected to should be https://app.algobulls.com/loading.</p> <p>Once the App is created successfully, the App name, Client ID, Client Secret &amp; Redirect URL will be displayed. Ensure you note down this information, you will not be able to reset this information later. Click on confirm.</p> <p> </p> <p>If you click on confirm without noting down the above-mentioned details displayed by the broker, you will have to delete the App by clicking the Delete App button and repeat the entire process to create the App again.</p> <p> </p>"},{"location":"broker/moneykrishnafinance.html#2-login-set-up-your-money-krishna-financial-services-mkf-account","title":"2. Login &amp; Set up your Money Krishna Financial Services (MKF) account.","text":"<p>This section will take you through the step-wise instructions to log in, set up, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/moneykrishnafinance.html#i-before-you-start","title":"i. Before you start","text":"<p>Keep the following information available before you start:</p> <p>(1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>(2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> <li> <p>Client ID (Available only after App creation)</p> </li> <li> <p>Client Secret Code (Available only after App creation)</p> </li> </ul>"},{"location":"broker/moneykrishnafinance.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li>If the broker name is not visible in the list, click on + x more (where x is the number of brokers) on the bottom right corner of the page.</li> </ul> <ul> <li>In the search box, enter MONEY KRISHNA FINANCIAL SERVICES, and then click on the broker link that appears in the list of results.</li> </ul>"},{"location":"broker/moneykrishnafinance.html#iii-login-with-non-oauth-method","title":"iii. Login with Non-OAuth Method","text":"<ul> <li> <p>Type the first few characters of the broker's name.</p> </li> <li> <p>Select the MONEY KRISHNA FINANCIAL SERVICES broker.</p> </li> </ul> <p></p> <p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p></p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p></p> <ul> <li>Choose the broker.</li> </ul> <p></p> <ul> <li>Now provide data for the following fields:</li> </ul> <p>(1) User ID: The ID given to you by your broker.</p> <p>(2) Password: The password given to you by the broker.</p> <p>(3) PIN: The PIN provided to you by the broker.  </p> <p>(4) Client ID: The Client ID displayed during the App creation. </p> <p>(5) Client Secret: The Client Secret displayed during the App creation. </p> <p></p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p></p>"},{"location":"broker/moneykrishnafinance.html#3-support","title":"3. Support","text":"<p>For further support related to adding your Money Krishna Financial Services broker account, contact our helpful customer support team on +91 80692 30300 or email us at support@algobulls.com</p>"},{"location":"broker/motilaloswal.html","title":"Motilal Oswal","text":"<ul> <li> <p>Official Website: https://www.mastertrust.co.in/</p> </li> <li> <p>Trading Website: https://masterswift-beta.mastertrust.co.in/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/motilaloswal.html#1-login-and-set-up-your-motilal-account","title":"1. Login and Set up your Motilal Account","text":"<p>You will be guided step-by-step through the process of logging in, setting up, and binding your broker to your AlgoBulls account in this section.</p>"},{"location":"broker/motilaloswal.html#i-before-you-begin","title":"i. Before you begin","text":"<p>Keep the following information available before you start:</p> <p>(1). AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>(2). Broking Account Credentials</p> <ul> <li> <p>User ID/ Client ID</p> </li> <li> <p>Password</p> </li> </ul>"},{"location":"broker/motilaloswal.html#ii-lets-begin","title":"ii. Let's Begin!","text":"<ul> <li>Visit the AlgoBulls Login Page and click on Motilal Oswal under the Login with your Broking Account section.</li> </ul> <ul> <li>If the broker name is not visible in the list, click on + x more (where x is the number of brokers) on the bottom right corner of the page.</li> </ul> <ul> <li>In the search box, enter MOTILAL OSWAL, and then click on the broker link that appears in the list of results.</li> </ul> <ul> <li>Log in to your AlgoBulls account by entering your AlgoBulls credentials in the following fields before clicking on the login button.</li> </ul> <p>(1). Phone Number: The phone number used to register/sign-up to the AlgoBulls website.</p> <p>(2). Password: The password used while registering on the AlgoBulls website.</p> <ul> <li>Click the Add Broker button under Broking Details now.</li> </ul> <p> </p> <ul> <li>Choose Motilal Oswal from the broker list.</li> </ul> <p> </p> <p>Select Next. You will be directed to the Motilal Oswal Login Page.</p> <p> </p> <ul> <li> <p>Enter your Client Code.</p> </li> <li> <p>Followed by your Password. </p> </li> <li> <p>Check the Terms &amp; Conditions box. </p> </li> <li> <p>Click on Login.</p> </li> </ul>"},{"location":"broker/motilaloswal.html#2-bind-your-broking-account","title":"2. Bind your Broking Account","text":"<p>The following steps will help you to make sure you have binded your broker account.</p> <ul> <li> <p>Visit the AlgoBulls Broker Settings Page.</p> </li> <li> <p>Bind your account using the Toggle button marked below.     </p> </li> </ul>"},{"location":"broker/motilaloswal.html#3-support","title":"3. Support","text":"<p>For further support related to adding your Motilal Oswal broker account, contact our helpful customer support team on +91 80692 30300 or email us at support@algobulls.com</p>"},{"location":"broker/paytmmoney.html","title":"PayTM Money","text":"<ul> <li> <p>Official Website: https://www.mastertrust.co.in/</p> </li> <li> <p>Trading Website: https://masterswift-beta.mastertrust.co.in/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/paytmmoney.html#1-login-and-set-up-your-paytm-money-account","title":"1. Login and Set up your PayTM Money Account","text":"<p>You will be guided step-by-step through the process of logging in, setting up, and binding your broker to your AlgoBulls account in this section.</p>"},{"location":"broker/paytmmoney.html#i-before-you-begin","title":"i. Before you begin","text":"<p>Keep the following information available before you start:</p> <p>(1). AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>(2). Broking Account Credentials</p> <ul> <li> <p>User ID/ Client ID</p> </li> <li> <p>Password</p> </li> </ul>"},{"location":"broker/paytmmoney.html#ii-lets-begin","title":"ii. Let's Begin!","text":"<ul> <li>Visit the AlgoBulls Login Page and click on PayTM Money under the Login with your Broking Account section.</li> </ul> <ul> <li>If the broker name is not visible in the list, click on + x more (where x is the number of brokers) on the bottom right corner of the page.</li> </ul> <ul> <li>In the search box, enter PayTM Money, and then click on the broker link that appears in the list of results.</li> </ul> <ul> <li>Log in to your AlgoBulls account by entering your AlgoBulls credentials in the following fields before clicking on the login button.</li> </ul> <p>(1). Phone Number: The phone number used to register/sign-up to the AlgoBulls website.</p> <p>(2). Password: The password used while registering on the AlgoBulls website.</p> <ul> <li>Click the Add Broker button under Broking Details now.</li> </ul> <p> </p> <ul> <li>Choose PayTM Money from the broker list.</li> </ul> <p> </p> <p>Select Next. You will be directed to the PayTM Money Login Page.</p> <p> </p> <ul> <li> <p>Enter the registered Mobile Number or Email ID.</p> </li> <li> <p>Followed by your Password.</p> </li> <li> <p>You will be redirected to the OTP page.</p> </li> <li> <p>Enter the OTP sent on your registered mobile number &amp; click on next.</p> </li> </ul> <p> </p> <p>Note</p> <pre><code>Please do not log out of your PayTM Money account as this will cause the sessions to expire in your running strategies.\n</code></pre>"},{"location":"broker/paytmmoney.html#2-bind-your-broking-account","title":"2. Bind your Broking Account","text":"<p>The following steps will help you to make sure you have binded your broker account. </p> <ul> <li> <p>Visit the AlgoBulls Broker Settings Page.</p> </li> <li> <p>Bind your account using the Toggle button marked below.</p> </li> </ul>"},{"location":"broker/paytmmoney.html#3-support","title":"3. Support","text":"<p>For further support related to adding your PayTM Money broker account, contact our helpful customer support team on +91 80692 30300 or email us at support@algobulls.com</p>"},{"location":"broker/rudrashares.html","title":"Rudra Shares","text":"<ul> <li> <p>Official Website: https://www.rudrashares.com/</p> </li> <li> <p>Trading Website: https://onlinetrading.rudrashares.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/rudrashares.html#1-login-and-set-up-your-rudra-shares-account","title":"1. Login and Set up your Rudra Shares Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/rudrashares.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> </ul>"},{"location":"broker/rudrashares.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the RUDRA SHARES OAuth broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click the Sign In button.</p> <p> </p> <p>(4). PIN: The PIN given to you by the broker.</p> <p>(5). Click the Submit button.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/rudrashares.html#iii-another-way-to-bind-the-broker","title":"iii. Another Way to Bind the Broker","text":"<p>Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click the Sign In button.</p> <p> </p> <p>(4). PIN: The PIN given to you by the broker.</p> <p>(5). Click the Submit button.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/rudrashares.html#2-support","title":"2. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/sharekhan.html","title":"ShareKhan","text":"<ul> <li> <p>Official Website: https://www.sharekhan.com/</p> </li> <li> <p>Trading Website: https://newtrade.sharekhan.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/sharekhan.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/sharekhan.html#2-login-and-set-up-your-sharekhan-account","title":"2. Login and Set up your ShareKhan Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/sharekhan.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Login ID</p> </li> <li> <p>Membership Password</p> </li> <li> <p>Trading Password</p> </li> </ul>"},{"location":"broker/sharekhan.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on Login with your Broking Account.</li> </ul> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the SHAREKHAN broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the Verification Page. Provide data for the following fields:</li> </ul> <p>(1). Login ID: The ID given to you by your broker.</p> <p>(2). Membership Password: The Membership Password given to you by the broker.</p> <p>(3). Trading Password: The Trading Password given to you by the broker.</p> <p> </p> <ul> <li>If the login is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/sharekhan.html#iii-another-way-to-bind-the-broker","title":"iii. Another Way to Bind the Broker","text":"<p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button.</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>Now Provide data for the following fields:</li> </ul> <p>(1). Login ID: The ID given to you by your broker.</p> <p>(2). Membership Password: The Membership Password given to you by the broker.</p> <p>(3). Trading Password: The Trading Password given to you by the broker .</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/sharekhan.html#3-support","title":"3. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/upstox.html","title":"Upstox","text":"<ul> <li> <p>Official Website: https://login.upstox.com/</p> </li> <li> <p>Trading Website: https://login.upstox.com/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/upstox.html#1-important-points-to-note","title":"1. Important Point(s) to Note","text":"<ul> <li>It is required to login once daily (at the start of the trading day).</li> </ul>"},{"location":"broker/upstox.html#2-login-and-set-up-your-upstox-account","title":"2. Login and Set up your Upstox Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/upstox.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>Mobile Number</p> </li> <li> <p>App Key</p> </li> <li> <p>App Secret</p> </li> <li> <p>6-digit Pin</p> </li> </ul> <p>Note</p> <p>To get the App Key and Secret Key, you'll have to create an App in your Upstox account. Please follow the below steps to create an app in your Upstox account.</p>"},{"location":"broker/upstox.html#ii-app-creation","title":"ii. App Creation","text":"<ul> <li>Login to your Upstox account and click on the App tab and click on +New app.</li> </ul> <ul> <li>Give the App Name as AlgoBulls</li> <li> <p>Give the Redirect URL as https://app.algobulls.com/loading</p> </li> <li> <p>Check the Terms and Conditions checkbox.</p> </li> <li> <p>Click on Continue button at the bottom.</p> </li> </ul> <p> </p> <ol> <li>Click on Confirm Plan.</li> </ol> <p> </p> <ol> <li>Your app is created successfully.</li> </ol> <p> </p> <ul> <li>Once the app is created, click the copy icon to copy the App Key and Secret Key for the next steps. You can also edit/delete the app if required.  </li> </ul> <p> </p>"},{"location":"broker/upstox.html#iii-one-time-activity","title":"iii. One-Time Activity","text":"<ul> <li>Visit the AlgoBulls Login Page.</li> </ul> <ul> <li>If you do not see your broker name, then type Upstox in the Search Box. and then click on the Broker Link that shows 1-time-activity as the tooltip.</li> </ul> <ul> <li> <p>Login to your AlgoBulls account.</p> </li> <li> <p>Once you login you'll be redirected to the pane with the Upstox 1-time activity selected. Click on Next.</p> </li> </ul> <p> </p> <ul> <li>Enter your App ID in the CLIENT_API_KEY field and your Secret ID in the CLIENT_SECRET_KEY field. Click on Confirm.</li> </ul> <p> </p> <ul> <li>Your 1-time activity is complete.</li> </ul> <p> </p> <ul> <li>You can see the broker added in the Broking Details section. Click on Add Broker again.</li> </ul>"},{"location":"broker/upstox.html#iv-daily-activity-login","title":"iv. Daily Activity (Login)","text":"<ul> <li>Now click on Add Broker, type Upstox in the search bar and click on the Broker Link that shows OAuth to the right hand side of the option.</li> </ul> <p>or if you haven't logged into the website, then search Upstox and select Daily Login and login into your AlgoBulls account.</p> <p> </p> <ul> <li>You'll be redirected to the Upstox login page. Enter your mobile number and click on Get OTP.</li> </ul> <p> </p> <ul> <li>Type the OTP that you receive and click on Continue.</li> </ul> <p> </p> <ul> <li>Enter your 6-digit Pin and click on Continue.</li> </ul> <p> </p> <ul> <li>You'll be redirected back to the AlgoBulls Broking Details section where you can see the broker added.</li> </ul> <p> </p> <p>Note</p> <p>Ensure that the OAuth entry is marked as primary.  </p>"},{"location":"broker/upstox.html#v-another-way-to-login","title":"v. Another way to login","text":""},{"location":"broker/upstox.html#a-one-time-activity","title":"a. One-Time Activity","text":"<ul> <li>Login to your AlgoBulls account</li> </ul> <ul> <li>Go to the Broking Details section and click on Add Broker.</li> </ul> <ul> <li>Select the Non OAuth broker and click Next.</li> </ul> <ul> <li>Enter your App Key in the CLIENT_API_KEY field and Secret Key in the CLIENT_SECRET_KEY field. Click on Confirm.</li> </ul> <ul> <li>Broker is binded to your account.</li> </ul>"},{"location":"broker/upstox.html#b-daily-activity-login","title":"b. Daily Activity (Login)","text":"<ul> <li>Click on Add Broker, type Upstox in the search bar and select the OAuth broker.</li> </ul> <ul> <li>You'll be redirected to the Upstox login page, Enter your mobile number and click on Continue.</li> </ul> <ul> <li>Type the OTP that you receive and click on Continue.</li> </ul> <ul> <li>Enter your 6-digit Pin and click on Continue.</li> </ul> <ul> <li>You'll be redirected back to the AlgoBulls Broking Details section where you can see the broker added.</li> </ul>"},{"location":"broker/upstox.html#3-support","title":"3. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/zebu.html","title":"Zebu","text":"<ul> <li> <p>Official Website: https://zebuetrade.com/</p> </li> <li> <p>Trading Website: https://zebull.in/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/zebu.html#1-important-points-to-note","title":"1. Important Points to Note","text":"<ul> <li>It is required to log in once daily (at the start of the trading day) using the link https://zebull.in before executing any strategy. Also, do not logout, but it is ok to close the tab directly.</li> </ul>"},{"location":"broker/zebu.html#2-login-and-set-up-your-zebu-account","title":"2. Login and Set up your Zebu Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/zebu.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) AlgoBulls Account Credentials</p> <ul> <li> <p>Phone Number</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>API Key</p> </li> </ul>"},{"location":"broker/zebu.html#ii-lets-start","title":"ii. Let's Start","text":"<ul> <li>Visit the AlgoBulls Login Page and click on Login with your Broking Account.</li> </ul> <ul> <li>Type the first few characters of your Broker Name.</li> </ul>"},{"location":"broker/zebu.html#iii-login","title":"iii. Login","text":"<ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the ZEBU broker.</p> </li> </ul> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p> </p> <p>(2). Password: The password given to you by the broker.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul>"},{"location":"broker/zebu.html#iv-another-way-to-bind-the-broker","title":"iv. Another Way to Bind the Broker","text":"<p>Now Login to your AlgoBulls account. Provide data for the following fields and then click the Login button</p> <ul> <li> <p>Phone Number: The Phone Number you have used to Register/Sign-Up to the AlgoBulls website.</p> </li> <li> <p>Password: The password you have given to Register/Sign-Up to the AlgoBulls website.</p> </li> </ul> <p> </p> <ul> <li>Now go to Broking Details and click add broker.</li> </ul> <p> </p> <ul> <li>Choose the broker .</li> </ul> <p> </p> <ul> <li>You will be re-directed to the broker login page. Provide data for the following fields:</li> </ul> <p>(1). User ID: The ID given to you by your broker.</p> <p> </p> <p>(2). Password: The password given to you by the broker.</p> <p> </p> <ul> <li>If the verification is successful, you will see the following message:</li> </ul> <p> </p>"},{"location":"broker/zebu.html#3-support","title":"3. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"broker/zerodha.html","title":"Zerodha","text":"<ul> <li> <p>Official Website: https://zerodha.com/</p> </li> <li> <p>Trading Website: https://kite.zerodha.com/</p> </li> <li> <p>Developer Website: https://kite.trade/</p> </li> <li> <p>Markets Supported: India</p> </li> </ul>"},{"location":"broker/zerodha.html#1-important-points-to-note","title":"1. Important Points to Note","text":"<ul> <li> <p>It is required to log in once daily (at the start of the trading day) using the steps given in the Daily Activity section.</p> </li> <li> <p>TOTP is required (mandatory) in order to place trades in your account.</p> </li> </ul>"},{"location":"broker/zerodha.html#2-login-and-set-up-your-zerodha-account","title":"2. Login and Set up your Zerodha Account","text":"<p>This section will take you through the step-wise instructions to log in, setup, and bind your broker into your AlgoBulls Account.</p>"},{"location":"broker/zerodha.html#i-before-you-start","title":"i. Before you Start","text":"<p>Keep the following information available before you start:</p> <p>1) Developer Credentials at https://kite.trade</p> <ul> <li> <p>EMail ID</p> </li> <li> <p>Password</p> </li> </ul> <p>2) Broking Account Credentials at https://kite.zerodha.com/</p> <ul> <li> <p>User ID</p> </li> <li> <p>Password</p> </li> <li> <p>PIN</p> </li> </ul>"},{"location":"broker/zerodha.html#ii-one-time-activity","title":"ii. One-Time Activity","text":"<p>This activity will help you to link your broking account to the AlgoBulls account via the oauth method.</p> <p>Note</p> <ul> <li>If you have done this activity once before, then you can directly skip to the Daily Activity section</li> </ul> <ul> <li>Visit https://kite.trade and click on Login.</li> </ul> <p> </p> <ul> <li>Enter your EMail ID and Password. Click the Login button.</li> </ul> <p> </p> <ul> <li>Click the Create new app button.</li> </ul> <p> </p> <ul> <li> <p>On the Create a new app page, fill the following fields:</p> <ul> <li>Type: Select Connect.</li> <li>App name: Give the app name. Example: AlgoBulls Login.</li> <li>Zerodha CLient ID: Give your Zerodha User ID.</li> <li>Redirect URL: Give the value https://127.0.0.1.</li> <li>Description: Give the description. Example: App for AlgoBulls Login.</li> </ul> </li> <li> <p>Click the Create button.</p> </li> </ul> <p> </p> <p>Note</p> <ul> <li>Make payment once redirected to the payment gateway and then continue the below steps.</li> <li>This API subscription has to be renewed periodically (monthly).</li> </ul> <ul> <li>Now click on the newly created app name.</li> </ul> <p> </p> <ul> <li>Copy the API key and save it separately for later use. Click on Show API secret and copy it too.</li> </ul> <p> </p> <ul> <li> <p>Use the API key and API secret to create a new Redirect URL in the following format: <pre><code>https://app.algobulls.com/loading?st=zerodha&amp;k=&lt;userapikey&gt;&amp;s=&lt;userapisecret&gt;\n</code></pre></p> <p>Example: If the API key is uS3r@piKey and the API secret is uS3r@pis3cr3t, then the redirect URL will be: <pre><code>https://app.algobulls.com/loading?st=zerodha&amp;k=uS3r@piKey&amp;s=uS3r@pis3cr3t\n</code></pre></p> </li> <li> <p>Paste the newly created Redirect URL in the <code>Redirect URL</code> field and click the <code>Save</code> button</p> </li> </ul> <p> </p>"},{"location":"broker/zerodha.html#iii-daily-activity-login","title":"iii. Daily Activity (Login)","text":"<p>Note</p> <ul> <li>Perform the following steps at the start of every trading day.</li> </ul> <ul> <li>Visit the AlgoBulls Login Page and click on <code>login with your Broking Account</code>.</li> </ul> <p> </p> <ul> <li> <p>Type the first few characters of your Broker Name.</p> </li> <li> <p>Select the <code>ZERODHA</code> broker.</p> </li> </ul> <p> </p> <p>Now paste your saved API key in the URL.</p> <p>Example: If the API key is uS3r@piKey and the URL is:</p> <pre><code>https://kite.zerodha.com/connect/login?api_key=pleaseenteryourapikey\n</code></pre> <p> </p> <p>then the new URL will be:</p> <pre><code>https://kite.zerodha.com/connect/login?api_key=uS3r@piKey\n</code></pre> <p> </p> <p>Press Enter after modifying the URL with your API key.</p> <p>Now provide data for the following fields:</p> <p>(1). User ID: The ID given to you by your broker.</p> <p>(2). Password: The password given to you by the broker.</p> <p>(3). Click <code>Login</code> button.</p> <p> </p> <p>(4). PIN: The PIN given to you by the broker.</p> <p>(5). Click <code>Continue</code> button.</p> <p> </p> <ul> <li>If the sign-in is successful, you will re-directed back to the AlgoBulls website.</li> </ul> <p>Note</p> <ul> <li> <p>If you are facing issues with login, try the following steps:</p> <ul> <li> <p>Open a new tab.</p> </li> <li> <p>Visit https://kite.zerodha.com/.</p> </li> <li> <p>Login with your credentials.</p> </li> <li> <p>Logout.</p> </li> <li> <p>Close the tab.</p> </li> <li> <p>Perform steps (1). to (5). again.</p> </li> </ul> </li> </ul>"},{"location":"broker/zerodha.html#3-support","title":"3. Support","text":"<p>For Help and Support, contact us on +91 80692 30300 or email us.</p>"},{"location":"member/index.html","title":"Phoenix","text":""},{"location":"member/index.html#algobulls","title":"AlgoBulls","text":"<p>Welcome to AlgoBulls, the AI-powered trading platform that unlocks new dimensions in algorithmic trading. Our mission is to boost your expertise in designing and executing personalised trading strategies using our cutting-edge product - Phoenix. </p>"},{"location":"member/index.html#introducing-phoenix-your-gateway-to-algorithmic-trading","title":"Introducing Phoenix: Your Gateway to Algorithmic Trading","text":"<p>Phoenix is your ultimate companion for crafting and executing trading strategies with the precision of a seasoned professional. Designed for both experienced traders and newcomers, this platform offers a range of powerful tools that empower you to make well-informed decisions and trade confidently in dynamic financial markets.</p> <p>When it comes to strategy development, Phoenix lets you dive into coding, backtesting, and deploying your trading strategies with remarkable ease. With an intuitive interface, you gain the ability to precisely set entry and exit points, handle multiple instruments, and take actions based on informed insights.</p> <p></p> <p>What sets Phoenix apart is its adaptable strategy format, suitable for various trading styles. Whether you're into backtesting, paper trading, or live trading, the same strategy code works for all three, making the experience straightforward.</p> <p>The library covers all scenarios (backtesting, paper trading, and live trading) during strategy execution or generating analytics. This unified approach ensures seamless transitions between these modes, eliminating the need for complex adjustments. Additionally, it simplifies the creation of progress logs, helping you track your journey and anticipate completion times. For real-time updates, live logs are available too, offering transparency and control over your trading endeavours.</p> <p></p> <p>Phoenix's strength lies in its seamless integration with real-time market data sources, historical data, and trading platforms. Its adaptable nature enables connection with various data providers and broker APIs, ensuring access to the information you need for well-informed trading decisions.</p>"},{"location":"member/index.html#powerful-stats-visual-analytics","title":"Powerful Stats &amp; Visual Analytics","text":"<p>In the pursuit of successful trading, Phoenix equips you with advanced visual tools for strategy analytics. These tools provide a deeper understanding of your strategies' performance, helping you manage risks and fine-tune your plans for optimal success. Visualisations facilitate data-driven decision-making, giving you clearer insights into the intricacies of your trading activities.</p>"},{"location":"member/index.html#multiple-platforms-to-use-phoenix","title":"Multiple Platforms to use Phoenix","text":"<p>To support our diverse community of users, we have the options of two dynamic platforms for our users to use Phoenix - pyalgotrading and Phoenix Web</p> <p>Explore our Python Package: Pyalgotrading{ .md-button }</p> <p>Dive into the amazing Features of our Web-App: Phoenix Web{ .md-button }</p>"},{"location":"member/index.html#join-the-community","title":"Join the Community","text":"<p>AlgoBulls is more than just a platform; it's a community. Connect, learn, and collaborate with traders and developers. Code your strategies or explore ours \u2013 AlgoBulls is where innovation meets trading expertise.</p> <p>By becoming part of the Phoenix community, you tap into a rich network of traders and developers. This community serves as a platform for collaboration, offering guidance, valuable insights, and collective refinement of trading strategies. Diverse perspectives help you approach trading challenges from multiple angles, fostering growth and improvement.</p> <p>Join us in this journey as AlgoBulls revolutionizes algorithmic trading!</p> <p>In essence, Phoenix is more than a product; it's your comprehensive guide to mastering algorithmic trading. With its user-friendly interface, diverse functionalities, and seamless integration, it's a valuable asset for traders of all levels. By simplifying strategy crafting, integration, execution, and analysis, Phoenix empowers you to navigate the trading world with confidence and precision.</p>"},{"location":"member/index.html#open-source-strategy-library","title":"Open Source Strategy Library","text":"<p>We maintain an open source GitHub repository, pyalgostrategypool containing fully functional algorithmic trading strategies. These strategies can be used for Backtesting, Paper Trading, or Live Trading across various brokers and exchanges. The same code works in all trading modes.</p> <p>Keep an eye on our GitHub repo</p> <p>Our team periodically updates the library to add more strategy Python codes</p> <p>For those new to algorithmic trading or Phoenix, exploring included example strategies is an excellent starting point. These strategies are pre-built scenarios showcasing different trading strategies and concepts. By studying and experimenting with these examples, you'll gain a deeper grasp of how Phoenix operates and how strategies are constructed.</p> <p>Here's what you can do with the example strategies:</p> <ul> <li>Analyze Structure: Study code structure, including strategy definition, condition setting, and action execution.</li> <li> <p>Modify and Experiment: Once comfortable with examples, customise them to your preferences. Adjust parameters, conditions, and actions to observe their impact on trading outcomes.</p> </li> <li> <p>Learn Strategies: Each example represents a different trading approach, like trend-following or mean-reversion. Studying these examples introduces you to various trading strategies and their underlying principles.</p> </li> </ul> <p>Remember, these example strategies lay the foundation for your learning journey. As you grow more familiar with the library, you can create and customise your own strategies based on your insights and preferences.</p> <p>To conclude, the installation process readies you to use Phoenix, while the documentation and example strategies empower you to explore the library's capabilities and apply them to real trading situations. Whether you're a beginner or a seasoned trader...</p>"},{"location":"member/index.html#limitations-of-phoenix","title":"Limitations of Phoenix","text":"<p>In the exciting world of algorithmic trading, Phoenix offers numerous benefits and considerations for traders and developers. Let's also acknowledge its limitations to help you make an informed decision.</p> <p> </p> <ol> <li> <p>Python Speed Limitations:  While versatile, Python isn't the fastest language for computation. This may pose challenges for complex strategies requiring extensive calculations. Our team is actively transitioning a major part of the codebase to Cython to enhance speed while retaining Python's simplicity. We're also exploring options like GPUs for the future.</p> </li> <li> <p>Cloud Cold-Start Speed Limitations: Each strategy runs on a dedicated virtual server in the cloud. While this ensures secure execution with dedicated resources, there's a short delay as the cloud fetches the resource before strategy execution begins. This minor delay is part of our ongoing optimization efforts.</p> </li> </ol> <p>Note</p> <p>Our team is working round the clock to make these limitations a thing of the past.</p>"},{"location":"member/index.html#references","title":"References","text":"<p>To unleash Phoenix's full potential, dive into its comprehensive documentation. This roadmap offers detailed insights into the product's features, functionalities, and capabilities. It's your go-to resource for harnessing the power of Phoenix effectively. The documentation includes:</p> <ul> <li>Code Examples: Real code snippets showcasing how to implement specific strategies, functions, and techniques using Phoenix.</li> <li>Python Cookbook for Algorithmic Trading: A Python Cookbook for Algorithmic Trading, explaining in-depth about strategy creation and execution from scratch using Python. Explore the technical content of the book on GitHub.</li> </ul>"},{"location":"member/brokerage-calculator.html","title":"Brokerage Calculator","text":""},{"location":"member/brokerage-calculator.html#1-introduction","title":"1. Introduction","text":"<p>A brokerage calculator is an AlgoBulls feature that displays the amount of brokerage to be paid for a trade. The brokerage calculator displays brokerage charges, duty costs, transaction fees, SEBI turnover fees, and securities transaction tax. </p> <p>Majority of traders underestimate the amount of brokerage they might pay for a trade, a brokerage calculator can help you view the brokerage amount paid to different brokers for each strategy. A brokerage calculator shows you a realistic estimate of your net income from each strategy.</p>"},{"location":"member/brokerage-calculator.html#2-brokerage-charges","title":"2. Brokerage Charges","text":"<p>Broker charges will differ depending on the fees charged by each broker. For example, 0.01% of each trade value or flat Rs.10 per trade for Equity.</p> <p>Government charges are levied by the government on each transaction which include STT, transaction charges, SEBI charges, stamp duty, etc.</p> <p>Note</p> <ul> <li>The below brokerage charges are subject to change by the broker. </li> </ul> Broker Name Equity Future MCX Options 5Paisa \u20b9 10 \u20b9 10 \u20b9 10 \u20b9 10 AC Agarwal 0.02% per trade 0.02% per trade 0.02% per trade \u20b9 10 AliceBlue \u20b915 per trade or 0.05% whichever is lower \u20b9 15 per trade or 0.05% whichever is lower \u20b9 15 per trade or 0.05% whichever is lower \u20b9 15 Angelbroking \u20b9 20 \u20b9 20 \u20b9 20 \u20b9 20 Arham 0.03% per trade 0.03% per trade 0.03% per trade 0.03% per trade Edelwiss \u20b9 10 \u20b9 10 \u20b9 10 \u20b9 10 Findoc 0.02% per trade 0.01% per trade 0.01% per trade \u20b9 5 Finvasia Zero Zero Zero Zero Hem Securities 0.03% \u20b9 20 \u20b9 20 \u20b9 20 IIFL 0.02% per trade 0.02% per trade 0.02% per trade \u20b9 15 Indira Securities 0.02% per trade 0.02% per trade 0.02% per trade \u20b9 10 Jainam Duck \u20b9 10 \u20b9 10 \u20b9 10 \u20b9 10 Kotak Securitues Zero Zero Zero Zero Master Trust \u20b9 20 \u20b9 20 \u20b9 20 \u20b9 20 Motilal Oswal 0.02% per trade 0.02% per trade 0.02% per trade \u20b9 15 Rmoney \u20b9 9 \u20b9 9 \u20b9 9 \u20b9 9 Rudra 0.01% per trade 0.01% per trade 0.01% per trade \u20b9 15 Sharekhan 0.02% per trade 0.02% per trade 0.02% per trade \u20b9 10 Zebu 0.02% per trade 0.02% per trade 0.02% per trade \u20b9 20 Zerodha \u20b9 20 \u20b9 20 \u20b9 20 \u20b9 20 Choice 0.02% 0.02% 0.02% 25 per lot"},{"location":"member/brokerage-calculator.html#3-government-charges","title":"3. Government Charges","text":"Type of Charges Segment/Exchange Flat % per trade Security Transaction Tax - Commodity Futures MCX 0.01 Security Transaction Tax Index - Equity/Index Futures NFO 0.01 Transaction Charges - Equity Intraday NSE 0.0035 Transaction Charges - Index Options NSE_IDX 0.053 SEBI Charges Index Options NSE_IDX 0.0001 Transaction Charges - Commodity Futures MCX 0.0026 Stamp Duty - Equity/Index Futures NFO 0.002 Stamp Duty - Index Options NSE_IDX 0.003 Stamp Duty - Equity Intraday NSE 0.003 SEBI Charges - Equity Intraday NSE 0.0001 SEBI Charges - Commodity Futures MCX 0.0001 SEBI Charges - Equity/Index Futures NFO 0.0001 Security Transaction Tax Index - Equity Intraday NSE 0.025 Stamp Duty - Commodity Futures MCX 0.002 Transaction Charges - Equity/Index Futures NFO 0.002 Security Transaction Tax - Index Options NSE_IDX 0.05"},{"location":"member/broking-details.html","title":"Broking Details","text":""},{"location":"member/broking-details.html#1-introduction","title":"1. Introduction","text":"<p>To begin algo trading with AlgoBulls, it is necessary to add your broker details and bind your broking account.</p>"},{"location":"member/broking-details.html#2-how-to-add-your-broking-account","title":"2. How to add your broking account?","text":"<p>To add a broker account, follow these steps:</p>"},{"location":"member/broking-details.html#i-oauth","title":"i. OAuth:","text":"<p>From the AlgoBulls sidebar navigation select Broking Details.</p> <p></p> <p>Click the Add Broker button.</p> <p></p> <p>Choose your broker, ensure there is an OAuth sign besides the broker name. Click on next.</p> <p></p> <p>You will be directed to the broker website, add your broker credentials.</p> <p></p> <p></p> <p>You will be redirected to the AlgoBulls website, login to access your AlgoBulls account.</p> <p></p>"},{"location":"member/broking-details.html#ii-non-auth","title":"ii. Non-Auth:","text":"<p>From the AlgoBulls sidebar navigation select Broking Details.</p> <p></p> <p>From the Add New Broker list select your broker.</p> <p></p> <p>Add your broking account credentials. Click on confirm.</p> <p></p> <p>Once confirmed the broker will be added to your account.</p> <p></p> <p>The Broker will now be added to your Broking Details page. If you have multiple broker accounts you can choose which one you would like to add as a primary account by switching the toggle button in the primary column.</p> <p></p>"},{"location":"member/broking-details.html#3-how-to-edit-or-remove-your-broking-account","title":"3. How to edit or remove your broking account?","text":"<p>If you wish to edit details click on Login/Edit option.</p> <p></p> <p>Edit the Broker Details and click on update. If you wish to remove the broker, click on X sign on the top right side of the screen.</p> <p></p> <p>You will get a confirmation once the details have been updated successfully.</p> <p></p> <p>If you haven't added your broker yet, add now.</p>"},{"location":"member/choose-strategy.html","title":"Odyssey","text":""},{"location":"member/choose-strategy.html#1-introduction","title":"1. Introduction","text":"<p>Explore a wide range of advanced, AI-driven strategies developed with cutting-edge technology. Odyssey offers over 150 sophisticated algo strategies crafted by industry-leading experts. These strategies combine complex formulas and mathematical models to provide superior speed and accuracy compared to manual trading.</p> <ul> <li>Odyssey is divided into three categories: Retail, Premium, and HNI. You can   select your preferred strategy category from the dropdown menu.</li> </ul> <p></p>"},{"location":"member/choose-strategy.html#2-retail-strategies","title":"2. Retail Strategies","text":"<p>Retail strategies include a curated selection of trading algos suitable for all experience levels, from novice to expert. This category encompasses strategies for equity, futures, and commodities cash segments.</p> <ul> <li>Filter strategies by name or strategy code.</li> <li>Search for strategies using the sort or duration filter.</li> <li>Add strategies to your favourites list.</li> <li>To add a strategy to your My Portfolio page, click on Execute.</li> <li>Click Know More to obtain additional information about any strategy.</li> </ul> <p></p>"},{"location":"member/choose-strategy.html#3-premium-strategies","title":"3. Premium Strategies","text":"<p>Our Premium Strategies feature powerful and intelligent trading algos designed for index options strategies. These advanced strategies leverage state-of-the-art technology to optimise trading performance.</p> <ul> <li>Filter strategies by name or strategy code.</li> <li>Search for strategies using the sort or duration filter.</li> <li>Add strategies to your favourites list.</li> <li>To add a strategy to your My Portfolio page, click on Execute.</li> <li>Click Know More to discover more about any strategy.</li> </ul> <p></p>"},{"location":"member/choose-strategy.html#4-hni-strategies","title":"4. HNI Strategies","text":"<p>HNI Strategies are AI-driven trading algorithms tailored to the needs and risk appetites of high-net-worth individuals (HNI). These strategies are designed for personalised portfolio management and optimisation.</p> <ul> <li>AI-Driven Trading Algorithms: Utilise advanced algorithms for enhanced trading.</li> <li>Personalised Portfolio Management: Customise strategies based on individual needs.</li> <li>Risk Assessment: Evaluate risk tolerance using historical data, investment goals, and market conditions.</li> <li> <p>Investment Strategy: Develop strategies aligned with your risk profile, financial goals, and market opportunities.</p> </li> <li> <p>Filter strategies by name or strategy code.</p> </li> <li>Search for strategies using the sort or duration filter.</li> <li>Add strategies to your favourites list.</li> <li>To add a strategy to your My Portfolio page, click on Execute.</li> <li>Click Know More to access detailed information, including parameters and backtesting reports, to evaluate strategy performance.</li> </ul> <p></p>"},{"location":"member/choose-strategy.html#5-explore-strategies","title":"5. Explore Strategies","text":"<p>You can find strategies using the following options:</p>"},{"location":"member/choose-strategy.html#i-search-bar","title":"i. Search Bar","text":"<ul> <li>Use the search bar to type in the strategy name or strategy code to quickly locate specific strategies.</li> </ul>"},{"location":"member/choose-strategy.html#ii-filters","title":"ii. Filters","text":"<ul> <li>Filter your view based on  brokers, exchanges, segments, modes, candle types, candle sizes, and tags are also available. Click Apply Filters to see the results.</li> </ul>"},{"location":"member/choose-strategy.html#iii-favourites","title":"iii. Favourites","text":"<ul> <li>Activate the Favourite Mode to view strategies marked as Favourite (\u2606).</li> </ul>"},{"location":"member/choose-strategy.html#iv-new-strategies","title":"iv. New Strategies","text":"<ul> <li>Activate the New Strategies Mode to view strategies which are newly added to Odyssey.</li> </ul>"},{"location":"member/choose-strategy.html#v-sort","title":"v. Sort","text":"<ul> <li> <p>Sort strategies by clicking on the heading of each column:</p> <ul> <li>Strategy</li> <li>Instruments</li> </ul> <p></p> </li> </ul>"},{"location":"member/choose-strategy.html#vi-duration","title":"vi. Duration","text":"<ul> <li>Search for strategies added to the marketplace in the last 3 days, 14 days, 30 days, 6 months, 1 Year, 2 Year, or All Time. Click Apply Duration to save changes.</li> </ul>"},{"location":"member/choose-strategy.html#vii-pagination","title":"vii. Pagination","text":"<ul> <li>Navigate between pages using the &lt; and &gt; buttons. You can also choose to view 4, 8, or 12 strategies per page.</li> </ul>"},{"location":"member/choose-strategy.html#viii-share","title":"viii. Share","text":"<ul> <li>Share your favourite strategy with friends and family by clicking the share icon in the strategy column.</li> </ul>"},{"location":"member/choose-strategy.html#ix-know-more","title":"ix. Know More","text":"<ul> <li>Click the Know More button below the Execute button to discover additional details about the strategy.</li> </ul>"},{"location":"member/dashboard.html","title":"Dashboard","text":""},{"location":"member/dashboard.html#1-introduction","title":"1. Introduction","text":"<p>The AlgoBulls Dashboard provides an overview of your account and trades.</p> <p> </p>"},{"location":"member/dashboard.html#2-algobulls-money","title":"2. AlgoBulls Money","text":"<p>Your current balance is displayed on the AlgoBulls Dashboard. To add money to your AlgoBulls account, click the \"Add Money\" button on the dashboard. A pop-up will open for payment gateway to complete your payment.</p>"},{"location":"member/dashboard.html#3-the-action-bar","title":"3. The Action Bar","text":"<p>The action bar shows your AlgoBulls funds, subscription plan status, broker account information, and portfolio strategy. From the action bar, you can also add funds, subscribe to a plan, connect another broker account, and add more strategies to your portfolio.</p> <p></p>"},{"location":"member/dashboard.html#4-strategy-analytics","title":"4. Strategy Analytics","text":"<p>In this section, you can view overall trading volume, profit and loss, and your current AlgoBulls balance. The left side of the page displays data in a graphical format, while the right side provides strategy details such as strategy name, total transactions, volume, and P&amp;L.</p> <p> </p> <p>You can filter your view by selecting the following options:</p> <ul> <li>Today: Trades executed today.</li> <li>This week: Trades executed this week.</li> <li>This month: Trades executed this month.</li> <li>This year: Trades executed this year.</li> <li>Custom Range: Use the date range option to specify a start and end date for your search.</li> </ul> <p></p>"},{"location":"member/dashboard.html#5-fields","title":"5. Fields","text":"<p>The Dashboard fields include:</p> <ul> <li>Strategy Name: Displays the name and code of the strategy.</li> <li>Total Txns: Shows the total number of transactions for that strategy.</li> <li>Volume (\u20b9): Indicates the total volume in INR.</li> <li>P&amp;L (\u20b9): Displays the total profit and loss.</li> </ul> <p> </p>"},{"location":"member/dashboard.html#6-the-toolbar","title":"6. The Toolbar","text":"<p>The Dashboard toolbar includes options for refresh, density, settings, and full screen mode.</p> <p></p> <p>Refresh: Click refresh if you do not see a recent entry in the table.</p> <p></p> <p>Settings: Use this option to select which columns you want to view.</p> <p></p> <p>Full Screen: View your current tab in full screen mode. To exit full screen, click the icon again or press F11 on most browsers and operating systems.</p> <p></p>"},{"location":"member/faq.html","title":"Frequently Asked Questions","text":""},{"location":"member/faq.html#1-general","title":"1. General","text":""},{"location":"member/faq.html#i-what-is-algobulls-how-does-algobulls-work","title":"i. What is AlgoBulls? How does AlgoBulls work?","text":"<p>AlgoBulls is a cutting-edge trading platform that offers 100% automated trading algorithms. It allows users to deploy multiple trading strategies for various asset classes such as Equity, Commodities, Futures &amp; Options, and Currency across multiple exchanges like NSE, BSE, and MCX. Clients can choose which algorithmic strategies they want to follow and engage in auto trading, or they can have their customised trading strategies developed as algorithms and deployed in live markets via the AlgoBulls platform. The AlgoBulls platform supports multiple brokers, and clients can integrate their broker if it is not already listed.</p>"},{"location":"member/faq.html#ii-do-you-need-any-technical-knowledge-or-can-anyone-start","title":"ii. Do you need any technical knowledge or can anyone start?","text":"<p>Absolutely not! Our automated trading platform connects with your trading account, and expert algorithmic strategies handle all the trading and risk management for you. No prior experience in trading or programming is required.</p>"},{"location":"member/faq.html#iii-does-it-work-in-a-bearish-market","title":"iii. Does it work in a bearish market?","text":"<p>Yes, AlgoBulls utilises multiple trading strategies designed to profit during a falling market (bear market) through the use of short selling or inverse positions.</p>"},{"location":"member/faq.html#iv-how-much-capital-is-necessary-for-trading","title":"iv. How much capital is necessary for trading?","text":"<p>Each method provides information on the minimum capital required for that specific stock. However, the required capital depends on two factors: the quantity you wish to trade and the leverage provided by your broker for that specific stock.</p>"},{"location":"member/faq.html#v-what-are-the-risk-to-reward-ratio-and-accuracy-rates","title":"v. What are the risk-to-reward ratio and accuracy rates?","text":"<p>We provide backtesting data for all our strategies on the Odyssey platform so you can evaluate each strategy's performance. The summary section contains information on the number of trades, profit, losses, hit ratio, and other relevant factors.</p>"},{"location":"member/faq.html#2-registration-login","title":"2. Registration &amp; Login","text":""},{"location":"member/faq.html#i-how-can-i-register","title":"i. How can I register?","text":"<p>You can register with AlgoBulls in 3 simple steps:</p> <p>Step 1: Profile: Add your Name, Email &amp; Phone Number. Click on 'Get OTP'.</p> <p>Step 2: Credentials: Add the OTP and other credentials such as password.</p> <p>Step 3: Status: You can view the status of your registration here.</p> <p>You can also register with AlgoBulls by clicking on the Login with Google option.</p>"},{"location":"member/faq.html#ii-is-there-an-algobulls-app-that-i-can-use","title":"ii. Is there an AlgoBulls app that I can use?","text":"<p>Yes, you can download the AlgoBulls fast, secure, and easy-to-use app for Android phones. Download now.</p>"},{"location":"member/faq.html#iii-is-there-any-registration-fee-to-join-algobulls","title":"iii. Is there any registration fee to join AlgoBulls?","text":"<p>No, there is no additional fee to join AlgoBulls. You can join AlgoBulls for free. Join now!</p>"},{"location":"member/faq.html#iv-how-can-i-login-with-my-broking-account","title":"iv. How can I login with my broking account?","text":"<p>You can log in with your broking account. It requires a one-time setup where you will need to link your existing or new broker. Once this process is complete, you can log in using your broking account daily. Login with your broker.</p>"},{"location":"member/faq.html#v-how-can-i-log-in-using-google","title":"v. How can I log in using Google?","text":"<p>Use your Google account to log in with the Login with Google option.</p>"},{"location":"member/faq.html#vi-what-is-login-with-otp","title":"vi. What is Login with OTP?","text":"<p>You can select the Login with OTP option. Enter your phone number, and an OTP will be sent to your registered mobile number. Login with OTP now.</p>"},{"location":"member/faq.html#vii-i-have-forgotten-my-password-how-can-i-log-in-now","title":"vii. I have forgotten my password. How can I log in now?","text":"<p>If you have forgotten your password, you can reset it here.</p>"},{"location":"member/faq.html#3-broker","title":"3. Broker","text":""},{"location":"member/faq.html#i-do-i-have-to-leave-my-existing-broker-to-join-algobulls","title":"i. Do I have to leave my existing broker to join AlgoBulls?","text":"<p>No, the AlgoBulls system should be viewed as a diversification investment. The golden rule for investing is to never put all your money into one (investment) basket. Only a portion of your investment capital should be used with any investment strategy. So, you can keep the majority of your capital with your advisor and broker and have the AlgoBulls platform trade a portion of your capital with the brokerage firm that supports our system. We support multiple brokers. To add or view our broker list, click here.</p>"},{"location":"member/faq.html#ii-how-can-i-add-my-existing-broker-to-algobulls","title":"ii. How can I add my existing broker to AlgoBulls?","text":"<p>To begin trading, you need to add your broker details and broking account. Follow these 3 simple steps:</p> <p>Step 1: From the AlgoBulls sidebar navigation, select Broking Details in Live Mode and click on the Add Broker button.</p> <p>Step 2: Select your broker and fill in the necessary information. Click on Confirm.</p> <p>Step 3: Once confirmed, the broker will be added to your account. To visit the broker details page, click here.</p>"},{"location":"member/faq.html#iii-how-do-i-edit-or-remove-a-broker","title":"iii. How do I edit or remove a broker?","text":"<p>You can remove and edit broker information from the broking details page. For more information on adding, removing, and editing broker details, click here.</p>"},{"location":"member/faq.html#iv-are-there-additional-charges-to-add-a-broker","title":"iv. Are there additional charges to add a broker?","text":"<p>No, there are no additional charges to add a broker to your AlgoBulls account. You can add a new or existing broker supported by the AlgoBulls platform for free.</p>"},{"location":"member/faq.html#v-which-brokers-are-supported-on-algobulls","title":"v. Which brokers are supported on AlgoBulls?","text":"<p>AlgoBulls supports multiple brokers. You can check the broker list here.</p>"},{"location":"member/faq.html#vi-why-is-my-broker-not-in-the-algobulls-integrated-broker-list","title":"vi. Why is my broker not in the AlgoBulls integrated broker list?","text":"<p>We are continuously working to integrate additional broking houses in India with our platform. It is possible that your broker is not on our list of brokers. If you are interested in running the algo strategies on a broker that is not on our broker list, please contact us at support@algobulls.com. You can also choose to add a new broker that is integrated into our system.</p> <p>Note:</p> <p>You can see the list of brokers in Live Mode only. Ensure you are in Live Mode before clicking the link above.</p>"},{"location":"member/faq.html#4-plans-wallet","title":"4. Plans &amp; Wallet","text":""},{"location":"member/faq.html#i-how-can-i-add-money-to-my-algobulls-wallet","title":"i. How can I add money to my AlgoBulls wallet?","text":"<p>After adding your broker to AlgoBulls, you can add money to your AlgoBulls account and subscribe to a package of your choice from the Plans &amp; Wallets section in the sidebar navigation.</p> <p>Step 1: In the Plans &amp; Wallets section, enter the amount and click on + Add Money.</p> <p>Step 2: Enter your phone number and email address, then click on Proceed.</p> <p>Step 3: Choose your preferred payment method. Once the payment is successful, the balance will be added to your AlgoBulls account.</p> <p>Running out of balance? Add money now!</p> <p>Learn more about the Plans &amp; Wallet section.</p>"},{"location":"member/faq.html#ii-can-i-trade-without-subscribing-to-a-plan","title":"ii. Can I trade without subscribing to a plan?","text":"<p>Trading without a subscription is possible; however, you will be charged for each service used on a pay-as-you-go basis. It is essential to have sufficient AlgoBulls money in your account. Once the balance is exhausted, the strategy will stop. Learn more about Plans &amp; Wallets and subscribe to a plan now.</p>"},{"location":"member/faq.html#iii-how-do-i-subscribe-to-a-plan","title":"iii. How do I subscribe to a plan?","text":"<p>To subscribe to a plan, you can choose a package of your choice from the Plans &amp; Wallets section. These plans are active for a specific duration, and all services included in the package will not incur additional charges during that period. Learn more about Plans &amp; Wallets.</p> <p>AlgoBulls also offers a range of free plans. Subscribe to a Free Plan now!</p>"},{"location":"member/faq.html#iv-what-if-i-want-to-try-various-services-without-a-plan","title":"iv. What if I want to try various services without a plan?","text":"<p>On AlgoBulls, you are charged for various services you use, such as backtesting, paper trading, and live trading. If you have not subscribed to a plan, the charges will be deducted from your AlgoBulls wallet. You can avoid incurring extra charges by subscribing to AlgoBulls plans. To keep track of usage costs, always check your Fund Book in the Live Reports section.</p>"},{"location":"member/faq.html#v-are-there-any-free-plans-on-algobulls","title":"v. Are there any free plans on AlgoBulls?","text":"<p>Yes, AlgoBulls offers various free plans. Subscribe to a Free Plan now.</p>"},{"location":"member/faq.html#5-odyssey","title":"5. Odyssey","text":""},{"location":"member/faq.html#i-what-is-retail-strategies","title":"i. What is Retail Strategies?","text":"<p>The Retail Strategies includes carefully chosen trading algos ideal for all types of traders. It enables retail investors to search, explore, and deploy trading algos in live markets. Learn more about Retail Strategies.</p>"},{"location":"member/faq.html#v-how-can-i-buy-or-subscribe-to-trading-algos","title":"v. How can I buy or subscribe to trading algos?","text":"<p>You can buy or subscribe to trading algos from the Odyssey. Each trading algo has a subscription fee that you can pay to deploy the strategy. Explore and subscribe now!</p>"},{"location":"member/faq.html#vi-how-can-i-search-for-a-trading-strategy","title":"vi. How can I search for a trading strategy?","text":"<p>You can search for trading strategies on the Odyssey by applying various filters such as asset class, exchange, risk appetite, and performance. Explore strategies</p>"},{"location":"member/faq.html#vii-what-is-a-watchlist","title":"vii. What is a watchlist?","text":"<p>The Watchlist feature allows you to keep track of your preferred trading algos and strategies. Add strategies to your watchlist to monitor their performance before subscribing. Create your watchlist</p> <p>For more detailed information, visit our support page.</p>"},{"location":"member/fixed-income.html","title":"Fixed Income","text":""},{"location":"member/fixed-income.html#1-introduction","title":"1. Introduction","text":"<p>Fixed income is an investment that focuses on capital and income preservation. It frequently includes investments such as government and corporate bonds/NSDs/MLDs. Fixed income can provide a consistent stream of income while posing less risk than stocks. If you are just entering the world of investment, bonds, NCDs &amp; MLDs can be a great place to begin! So let\u2019s understand what are Bonds, NCDs &amp; MLDs and how investing in these securities can be beneficial for you?</p> <p>BONDS: A bond is a financial instrument that allows individuals to lend money to institutions such as governments or businesses. The institution will pay a set interest rate on the investment for the duration of the bond, then return the original amount at the end of the loan's term. Bond investing provides a predictable income stream, and in many cases, bonds pay interest multiple times in a year. Since the investor receives the entire principal amount if the bond is held until maturity, these are regarded as the best way to protect one's capital.</p> <p>NCDs: NCDs are Non-convertible Debentures. Companies use non-convertible debentures as a tool to raise long-term capital through a public issue. When compared to convertible debentures, lenders typically receive a higher rate of return to compensate for the disadvantage of non-convertibility. NCDs also provide the owner with a number of additional advantages, including increased liquidity due to their listing on the stock market, source tax exemptions, and safety due to the fact that only companies with strong credit ratings are permitted to issue NCDs in accordance with RBI-established guidelines.</p> <p>MLDs: MLDs are Market Linked Debentures. MLDs are non-convertible debentures with variable returns that are correlated to the market. The performance of the underlying index affects the return from a Market Linked Debenture.</p> <p>Now let\u2019s understand how you can begin trading on the AlgoBulls Fixed Income marketplace.</p>"},{"location":"member/fixed-income.html#2-an-overview","title":"2. An Overview","text":"<p>To begin using the Fixed Income marketplace, download the AlgoBulls App or register on www.algobulls.com</p> <p>After signing in, go to the Fixed Income section in the sidebar navigation. You will see the following fields:</p> <p>i. Marketplace: Find all the bonds, NCD &amp; MLD cards in this marketplace. You can Buy or Sell these securities, view Security Details, use the Investment Calculator &amp; view the Payment Cycle.</p> <p></p> <p>ii. Fixed Income Card: Get complete details, such as the Bond &amp; NCD name, price, rating, maturity date, yield per year % and more here.</p> <p></p> <p>iii. Search Bar: To find a specific Security, enter the name or ISIN number into the search bar.</p> <p>iv. Filters, Sort &amp; Duration: You can filter your search, sort the categories, or look for a Security based on the duration and multiple other options.</p> <p></p> <p>v. Viewing Mode: View Fixed income securities in Compact, Regular or List Mode.</p> <p></p>"},{"location":"member/fixed-income.html#3-exploring-the-fixed-income-card","title":"3. Exploring the Fixed Income Card","text":"<p>Get complete details, such as the Bond name, price, rating, maturity date, yield per year % and more here. Click on the bond card to view the expanded version.</p> <p>Click on know more to get detailed information of the bond.</p> <ul> <li> <p>Details</p> </li> <li> <p>Investment Calculator</p> </li> <li> <p>Payment Cycle</p> </li> </ul> <p>i. Fixed Income Summary:  The Issuer name, Bond/NCD/MLD name, Price, Rating, Yield, Credit Outlook, IP Frequency, Maturity Date, Allotment Date, Next Interest Payment Date and Security is displayed here.</p> <p></p> <p>ii. Security Details: Get the complete details of the security such as the issuer details, Coupon Rate, Ownership, ISIN, Credit Agency Details, Debenture Trustee, Taxable or not, Secured or not and more in the Details section.</p> <p></p> <p>iii. Investment Calculator:  Check the market price, add your quantity and calculate the total investment using the Investment Calculator. You can check the total investment and payout along with the maturity date from here. Click on Buy Now to buy the bond.</p> <p></p> <p>iv. Payment Cycle:  This section will display the payment cycle of the security, this includes the price considered, interest rate and principal + interest.</p> <p></p>"},{"location":"member/fixed-income.html#4-orders","title":"4. Orders","text":"<p>In the orders section you can sell any bond, search for your orders or get the complete order details.</p> <p>i. Sell Any Security: To sell a security you will need details such as the ISIN, Settlement Date, Quantity, Settlement Amount or Principal Amount &amp; Accrued Interest. Before you sell a security, ensure your KYC is completed.</p> <p>ii. Search Bar: Search any order using the search bar.</p> <p>iii. Filters &amp; Sort: Filter your orders by Issuer, IP Frequency, Taxation Criteria, Type &amp; Status. You can Sort your orders by applying the Yield or Safety options.</p> <p>iv. All Orders: Check all your orders in this section. This includes the Issuer &amp; security name, Settlement amount, Maturity Date, Status, Deal Sheet and more.</p> <p></p>"},{"location":"member/fixed-income.html#5-portfolio","title":"5. Portfolio","text":"<p>This is your Fixed Income portfolio you can sell any security, search or filter the securities and view the complete portfolio details.</p> <p>i. Sell Any Security: To sell a security you will need details such as the ISIN, Settlement Date, Quantity, Settlement Amount or Principal Amount &amp; Accrued Interest. Before you sell a security, ensure your KYC is completed.</p> <p>ii. Search Bar: Search any order using the search bar.</p> <p>iii. Filters &amp; Sort: Filter your orders by Issuer, IP Frequency, Taxation Criteria, Type &amp; Status. You can sort your orders by applying the Yield or Safety options.</p> <p>iv. Portfolio: This is your fixed income portfolio section where the security details, purchase date, Interest Payment Date, Total Cost Price, Total Current Value and Action are displayed.</p> <p></p> <p>vii. Manage Accounts: Manage your Fixed Income details such as add your Bank Account, Demat Details &amp; KYC Information.</p>"},{"location":"member/fixed-income.html#6-how-to-buy-a-security","title":"6. How To Buy a security?","text":"<p>It is crucial to update your KYC, bank information, and demat account information in the Manage Account section in the sidebar navigation before you buy a security.</p> <p>After updating the above information, from the Marketplace, select a security that you would like to invest in and click on Buy.</p> <p>You can now add the quantity in the Investment Calculator and click on Buy now.</p> <p>You will be redirected to the Plans &amp; Wallet section\u2019s checkout page, where you can pay the amount. Ensure that you check all the details before making a payment. Click on the total amount payable, you will be taken to a payment gateway page where you can enter your information and complete the payment.</p>"},{"location":"member/fixed-income.html#7-how-to-sell-a-security","title":"7. How to Sell a Security?","text":"<p>It is crucial to update your KYC, bank information, and demat account information in the Manage Account section in the sidebar navigation before you sell a security.</p> <p>After updating the above information, from the Marketplace, select a security that you would like to invest in and click on Sell.</p> <p>Add details such as ISIN, Settlement Date, Quantity.</p> <p>Select from the following options: Principal Amount and Accrued Interest or Settlement Amount.</p> <p>If you wish to choose the Principal amount, add the settlement amount. If you wish to add the Accrued or Settlement amount, add the principal amount and accrued interest details.</p> <p>Click Next to review it. Once submitted, the security will be sold successfully.</p> <p>We hope this section has helped you understand the Fixed Income section on AlgoBulls. If you have further questions related to this, please feel free to contact our customer service team on support@algobulls.com</p>"},{"location":"member/issuer-profile.html","title":"Issuer Profile","text":""},{"location":"member/issuer-profile.html#1-what-is-an-issuer","title":"1. What is an Issuer?","text":"<p>A legal entity that manages, registers, and sells securities to support its operations financially is an Issuer. There can be many types of Issuers - Corporations, Domestic or Foreign Governments and Investment trusts. Issuers develop securities such as Bonds, Debentures, G-Secs &amp; NCDs. Issuers are legally responsible for reporting financial conditions, material developments, and other operational activities required by the jurisdiction's regulations.</p> <p>The AlgoBulls Issuer Profile gives you a detailed view of the issuer\u2019s name, bonds available, transactions, average yield and more. Check the Issuer profile here.</p>"},{"location":"member/issuer-profile.html#2-issuer-profile-summary","title":"2. Issuer Profile Summary","text":""},{"location":"member/issuer-profile.html#i-name","title":"i. Name","text":"<p>This section displays the Issuer Name and Logo.</p>"},{"location":"member/issuer-profile.html#ii-sector","title":"ii. Sector","text":"<p>You can view the sector the Issuer belongs to here.</p>"},{"location":"member/issuer-profile.html#iii-bio","title":"iii. Bio","text":"<p>A detailed summary of the Issuer.</p> <p></p>"},{"location":"member/issuer-profile.html#iv-number-of-bonds","title":"iv. Number of Bonds","text":"<p>View the number of Bonds available from the Issuer.</p>"},{"location":"member/issuer-profile.html#v-number-of-transactions","title":"v. Number of Transactions","text":"<p>The total number of transactions made on the bonds available from the Issuer.</p>"},{"location":"member/issuer-profile.html#vi-views","title":"vi .Views","text":"<p>Number of people who have viewed the Issuer profile.</p>"},{"location":"member/issuer-profile.html#vii-average-yield","title":"vii. Average Yield","text":"<p>The average yield provided by the Issuer so far.</p>"},{"location":"member/issuer-profile.html#viii-search-bar","title":"viii. Search Bar","text":"<p>This search bar help you search for bonds that are developed by the issuer.</p> <p></p>"},{"location":"member/issuer-profile.html#ix-filter","title":"ix. Filter","text":"<p>You can filter the bonds as per the yield, price, security, rating, IP Frequency and Taxation Criteria. You can also add the bond as favourite by using the \u2018Favourite Mode\u2019 toggle button. Click on apply filters to view the results.</p> <p></p>"},{"location":"member/issuer-profile.html#x-sort","title":"x. Sort","text":"<p>Sort the Bonds as per the Yield, Safety and Tenure. Click on Apply Sort to view the results.</p> <p></p>"},{"location":"member/issuer-profile.html#xi-duration","title":"xi. Duration","text":"<p>You can also filter or search for bonds as per the duration period. Currently, the duration periods available are Any, 6 months, 1-5 years and 5+ years. Click on Apply Duration to view the results.</p> <p></p>"},{"location":"member/issuer-profile.html#3-the-issuer-bond-cards","title":"3. The Issuer Bond Cards","text":"<p>The Bond card includes the Issuer\u2019s name, Security Name, Yield Per Year, Security and Taxation criteria. You can also view the price, rating, maturity date, Credit Outlook, IP Frequency and Allotment Date. You may also Buy or Sell the bond from the Bonds card. Click on the card to view more details.</p> <p></p>"},{"location":"member/issuer-profile.html#i-pagination","title":"i. Pagination","text":"<p>You can view the bond cards in various page view modes, such as 4 Page/8 Page/12 Page. You can also view the Bond cards in the Regular Mode or List Mode.</p> <p></p>"},{"location":"member/live-trading.html","title":"Live Trading and Virtual Trading","text":""},{"location":"member/live-trading.html#1-introduction","title":"1. Introduction","text":"<p>My Portfolio page displays all the strategies that have been added from Odyssey and Phoenix. You can use these strategies to Backtest, Papertrade, or Livetrade on your desired conditions.</p>"},{"location":"member/live-trading.html#2-how-to-begin-live-trading","title":"2. How to Begin Live Trading?","text":"<p>Begin Live Trading on AlgoBulls with these simple steps:</p> <p>Step 1: Select a strategy from the Odyssey or Phoenix page</p> <ul> <li> <p>For Odyssey click on execute button. The strategy will be added to the portfolio, and you will be redirected to the My Portfolio page.</p> </li> <li> <p>For Phoenix, click on Add to My Portfolio button inside the strategy below the code editor to add this strategy to My portfolio page.</p> </li> </ul> <p>Step 2: To start the chosen strategy, click the start button in the Action field.</p> <p></p> <p>Step 3:</p> <p>i. Select Live Trading from the modal.</p> <p>ii. Select a broker</p> <p>iii Add the start and end time, and specify the Quantity/Lots.</p> <p></p> <p>Step 4: Use the toggle button to activate the P&amp;L Tracker. Add the desired profit and risk appetite here. Click on Save &amp; Start.</p> <p></p> <p>Note</p> <ul> <li> <p>Please note that you will be charged for using these services.</p> </li> <li> <p>To waive these charges, you can purchase a package with AlgoBulls.</p> </li> </ul> <p>Warning</p> <p>Even after completing all the preceding steps, trading may not begin for the following reasons:</p> <ul> <li>Insufficient funds in your broker account.</li> <li>A particular segment in your broker account has not been activated (this can happen with new accounts; some brokers activate this by default, while others may take 24 hours or more).</li> <li>Due to market volatility, your broker may stop accepting certain order requests on some scripts or stocks. If any such order type with such script/stock strategy is currently running in your AlgoBulls account, new orders for the same won't be displayed.</li> <li>Certain order types may be incompatible with certain brokers.</li> <li>Your linked broker account must allow you to execute those orders. Not all strategies are accepted/allowed by every broker due to permission issues.</li> <li>The AlgoBulls platform has no control over the brokerage charges imposed by your broker once your trading begins. Please review all charges on the broker's end before proceeding.</li> </ul> <p>Visit algobulls.com.</p> <ul> <li> <p>Strategies may stop due to various reasons such as market closure, P&amp;L achieved, or if there are any errors. To check errors, in the Progress field click on the view details option.</p> <ul> <li>For Odyssey, logs and orders timeline will appear.</li> </ul> <p></p> <ul> <li>For Phoenix, logs and orders timeline will appear along with a button to show detailed analytics.</li> </ul> <p></p> </li> </ul>"},{"location":"member/live-trading.html#3-how-to-begin-virtual-trading","title":"3. How to Begin Virtual Trading?","text":"<ul> <li>Step 1:   To start the chosen strategy, click the start button in the Action field.</li> </ul> <ul> <li>Step 2:   i. Select Back Testing or Paper Trading from the modal.</li> </ul> <ul> <li> <p>Step 3:</p> <ul> <li>i. Click on Customisations and add dates for Back Testing.</li> </ul> </li> </ul> <p></p> <pre><code>* ii. Click on Customisations and add time for Paper Trading.\n</code></pre> <p></p> <ul> <li>Step 4:   Use the toggle button to activate the P&amp;L Tracker. Add the desired profit and risk appetite here. Click on Save &amp; Start.</li> </ul> <p></p>"},{"location":"member/live-trading.html#4-summary-bar","title":"4. Summary Bar","text":"<p>The Summary Bar in the portfolio section includes the following:</p> <ul> <li>Odyssey Strategy: Number of strategies from the Odyssey in your portfolio.</li> <li>Tweak Strategy: Number of strategies that have been tweaked by you.</li> <li>Custom Strategy: Number of custom strategies built by the AlgoBulls developer team for you.</li> <li>Total Running Strategies: Number of strategies currently active in your portfolio (during market hours).</li> <li>Today's P&amp;L: The total P&amp;L value.   </li> </ul>"},{"location":"member/live-trading.html#5-fields","title":"5. Fields","text":"<p>The My Portfolio section includes the following fields:</p> <ul> <li>Mode: Displays the strategy mode: LT (Live Trading), BT (Back Testing), or PT (Paper Trading).</li> <li>Strategy: Displays the strategy name and code.</li> <li>Instrument(s): Includes the instruments on which the strategy is being run.</li> <li>Tag: A user-defined tag for the strategy, allowing users to categorize different strategies.</li> <li> <p>Live Reports: Displays P&amp;L and Trade Volume, with redirect links to view your results in the respective P&amp;L Book and Trade Book.   </p> </li> <li> <p>Config: View parameters and other configuration settings here. The strategy configuration field includes instrument and strategy settings, such as general settings, strategy parameters, resume, exit, and miscellaneous options.   </p> </li> <li> <p>Action: The Action field allows you to start or stop a strategy. To execute a strategy, click on start. You can choose multiple brokers and run the strategies simultaneously.   </p> </li> </ul>"},{"location":"member/live-trading.html#6-toolbar","title":"6. Toolbar","text":"<p>The Dashboard toolbar includes the refresh, density, settings, and full-screen tools. </p> <ul> <li> <p>Refresh: If you can't see a recent entry in the table, click Refresh to check again.   </p> </li> <li> <p>Settings: Select the columns you want to view using this settings option.   </p> </li> <li> <p>Full Screen: Use this option to view your current tab in full-screen mode. To return to normal viewing, click the icon again or press F11 on most browsers and operating systems.   </p> </li> </ul>"},{"location":"member/my_plans.html","title":"My Plans","text":""},{"location":"member/my_plans.html#1-overview-of-the-plans-page","title":"1. Overview of the Plans Page","text":"<p>On this page, you can view all your purchased plans. This includes detailed information about both active and expired plans. The page is designed to provide you with a comprehensive overview of your subscriptions, making it easy to manage and review your plan history.</p>"},{"location":"member/my_plans.html#2-active-plans","title":"2. Active Plans","text":"<p>Under the \"Active Plans\" section, you'll find a list of all currently active subscriptions. Each plan entry provides essential details such as the plan name, purchased on, Expires on, and other specific features or benefits included inside Description section. This allows you to easily track the status of your ongoing plans and ensure you are making the most of your subscription benefits.</p> <p></p>"},{"location":"member/my_plans.html#3-expired-plans","title":"3. Expired Plans","text":"<p>The \"Expired Plans\" section contains information about plans that have concluded. This includes the same level of detail as active plans, helping you keep a record of your past subscriptions. This section is useful for reviewing your subscription history and understanding what services you previously had access to. How to Manage Your Plans</p> <p></p>"},{"location":"member/my_plans.html#4-how-to-add-money","title":"4. How to Add money?","text":"<p>To add money to your AlgoBulls account. Go to My Plans from the sidebar navigation. Go to Payment Gateway Transactions enter the amount and click on Add Money.</p> <p></p> <p>Enter your phone number &amp; email address and click on proceed.</p> <p></p> <p>Choose your preferred payment method. Once the payment is successful the balance will be added in your AlgoBulls account.</p> <p></p>"},{"location":"member/my_plans.html#4-other-charges","title":"4. Other charges","text":"<p>If no plan is purchased or a plan expires while executing a strategy, the following charges will be levied.</p> <p></p>"},{"location":"member/my_plans.html#5-transaction-history","title":"5. Transaction History","text":"<p>You can view all your transactions from this transaction history table. You can search for a transaction using search option</p> <p></p>"},{"location":"member/pnltracker.html","title":"P&amp;L Tracker","text":""},{"location":"member/pnltracker.html#1-introduction","title":"1. Introduction","text":"<p>The P&amp;L Tracker feature allows you to gain profit or limit losses at (or near) predefined values for your plan. You can access the P&amp;L Tracker when you start a strategy in the My Portfolio section.</p>"},{"location":"member/pnltracker.html#2-how-to-use-the-pl-tracker","title":"2. How to Use the P&amp;L Tracker","text":"<p>Go to My Portfolio page and select a strategy you want to execute. Click start button in the action bar to open the Execute modal.</p> <p></p> <p>Turn the P&amp;L toggle button ON after adding the date, duration, and lots in the customisation section. Then, enter the desired profit and risk appetite in the P&amp;L Tracker.</p> <p></p> <p>Click on Save &amp; Start after agreeing to the terms and conditions if you are in live mode. The strategy will then begin.</p> <p>Note</p> <ul> <li>The P&amp;L scan frequency for live trading and paper trading is currently refreshed every 30 seconds. This may change in the future.</li> </ul> <p>Choose a strategy from Odyssey and begin trading now!</p>"},{"location":"member/pnltracker.html#3-fields","title":"3. Fields","text":"<p>Profit Desired: Enter the desired profit amount here. This is the maximum profit you would like to make from this strategy, after which the strategy will stop. If the strategy exceeds this amount, all positions will be squared off and the strategy will stop execution.</p> <p>Risk Appetite: Enter the risk appetite amount here. This is the maximum loss you are willing to bear for this strategy, after which the strategy will stop. If the strategy exceeds this amount, all positions will be squared off and the strategy will stop execution.</p> <p>Note</p> <ul> <li> <p>This feature is available for:</p> <p>i. Test Mode</p> <p>Virtual Trading (Backtesting &amp; Paper Trading)</p> <p>ii. Live Mode</p> <p>Live Trading in Live Markets</p> <ul> <li> <p>AlgoBulls' Risk Management System will try its best to book your P&amp;L at the given Profit Desired or limit it at the given Risk Appetite.</p> </li> <li> <p>You can either enter both values or leave them blank. It is not allowed to enter one value while leaving the other blank. In other words:</p> <ul> <li>This feature can be turned ON by providing both values.</li> <li>This feature can be turned OFF by keeping both values blank.</li> <li>Turn OFF this feature by using the toggle button if you want to keep both values blank.</li> </ul> </li> <li> <p>For Live Trading: These values are not guaranteed as various factors outside the control of AlgoBulls' systems come into play, such as market liquidity, momentum, and delays introduced due to network issues. For the P&amp;L tracker to function effectively, please avoid running multiple strategies on the same instrument(s).</p> </li> </ul> </li> </ul>"},{"location":"member/python-build.html","title":"Phoenix","text":""},{"location":"member/python-build.html#1-introduction","title":"1. Introduction","text":"<p>Now you can code your own strategies easily using our DIY(Do-It-Yourself) product called Phoenix. Begin coding your own strategy from scratch, or modify some of our ready-made templates to suit your needs. Additionally, leverage our Generative AI technology to generate your strategy codes using plain english. Get access to our state-of-the-art AlgoBulls Core Trading Engine, which automatically leverages our infra so that you can access the latest historical data to gauge the performance of your strategies. Tweak the various parameters of your strategy to choose the ideal instrument, indicator values, and profit loss percentages as per your needs! View the performance of your strategy using our visual analytics feature and continue to tweak till you are satisfied with the performance. Deploy it on 50+ supported brokers without coding any broker integration logic.</p> <ul> <li>Go to Algo Products section in the sidebar navigation and select Phoenix to start your algotrading journey.</li> </ul> <p></p>"},{"location":"member/python-build.html#2-an-overview","title":"2. An overview","text":"<p>Total Running Strategies: This section shows how many strategies are currently active and running concurrently in your account.</p> <p>LT Running Strategies: This section shows how many Live Trading strategies are currently active and running concurrently in your account.</p> <p>Strategies Saved: This displays the number of strategies saved in your AlgoBulls account. It also shows the number of maximum strategies that you can save as per your current plan.</p> <p>Execution Time Consumed: You can view the number of minutes that have been used for Backtesting or Paper Trading your strategies.</p> <p>Analytics Support: This shows whether your analytics support is active. Analytics support is not available to free plan users.</p> <p>Professional Support: This section connects you to other professional support forums for additional support while developing the strategy.</p> <p>Active Plan: This section displays the current plan active on your AlgoBulls account.</p> <p>Ready Templates: Ready-to-use templates that you can modify and test.</p> <p></p> <p>My Coded Strategies: Strategies that have been coded and saved by you are displayed here. This includes new and modified strategies developed by you.</p> <p></p> <p>Quick Help: Resources to help you code better.</p> <p></p>"},{"location":"member/python-build.html#3-how-to-get-started-with-phoenix","title":"3. How to get started with Phoenix?","text":"<ul> <li>To start developing your own strategy, you must first activate a plan from the Pricing page. Select Phoenix from the Pricing category tab and   choose a plan of your choice.</li> </ul> <ul> <li>After selecting your preferred plan, you will be able to begin coding. You can either edit the preloaded Ready templates or use My Coded Strategies section to create your own strategies or click on Create Strategies Using AI to get your   strategy generated using Phoenix Copilot.</li> </ul>"},{"location":"member/python-build.html#4-how-to-code-strategies-using-ready-templates","title":"4. How to code strategies using Ready Templates?","text":"<ul> <li>Select a template that you would like to modify from the Ready Template section. To view all the ready-to-use templates click on View All.</li> </ul> <ul> <li>Click on the Code button placed in the bottom right corner of the selected template to view the strategy code.</li> </ul> <p>You should now see the code editor, where you can start modifying the code as required.</p> <p></p> <p>To save the strategy, click the Save button. This strategy will be added to your list of My coded strategies.</p> <p>Follow these simple steps to test the strategy's performance</p> <p>Step 1</p> <p>Click on Save &amp; Start button, a pop-up window will appear.</p> <p></p> <p>Step 2</p> <p>In the Execute modal that appears, choose Backtesting to back test or Paper Trading to Paper Trade a strategy.</p> <p>Select the duration option in the customisations section. Add the desired date and time, as well as the quantity/lots. In Backtesting you will need to put the start date and end date along with time.</p> <p></p> <p>In Paper Trading, you only need to add the start and end time.</p> <p></p> <p>Step 3</p> <p>Once you scroll below, you will see the P&amp;L tracker. Switch the P&amp;L tracker ON and enter your desired profit and risk appetite. To keep things simple, you can also leave it turned off.</p> <p></p> <p>Step 4</p> <p>In the Configuration section, you can check the parameters added or modified by you.</p> <p>Step 5</p> <p>To begin testing the strategy, click on Execute.</p> <p></p>"},{"location":"member/python-build.html#5-how-to-view-the-results","title":"5. How to view the Results?","text":"<p>View the performance of your strategy in the Analytics/Data section. Go to the Analytics section to see how the strategy has performed.</p> <p></p> <ul> <li> <p>You can analyse your strategy output using various charts and heatmaps shown below.</p> </li> <li> <p>Cumulative Returns</p> </li> </ul> <p></p> <ul> <li>Profit and Loss (P&amp;L)</li> </ul> <p></p> <ul> <li>EOY (End of Year) Returns</li> </ul> <p></p> <ul> <li>Monthly Returns (%)</li> </ul> <p></p> <ul> <li>Daily Returns</li> </ul> <p></p> <ul> <li>Underwater Drawdown Plot</li> </ul> <p></p> <ul> <li>Heatmap</li> </ul> <p></p> <ul> <li> <p>You can also check P&amp;L table and Logs by clicking on Data button.</p> </li> <li> <p>Logs</p> </li> </ul> <p></p> <ul> <li>P&amp;L Table</li> </ul> <p></p>"},{"location":"member/python-build.html#6-you-can-rename-a-strategy-by-clicking-the-edit-symbol-besides-the-strategy-name","title":"6. You can rename a strategy by clicking the edit symbol besides the strategy name.","text":""},{"location":"member/python-build.html#7-choose-layout","title":"7. Choose Layout","text":"<ul> <li>There are three layouts to view your strategy. You can select layout by clicking on the settings wheel icon on the right side.</li> </ul> <ul> <li>The Following three modes will look like this.</li> </ul>"},{"location":"member/python-build.html#8-how-to-code-a-new-strategy","title":"8. How to code a new strategy?","text":"<ul> <li>If you want to create your own strategy, click on the + Sign in the Code New Strategy option under the My Coded Strategies section.</li> </ul> <ul> <li>A new blank code editor will open, allowing you to start coding your new strategy. You can check out the basic building blocks of a strategy here to help you with your code structure. After   you've finished coding, click Save to save this strategy in the My Coded Strategies section.</li> </ul> <ul> <li> <p>Next, you need to configure the strategy\u2019s parameters by clicking on the settings symbol in the top right corner of the code editor. In this section you can add, view &amp; edit the strategy parameters.</p> </li> <li> <p>To test the behaviour and performance of the strategy, click on Save &amp; Start and follow the directions given earlier. The performance of the strategy will soon be available in the Results section.</p> </li> </ul>"},{"location":"member/python-build.html#9-how-to-configure-strategy-parameters","title":"9. How to Configure Strategy Parameters?","text":"<ul> <li>You can configure the strategy\u2019s parameters by clicking on the settings symbol in the top right corner of the code editor. In this section, you can view a strategy\u2019s parameters or edit these parameters too.</li> </ul> <ul> <li>To know more about the parameters, click here.</li> </ul> <ul> <li>User Parameters: In this section, you can change instruments, customise/create your own parameters for the strategy. Click on +Add New Parameter to begin adding them. They should match with the parameters you have defined in your Python   class.</li> </ul>"},{"location":"member/python-build.html#10-live-test-mode","title":"10. Live Test Mode","text":"<ul> <li>Phoenix gives support to run strategy in Live and Test mode. So user can choose to see results for the strategy in different modes. User can select the Live/Test mode using the Live/Test button.</li> </ul>"},{"location":"member/settings.html","title":"Settings","text":"<p>The AlgoBulls Settings page allows users to customise their account and trading experience. Below is a detailed description of each section and its functionalities.</p>"},{"location":"member/settings.html#accessing-the-settings-page","title":"Accessing the Settings Page","text":"<p>You can access the settings page by visiting AlgoBulls Settings.</p>"},{"location":"member/settings.html#sections-and-features","title":"Sections and Features","text":""},{"location":"member/settings.html#1-personal-info","title":"1. Personal Info","text":"<ul> <li>Basic Info: Update personal details including Name, Mobile Number, Email, Date of Birth, Country, Occupation, and Trading Experience. These informations are necessary for better service and we suggest to fill these details properly, so that we can provide you custom features and better experience.</li> <li>Detailed Profiling:<ul> <li>Trading Goals: Select your trading goals.</li> <li>Preferred Trading Style: Choose your preferred trading style.</li> <li>Current Challenges in Trading: Share your current challenges.</li> <li>Coding Experience: Indicate your coding experience level.</li> <li>Favorite Trading Platforms/Tools: List your favorite tools.</li> <li>Preferred Learning Methods: Select how you prefer to learn.</li> <li>Main Source of Trading Information: Choose your primary source of information.</li> <li>Interested Products: Select from Phoenix and Odyssey.</li> <li>Link Social Media Accounts: Connect LinkedIn, Twitter, Facebook, Instagram, and YouTube.</li> </ul> </li> </ul>"},{"location":"member/settings.html#2-password-security","title":"2. Password &amp; Security","text":"<ul> <li>Signing In: View and update your password.</li> <li>Password Last Changed: Display the date when the password was last changed.</li> </ul>"},{"location":"member/settings.html#3-trade-manager","title":"3. Trade Manager","text":"<ul> <li>Access: Your trade manager has limited access and can only START/STOP strategies on your behalf.</li> </ul>"},{"location":"member/settings.html#4-developer-options","title":"4. Developer Options","text":"<ul> <li>API Token: Manage your API tokens.</li> <li>Developer Options: Enabled according to your active plans.</li> </ul>"},{"location":"member/settings.html#5-notification-settings","title":"5. Notification Settings","text":"<ul> <li>Desktop Notification Sound: Toggle sound notifications.</li> <li>Notification Types:<ul> <li>Email: customise email notifications for Broking Details, Plans &amp; Wallets, and Order Updates.</li> </ul> </li> </ul>"},{"location":"member/settings.html#6-user-preferences","title":"6. User Preferences","text":"<ul> <li>Preferred Location: Set your preferred location.</li> <li>Site Theme: Choose between Light and Dark themes.</li> <li>Phoenix Default Screen: Select between Splash Screen and Dashboard.</li> <li>Reset Custom Preferences: Reset to default custom preferences.</li> </ul>"},{"location":"member/settings.html#7-execution-mode","title":"7. Execution Mode","text":"<ul> <li>Live Trading: Choose between REGULAR and FAST modes.</li> <li>Paper Trading: Choose between REGULAR and FAST modes.</li> <li>Backtesting: Choose between REGULAR and FAST modes.</li> <li>Reset to Default: Reset execution mode preferences to default.</li> </ul>"},{"location":"member/settings.html#support","title":"Support","text":"<p>For assistance, contact AlgoBulls support at support@algobulls.com or visit our Help Center.</p>"},{"location":"member/strategist-profile.html","title":"Strategist Profile","text":""},{"location":"member/strategist-profile.html#introduction","title":"Introduction","text":"<p>AlgoBulls provides a variety of trading strategies, but the brains behind these strategies are strategists who work extremely hard to create powerful yet simple strategies. The Strategist profile will help you recognise the strategist's work and strategies. Let\u2019s take a look at what the strategist profile offers.</p>"},{"location":"member/strategist-profile.html#strategist-details","title":"Strategist Details","text":"<p>View the strategist's details such as Name, Bio and Contact Information.</p> <p></p>"},{"location":"member/strategist-profile.html#strategy","title":"Strategy","text":"<p>View the strategies created by the strategist here. Retail, Premium, and HNI strategies developed by this strategist are displayed.</p> <p></p>"},{"location":"member/strategist-profile.html#5-explore-strategies","title":"5. Explore Strategies","text":"<p>You can find strategies using the following options: </p>"},{"location":"member/strategist-profile.html#i-search-bar","title":"i. Search Bar","text":"<p>Use this to type in the strategy name or strategy code to search for strategies.</p> <p> </p>"},{"location":"member/strategist-profile.html#ii-filters","title":"ii. Filters","text":"<p>You can filter your view as per the  brokers, exchanges, segments, modes, candle types, candle sizes and tags. Click on the Apply Filters button to see the results.</p> <p></p>"},{"location":"member/strategist-profile.html#iii-favourites","title":"iii. Favourites","text":"<p>Use the toggle button to activate the Favourite Mode to view the strategies marked as Favourite (\u2606).</p> <p></p>"},{"location":"member/strategist-profile.html#iv-new-strategies","title":"iv. New Strategies","text":"<p>Use the toggle button to activate the New strategies Mode to view the strategies which are newly added by the strategist.</p> <p></p>"},{"location":"member/strategist-profile.html#v-sort","title":"v. Sort","text":"<p>You can sort the strategies by clicking on the heading of each column:</p> <p></p> <ul> <li> <p>Strategy </p> </li> <li> <p>Instruments</p> </li> </ul>"},{"location":"member/strategist-profile.html#v-duration","title":"v. Duration","text":"<p>This option allows you to search for strategies that have been added to the marketplace in the last 3 days, 14 days, 30 days and All Time. Click on Apply Duration to save the changes. </p> <p></p>"},{"location":"member/strategist-profile.html#vi-pagination","title":"vi. Pagination","text":"<p>You can click the &lt; and &gt; for changing pages. You can also choose to view 4/8/12 strategies per page.</p> <p></p>"},{"location":"member/strategist-profile.html#vii-share","title":"vii. Share","text":"<p>This button helps you share your favourite strategy with friends and family. You can click the share icon in strategy column to share this strategy.</p> <p></p>"},{"location":"member/strategist-profile.html#viii-know-more","title":"viii. Know more","text":"<p>Click the 'Know More' button below the 'Execute' button to discover additional details about this strategy.</p> <p></p>"},{"location":"member/strategy-card.html","title":"Strategy Details","text":""},{"location":"member/strategy-card.html#1-introduction","title":"1. Introduction","text":"<p>This page provides detailed information about a strategy.</p>"},{"location":"member/strategy-card.html#2-how-to-find-details-of-a-strategy","title":"2. How to Find Details of a Strategy","text":"<p>To check the details of a strategy, go to the Odyssey page, select a strategy of your choice, and click on the \"Know More\" link in the Action column.</p> <p></p>"},{"location":"member/strategy-card.html#3-strategy-details-page","title":"3. Strategy Details Page","text":"<p>The Strategy Details page contains the following information about the strategy:</p> <ul> <li>Strategist Name</li> <li>Strategy Name</li> <li>Instruments and Exchange</li> <li>Strategy Category</li> <li>Recommended Duration</li> <li>Risk</li> <li>Fee (with subscription)</li> <li>Fee (Pay as you go)</li> </ul> <p></p>"},{"location":"member/strategy-card.html#4-strategy-details","title":"4. Strategy Details","text":"<p>This section contains all the information about the strategy.</p> <p></p>"},{"location":"member/strategy-card.html#5-parameters","title":"5. Parameters","text":"<p>This section contains the parameters used in the strategy.</p> <p></p>"},{"location":"member/tweak.html","title":"Tweak","text":""},{"location":"member/tweak.html#1-introduction","title":"1. Introduction","text":"<p>If you'd like to tweak the strategies for backtesting or paper trading, AlgoBulls also has a Tweak option. Before entering the live markets, you can tweak different parameters of a strategy to see how they function and what results are generated</p>"},{"location":"member/tweak.html#2-how-to-tweak-a-strategy","title":"2. How to tweak a strategy?","text":"<p>Step 1: Go to my portfolio page.</p> <p>Step 2: To tweak a strategy, click the tweak button on the strategy from config column.</p> <p> </p> <p>Step 3: Tweak mode will open in view mode, but you can edit it by clicking on edit button from right side.</p> <p> </p> <p>Change Instruments You can change the instruments as per your choice.</p> <p> </p> <p>Order Settings Change Order Settings</p> <p> </p> <p>Strategy Settings Change Strategy Settings here. In strategy settings, you can select the candle duration, strategy mode.</p> <p> </p> <p>Strategy Parameters Change Strategy Parameters</p> <p> </p> <p>Step 4: Once you are convinced and happy with the tweak, click save to save the strategy with tweaked configs. Or you can click on Save as New to save a new strategy with changed parameters.</p> <p> </p> <p>You can also add tags to the tweaked strategy as per your requirement.</p>"},{"location":"member/tweak.html#3-how-to-apply-the-tweaked-strategy-in-live-trading","title":"3. How to apply the tweaked strategy in live trading?","text":"<p>To know more about applying your tweaked strategy in the live markets, click here. </p>"},{"location":"member/wallet.html","title":"Pricing","text":""},{"location":"member/wallet.html#1-introduction","title":"1. Introduction:","text":"<p>To begin trading with AlgoBulls, you must have a sufficient balance in your account. This sum can be deposited into your wallet via the My Plans page. Certain services that you use on AlgoBulls have charges involved, but to ensure that you can start trading without worrying about the charges, we have a range of plans that you can subscribe to.</p>"},{"location":"member/wallet.html#2-how-to-add-money","title":"2. How to add money?","text":"<p>Go to My Plans page then go to Payment Gateway Transaction, add amount in Amount field click on Add Money button.</p> <p></p> <p>Learn more about Pricing.</p> <p>All of your actions, such as backtesting, paper trading, and live trading, are charged depending on the amount in your wallet (wherever charges are applicable).</p> <p>Your funds are reduced as you are charged, and when they reach zero, your account stops trading.</p> <p>You can consider opting for subscription plans to get more cost-effective benefits.</p> <p>Here\u2019s a quick explainer on how you can subscribe to a package of your choice.</p>"},{"location":"member/wallet.html#3-subscription-plans","title":"3. Subscription plans:","text":""},{"location":"member/wallet.html#i-odyssey-plans","title":"i. Odyssey Plans","text":"<p>By subscribing to odyssey plans, you can do trading using our pre-build strategies. These plans provide the following benefits.</p> <ul> <li> <p>Transactional Charges</p> </li> <li> <p>Max Tweak Limit</p> </li> <li> <p>Execution Time for Backtesting(in minutes)</p> </li> <li> <p>Execution Time for Paper Trading (in minutes)</p> </li> <li> <p>Historical Data Duration for Backtesting</p> </li> <li> <p>Execution Time for Phoenix (Backtesting/Paper Trading) in minutes</p> </li> <li> <p>Historical Data Duration for Backtesting (Phoenix)</p> </li> <li> <p>Strategies Allowed to Be Saved</p> </li> <li> <p>Total Strategies Allowed to Run in Parallel</p> </li> <li> <p>Live Trading Strategies Allowed to Run in Parallel</p> </li> <li> <p>Analytics Access</p> </li> <li> <p>Professional Support</p> </li> </ul>"},{"location":"member/wallet.html#ii-phoenix-plans","title":"ii. Phoenix Plans","text":"<ul> <li> <p>Other Benefits with Phoenix plans</p> </li> <li> <p>Strategy Development</p> </li> </ul> <p></p> <ul> <li>Strategy Execution</li> </ul> <p></p> <ul> <li>Market Access</li> </ul> <p></p> <ul> <li>Broker Dealer Support</li> </ul> <p></p> <ul> <li>Security and Protection</li> </ul> <p></p> <ul> <li>Analytics and Reporting</li> </ul> <p></p> <ul> <li>Infrastructure</li> </ul> <p></p> <ul> <li>Support and Customisation</li> </ul> <p></p>"},{"location":"member/wallet.html#iii-support-plans","title":"iii. Support Plans","text":"<p>If a user needs support related to strategy creation, support on video call, support on WhatsApp etc. User can purchase these plans.</p> <p></p>"},{"location":"member/wallet.html#4-compare-plans","title":"4. Compare Plans:","text":""},{"location":"member/wallet.html#1-highlight-difference","title":"1: Highlight Difference","text":""},{"location":"member/wallet.html#2-hide-common-features","title":"2: Hide Common Features","text":""},{"location":"member/wallet.html#5-how-to-subscribe-to-a-plan","title":"5. How to subscribe to a plan?","text":"<p>To subscribe to a plan, you can choose a package of your choice from the Pricing page.</p> <p>These plans are active for a specific time duration. Hence, all services included in the package will not incur any additional charges for that period.</p> <ul> <li> <p>Select a plan of your choice and click on Choose This Plan button.</p> </li> <li> <p>You will be redirected to check out page where you can make payment and purchase the plan. </p> </li> </ul>"},{"location":"member/Books/pnl.html","title":"P&amp;L Book","text":""},{"location":"member/Books/pnl.html#1-what-is-a-pl-book","title":"1. What is a P&amp;L Book?","text":"<p>Track the profit and loss of your trades in the P&amp;L Book.</p> <ul> <li>All trades/orders in your account are updated real-time as and when the transactions take place.</li> <li>Filter your activities using filters such as strategies, instrument and date range.</li> <li>View data in heatmaps.</li> </ul> <p></p>"},{"location":"member/Books/pnl.html#2-summary-bar","title":"2. Summary Bar","text":"<p>The P&amp;L Book shows the gross roi, which is your total profit and loss, the trading volume, which is the maximum traded volume to date, and the total trades, which is the total number of trades made to date.</p> <p></p>"},{"location":"member/Books/pnl.html#3-heatmaps","title":"3. Heatmaps","text":"<p>Each box in the heatmap represents a day. Your P&amp;L data is segregated in shades of green and red. Dark green denotes highest profit and red denotes maximum loss for that day.</p> <ul> <li>Gross Roi</li> </ul> <p></p> <ul> <li>Trading Volume</li> </ul> <p></p> <ul> <li>Total Trades</li> </ul> <p></p>"},{"location":"member/Books/pnl.html#4-filters","title":"4. Filters","text":"<ul> <li>Filters will allow you to selectively search for a specific entry or multiple entries.</li> </ul> <ul> <li> <p>Instrument: Select one or more instruments to display in the table below.   These entries are populated as per the instruments on the strategies that were executed.</p> </li> <li> <p>Strategies: Choose one or more strategies to display them in the table below.   These entries are populated as per the strategies chosen by you.</p> </li> <li> <p>Date Range (Start Date &amp; End Date): Give the date range to view the table for the selected strategy and instrument (if any).</p> </li> </ul>"},{"location":"member/Books/pnl.html#5-fields","title":"5. Fields","text":"<p>The table covers the following fields:</p> <ul> <li> <p>Mode: Mode of the strategy.</p> </li> <li> <p>Strategy: Name of the strategy.</p> </li> <li> <p>Broker: Broker name.</p> </li> <li> <p>Entry: Quantity, price, date &amp; entry time of trade.</p> </li> <li> <p>Exit: Quantity, price, date &amp; exit time of trade.</p> </li> <li> <p>P&amp;L (% or INR): The P&amp;L % or INR can be changed using the toggle option in the tools section in the top right corner. You can view the P&amp;L in rupees or P&amp;L percentage of the trade.</p> </li> </ul> <p></p>"},{"location":"member/Books/pnl.html#6-sort-results","title":"6. Sort Results","text":"<p>You can also sort the P&amp;L Table by Mode, Strategy, Entry, Exit, P&amp;L. Click on the respective column headings to sort results.</p> <p></p>"},{"location":"member/Books/pnl.html#7-livetest-mode","title":"7. Live/Test Mode","text":"<p>To check results for Live Trades or Backtest/PaperTrade results on a strategy, you can do this using Live/Test button.</p> <p></p>"},{"location":"member/Books/tradebook.html","title":"Trade Book","text":""},{"location":"member/Books/tradebook.html#1-what-is-a-trade-book","title":"1. What is a Trade Book?","text":"<p>All strategies executed in your account are updated real-time as and when the transactions take place.</p> <ul> <li> <p>Check trading volume &amp; total trades.</p> </li> <li> <p>View data in heatmaps.</p> </li> </ul> <p></p>"},{"location":"member/Books/tradebook.html#2-summary-bar","title":"2. Summary Bar","text":"<p>The Trade Book shows the trading volume, which is the maximum traded volume to date, and the  total trades, which is the total number of trades made to date.</p>"},{"location":"member/Books/tradebook.html#3-heatmaps","title":"3. Heatmaps","text":"<p>Your trades are segregated in shades of blue and white. Dark blue denotes the highest number of trades and white denotes no trades made on that particular day/week/month/year.</p> <ul> <li>Trading Volume</li> </ul> <p></p> <ul> <li>Total Trades</li> </ul> <p></p>"},{"location":"member/Books/tradebook.html#4-filters","title":"4. Filters","text":"<p>Filters will allow you to selectively search for a specific entry or multiple entries.</p> <p></p> <ul> <li> <p>Instrument: Select one or more instruments to display in the table below. These entries are populated as per the instruments on which your strategies were activated.</p> </li> <li> <p>Strategies: Choose one or more strategies to display them in the table below.   These entries are populated as per the strategies chosen by you.</p> </li> <li> <p>Brokers: Choose one or more brokers to display them in the table below.   These entries are populated as per the brokers selected by you.</p> </li> <li> <p>Date Range (Start Date &amp; End Date): Give the date range to view the table for the selected strategy and instrument (if any).</p> </li> <li> <p>Trade Type: filter trades with trading type Buy or Sell.</p> </li> </ul>"},{"location":"member/Books/tradebook.html#5-fields","title":"5. Fields","text":"<p>The table covers the following fields:</p> <ul> <li> <p>Strategy: Name of strategy that placed the trade.</p> </li> <li> <p>Broker ID: This includes a unique broker order ID. This helps in mapping correct entry/exit orders.</p> </li> <li> <p>AlgoBulls Order ID: Unique AlgoBulls order ID. This helps in mapping correct entry/exit orders.</p> </li> <li> <p>Transaction:  The transaction section includes the transaction type such as buy or sell, quantity, price, date &amp; time.</p> </li> </ul> <p></p>"},{"location":"member/Books/tradebook.html#6-the-toolbar","title":"6. The Toolbar","text":"<p>Refresh - If you can't see an entry in the table (perhaps the most recent one), click refresh to check again.</p> <p></p> <p>Settings - Select the columns that you want to view in this settings option.</p> <p></p> <p>Full Screen - With this option, you will be able to view your current tab on the browser in full Screen. To go back to the normal viewing mode click on it again. This is similar to pressing F11 on most browsers and operating systems.</p> <p></p>"},{"location":"member/Books/tradebook.html#7-livetest-mode","title":"7. Live/Test Mode","text":"<p>To check results for Live Trades or Backtest/PaperTrade results on a strategy, you can do this using Live/Test button.</p> <p></p>"},{"location":"member/analytics/pyalgotrading_analytics.html","title":"Pyalgotrading Analytics","text":""},{"location":"member/analytics/pyalgotrading_analytics.html#metric-values-and-statistics","title":"Metric Values and Statistics","text":""},{"location":"member/analytics/pyalgotrading_analytics.html#cumulative-returns","title":"Cumulative Returns","text":"<ul> <li>The Cumulative Returns chart illustrates how our strategy's returns value has evolved over time in percentage. </li> <li>Positive values indicate gains, while negatives reflect losses. Bigger positive returns are more favourable. </li> <li>Keep in mind, this chart focuses on gains and losses, excluding risk and timing considerations.</li> <li>There are 2 sub categories of cumulative returns chart depending on the scale we are using. One is normal scaled and other is log scaled </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#end-of-year-returns-eoy","title":"End of Year Returns (EoY)","text":"<ul> <li>The End of Year Returns chart showcases our strategy's annual performance as a percentage. </li> <li>It quantifies its overall performance, considering gains or losses throughout each year.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#distributions-of-monthly-returns-histogram","title":"Distributions of Monthly Returns (Histogram)","text":"<ul> <li>In the Monthly Returns Distribution Histogram, we see the frequency distribution of different levels of returns over consecutive months. </li> <li>This histogram helps us understand the range and patterns in monthly returns, shedding light on our strategy's volatility and performance trends.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#daily-returns","title":"Daily Returns","text":"<ul> <li>The Daily Returns Chart portrays the percentage change in our strategy's returns between trading days. </li> <li>It provides insights into short-term volatility, trend analysis, and risk assessment.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#rolling-volatility-6-months","title":"Rolling Volatility (6 months)","text":"<ul> <li>A Rolling Volatility (6 months) Plot showcases the changing volatility of an investment over time using a rolling window of six months. </li> <li>This plot reveals how the investment's price fluctuations vary as the window moves across the dataset. </li> <li>It provides insights into short-term volatility patterns, helping investors understand how the investment's risk level evolves in response to different market conditions.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#rolling-sharpe-6-months","title":"Rolling Sharpe (6 months)","text":"<ul> <li>A Rolling Sharpe (6 months) Plot illustrates the dynamic changes in the Sharpe ratio over time using a rolling window of six months. </li> <li>The plot shows how the risk-adjusted performance of an investment fluctuates as the window moves through the dataset. </li> <li>This visualization helps investors understand how the Sharpe ratio varies with changing market conditions and provides insights into the investment's consistency and risk-return trade-offs over short-term periods.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#rolling-sortino-6-months","title":"Rolling Sortino (6 months)","text":"<ul> <li>A Rolling Sortino (6 months) Plot visualizes the variation in the Sortino ratio over time using a rolling window of six months. </li> <li>This plot demonstrates how the investment's risk-adjusted performance, considering only downside volatility, changes as the window progresses through the data. </li> <li>It offers insights into how the Sortino ratio evolves with market conditions, helping investors assess the investment's ability to generate favorable risk-adjusted returns over short-term intervals.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#worst-5-drawdown-periods","title":"Worst 5 Drawdown Periods","text":"<ul> <li>A Worst 5 Drawdown Periods plot displays the top five periods during which the strategy experienced the largest declines from peak to trough. </li> <li>This visualization helps strategists understand the most significant loss-making episodes in the strategy's run. </li> <li>It shows the magnitude and duration of these drawdowns, providing insights into the strategy's risk and potential vulnerabilities.     </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#underwater-plot","title":"Underwater Plot","text":"<ul> <li>The Underwater Plot visually narrates our strategy's performance concerning its past peaks. </li> <li>It showcases how much our returns value has dropped from its highest point over time. </li> <li>This aids in visualising periods of drawdown and recovery, offering insights into historical risk and resilience.    </li> </ul>"},{"location":"member/analytics/pyalgotrading_analytics.html#monthly-returns-heatmap","title":"Monthly Returns (Heatmap)","text":"<ul> <li>The Monthly Returns Heatmap offers a colour-coded view of our strategy's performance across months. </li> <li>Shades of green indicate positive returns, while shades of red signify losses. </li> <li>This visual tool helps spot trends and patterns, aiding in identifying strong and weak performance periods.    </li> </ul>"},{"location":"member/analytics/python-build-view-results.html","title":"Python build view results","text":""},{"location":"member/analytics/python-build-view-results.html#how-to-view-the-results","title":"How to view the Results?","text":"<p>Once you start the strategy, it may take a while for it to complete the execution. You can switch to the Analytics tab after you run your strategy. Even if the strategy execution is not complete, you will still see intermediate results.</p> <p>Analytics: In the analytics section, you can view a strategy\u2019s Stats &amp; various other metrics in the form of graphs like P&amp;L.</p>"},{"location":"member/analytics/python-build-view-results.html#stats","title":"Stats","text":"<p>In this section you can see the total returns, sharpe ratio, sortino ratio, volatility, Max Drawdown, Total wins or Loses, Total short or long trades, hit ratio, number of trades, average trades per day, max profit, max loss, average profit per winning trade, average loss per losing trade. </p>"},{"location":"member/analytics/python-build-view-results.html#cumulative-returns","title":"Cumulative Returns","text":""},{"location":"member/analytics/python-build-view-results.html#profit-loss-currency-or","title":"Profit &amp; Loss (Currency or %)","text":"<p>The trade by trade P&amp;L in Currency or Percentage. </p>"},{"location":"member/analytics/python-build-view-results.html#end-of-year-returns-plot","title":"End of Year Returns Plot (%)","text":""},{"location":"member/analytics/python-build-view-results.html#monthly-returns-histogram","title":"Monthly Returns Histogram (%)","text":""},{"location":"member/analytics/python-build-view-results.html#monthly-returns-heatmap","title":"Monthly Returns Heatmap (%)","text":""},{"location":"member/analytics/python-build-view-results.html#daily-returns","title":"Daily Returns (%)","text":""},{"location":"member/analytics/python-build-view-results.html#underwater-drawdown-plot","title":"Underwater Drawdown Plot (%)","text":""},{"location":"member/analytics/python-build-view-results.html#pl-book","title":"P&amp;L Book","text":"<p>View detailed trade by trade report. Premium users can analyze this data in the form of heatmaps for Gross Profit &amp; Loss, Trading Volume &amp; Total number of Trades. </p>"},{"location":"member/analytics/python-build-view-results.html#user-log","title":"User Log","text":"<p>Real-time logs from strategy execution are displayed in this section. Use these logs to debug your strategy\u2019s behavior and performance. </p>"},{"location":"member/analytics/python-build-view-results.html#order-history","title":"Order History","text":"<p>View the order state transition for every order placed by your strategy in-depth. </p>"},{"location":"member/analytics/python-build-view-results.html#pl-table","title":"P&amp;L Table","text":"<p>View comprehensive trade-by-trade report in a user-friendly tabular format. This table provides details on entry and exit trades, prices, timestamps, transaction types, and trade-by-trade profit and loss. You can display these figures in either percentages or dollars. </p>"},{"location":"member/brokers/broker_alpaca_guide.html","title":"Alpaca","text":"<p>Alpaca is a technology company that offers a modern, developer-friendly trading platform designed for algorithmic and automated trading in the financial markets, particularly focused on equities and cryptocurrencies. The company provides APIs ( Application Programming Interfaces) that allow developers and traders to access market data, execute trades, and build their own algorithmic trading strategies.</p> <p>Key features and offerings of Alpaca include:</p> <ol> <li> <p>APIs and SDKs: Alpaca offers APIs and software development kits (SDKs) that enable developers to programmatically access real-time and historical market data, as well as execute trades on various exchanges.</p> </li> <li> <p>Algorithmic Trading: Alpaca's platform is tailored for algorithmic trading strategies, where traders can automate trading decisions based on predefined conditions and rules.</p> </li> <li> <p>Paper Trading: Alpaca provides a simulated environment called \"paper trading,\" allowing traders to test their strategies in a risk-free setting before deploying them with real money.</p> </li> <li> <p>Market Data: The platform offers access to real-time and historical market data, which is crucial for building and testing trading strategies.</p> </li> <li> <p>Order Execution: Traders can use Alpaca's API to execute trades on supported exchanges. This includes submitting market, limit, and stop orders.</p> </li> <li> <p>Customizable Dashboards: Alpaca provides customizable dashboards and interfaces to monitor trading activity and portfolio performance.</p> </li> <li> <p>Brokerage Services: Alpaca acts as a brokerage, providing services that allow traders to execute their strategies on supported exchanges.</p> </li> <li> <p>Regulatory Compliance: Alpaca operates within the regulations of the financial industry, ensuring compliance with rules and requirements.</p> </li> </ol> <p>Alpaca's platform aims to democratize algorithmic trading by providing accessible tools and resources for both individual traders and developers. It's worth noting that the landscape of algorithmic trading and financial technology is constantly evolving, so it's a good idea to check Alpaca's official website for the most current information about their offerings and services.</p>"},{"location":"member/brokers/broker_alpaca_guide.html#advantages-of-binding-alpaca-with-your-algobulls-account","title":"Advantages of binding Alpaca with your AlgoBulls account","text":"<ul> <li>You can run your strategies on American exchanges like NASDAQ or NYSE.</li> <li>It helps you access the historical data as well as live data of all the stocks from Alpaca.</li> <li>It will also help you backtest, paper trade and live trade on AlgoBulls.</li> </ul>"},{"location":"member/brokers/broker_alpaca_guide.html#how-to-bind-alpaca-with-your-algobulls-account","title":"How to bind Alpaca with your AlgoBulls account?","text":"<p>You can connect your Alpaca account with AlgoBulls in two ways: OAuth and Non-OAuth.</p> <ul> <li>OAuth Method: Follow the simple steps mentioned here to connect using OAuth.</li> <li>Non-OAuth Method: For the Non-OAuth method, you can follow the steps mentioned here.</li> </ul> <p>WARNING: We have discontinued the Non-OAuth method in accordance with Alpaca\u2019s recommendations. Please use the OAuth method for seamless integration and improved security. Be mindful of this update as you proceed with your integrations.</p>"},{"location":"member/brokers/connecting_alpaca.html","title":"OAuth","text":"<p>Embark on a streamlined and secure journey as you bind your Alpaca broker with AlgoBulls through OAuth integration. This seamless process ensures a robust connection between your accounts, allowing for efficient data exchange and trading activities. With OAuth binding, you can experience the convenience of a secure link without compromising on the integrity of your financial operations. Follow our comprehensive guide to effortlessly set up OAuth binding and unleash the full potential of AlgoBulls with Alpaca integration.</p>"},{"location":"member/brokers/connecting_alpaca.html#an-overview","title":"An overview","text":"<ul> <li>Navigate to the <code>Broking Details</code>page on the AlgoBulls platform.</li> <li>Here you will see all the brokers you have connected and their current statuses.</li> </ul>"},{"location":"member/brokers/connecting_alpaca.html#how-to-set-up-alpaca-for-trading-in-algobulls-with-oauth","title":"How to set up Alpaca for trading in AlgoBulls with OAuth?","text":"<p>Before this step, please make sure you have an Alpaca account. Click here to visit the Alpaca site for creating your account.</p>"},{"location":"member/brokers/connecting_alpaca.html#add-broker","title":"Add Broker","text":"<ul> <li>Click on <code>Add Broker</code>.</li> </ul>"},{"location":"member/brokers/connecting_alpaca.html#search-for-alpaca","title":"Search for Alpaca","text":"<ul> <li> <p>On the pop-up window that appears, you have a search bar for finding your desired broker.</p> </li> <li> <p>Type <code>Alpaca</code> in the search dialog box</p> </li> <li>Click on <code>Alpaca Paper (OAuth)</code> for choosing your Alpaca Paper Account.</li> <li>Click on <code>Alpaca Live (OAuth)</code> for choosing your Alpaca Live Account.</li> </ul> <p></p>"},{"location":"member/brokers/connecting_alpaca.html#provide-permission","title":"Provide Permission","text":"<ul> <li>After clicking on <code>Alpaca Paper (OAuth)</code> or <code>Alpaca Live (OAuth)</code>, you will be redirected to the Alpaca website for permission.</li> <li>You will be asked to login if you are not already logged in.</li> <li>On the dialog box that appears, click <code>Allow</code>. This will bind your Alpaca account with the AlgoBulls account.</li> </ul> <ul> <li>On successful authorisation, you will be redirected to the AlgoBulls platform and you will be able to see your broker on the <code>Broking Details</code>page.</li> </ul> <p>WARNING: We have discontinued the Non-OAuth method in accordance with Alpaca\u2019s recommendations. Please use the OAuth method for seamless integration and improved security. Be mindful of this update as you proceed with your integrations.</p>"},{"location":"member/brokers/non_auth_alpaca.html","title":"Non-OAuth","text":"<p>We have discontinued the Non-OAuth method in accordance with Alpaca\u2019s recommendations. Please use the OAuth method for seamless integration and improved security. Be mindful of this update as you proceed with your integrations.</p> <p>If you are seeking an alternative to OAuth, the Non-OAuth binding option provides a straightforward and reliable approach to connect your Alpaca broker with AlgoBulls. This method ensures a direct and effective link between your accounts, maintaining the simplicity and efficiency that defines the AlgoBulls experience. Discover the step-by-step process to establish Non-OAuth binding and gain immediate access to the powerful synergy between AlgoBulls and Alpaca, facilitating seamless trading and data synchronisation.</p>"},{"location":"member/brokers/non_auth_alpaca.html#how-to-set-up-alpaca-for-trading-in-algobulls-with-non-oauth","title":"How to set up Alpaca for trading in AlgoBulls with Non-OAuth?","text":"<p>Before trying to bind your broker, please make sure you have an Alpaca account or follow the steps given below to create your account.</p>"},{"location":"member/brokers/non_auth_alpaca.html#create-your-alpaca-account","title":"Create your Alpaca Account","text":"<ul> <li>Go the the official  Alpaca website</li> <li>Click on <code>sign up for free</code>.</li> <li>Follow the steps there and add your details to create the account.</li> </ul>"},{"location":"member/brokers/non_auth_alpaca.html#api-keys","title":"API keys","text":"<ul> <li>After creating your account, login to access the homepage.</li> </ul> <ul> <li>Click on <code>View API Keys</code> on the right side under the <code>Quick Trade</code> block.</li> </ul> <ul> <li>Click on regenerate to create <code>API</code> and <code>Secret</code> Key.</li> </ul> <ul> <li>On regenerating, you will get fresh API keys under the <code>Key</code> section and a secret key under the <code>Secret</code> section.</li> </ul>"},{"location":"member/brokers/non_auth_alpaca.html#add-broker","title":"Add Broker","text":"<ul> <li>Click on <code>Add Broker</code>.</li> </ul>"},{"location":"member/brokers/non_auth_alpaca.html#search-for-alpaca-non-oauth","title":"Search for Alpaca Non-OAuth","text":"<ul> <li>On the pop-up window that appears, you have a search bar for finding your desired broker..</li> <li>Type <code>Alpaca</code>in the search box and choose <code>Alpaca Non-OAuth</code> from the search results.</li> </ul>"},{"location":"member/brokers/non_auth_alpaca.html#provide-api-and-secret-key","title":"Provide API And Secret key","text":"<ul> <li>After clicking <code>Alpaca Non-OAuth</code>, you will see a dialog box requesting your API and Secret key.</li> <li>Enter your keys there and click <code>Confirm</code> to bind Alpaca with your AlgoBulls account.</li> </ul> <ul> <li>On successful authorisation, you will be redirected to the AlgoBulls platform and you will be able to see your broker on the <code>Broking Details</code> page.</li> </ul>"},{"location":"member/gen_ai/gen_ai_prompt_library.html","title":"Prompt Library for Phoenix Copilot","text":""},{"location":"member/gen_ai/gen_ai_prompt_library.html#here-are-some-prompts-for-creating-strategy-using-phoenix-copilot","title":"Here are some prompts for Creating Strategy using Phoenix Copilot","text":""},{"location":"member/gen_ai/gen_ai_prompt_library.html#moving-averages-ema-or-sma","title":"Moving Averages (EMA or SMA)","text":"<p><pre><code>Create a trading strategy which takes a BUY trade when EMA cuts SMA upwards and a SELL trade when EMA cuts SMA downwards. While placing a trade, if a previous position is open, it should be exited before placing the new trade\n</code></pre> <pre><code>Create a strategy which uses 2 EMAs of different time periods, and it BUYs when EMA of timeperiod 1 crosses the EMA of timeperiod 2 upwards and SELLs when EMA of timeperiod 1 crosses the EMA of timeperiod 2 downwards.\n</code></pre> <pre><code>Develop a strategy that generates a BUY signal when a shorter-term moving average crosses above an intermediate-term moving average, which then crosses above a longer-term moving average. Conversely, generate a SELL signal when the moving averages crossover in the opposite direction.\n</code></pre></p>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#relative-strength-index-rsi","title":"Relative Strength Index (RSI)","text":"<p><pre><code>Create a strategy that uses RSI indicator to give signals based on over bought or over sold conditions. If RSI is above 70, the strategy should generate a SELL signal and if it's below 30, it should generate a BUY signal\n</code></pre> <pre><code>Create a strategy using RSI of MACD-signal of close with fast MA period as X, slow MA period as Y and signal period as Z, which will SELL on crossing the upper band and BUY on crossing the lower band\n</code></pre> <pre><code>Create a trading strategy using RSI technical indicator\n</code></pre> <pre><code>Please help me with a strategy that uses RSI indicator to give signals based on over bought or over sold conditions. If RSI is above 70, the strategy should generate a SELL signal and if it's below 30, it should generate a BUY signal\n</code></pre></p>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#aroon","title":"Aroon","text":"<pre><code>Create a trading strategy that utilizes the Aroon indicator to generate signals based on overbought or oversold conditions. If the Aroon Up line crosses below the Aroon Down line and falls below 30, the strategy should generate a BUY signal. Conversely, if the Aroon Up line crosses above the Aroon Down line and rises above 70, the strategy should generate a SELL signal\n</code></pre>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#stochastic","title":"Stochastic","text":"<p><pre><code>Develop a trading strategy that incorporates the stochastic crossover to generate signals. When the %K line crosses above the %D line and both lines are below 30, the strategy should generate a BUY signal. Similarly, when the %K line crosses below the %D line and both lines are above 70, the strategy should generate a SELL signal\n</code></pre> <pre><code>Develop a strategy that generates a BUY signal when the Stochastic RSI indicator crosses above the oversold level (e.g., 20) and a SELL signal when it crosses below the overbought level (e.g., 80).\n</code></pre></p>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#bollinger-bands-bb","title":"Bollinger Bands (BB)","text":"<pre><code>Develop a strategy that generates a BUY signal when the price breaks above the upper Bollinger Band. Similarly, generate a SELL signal when the price breaks below the lower Bollinger Band\n</code></pre>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#atr-volatility","title":"ATR (Volatility)","text":"<pre><code>Develop a strategy that generates a BUY signal when the price surpasses a multiple of the ATR above a recent swing high, indicating increased volatility and potential upward momentum. Conversely, generate a SELL signal when the price drops below a multiple of the ATR below a recent swing low, indicating increased volatility and potential downward momentum.\n</code></pre>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#moving-average-convergence-divergence-macd","title":"Moving Average Convergence Divergence (MACD)","text":"<pre><code>Create a strategy that generates a BUY signal when the MACD histogram bars cross above the zero line and a SELL signal when the histogram bars cross below the zero line.\n</code></pre>"},{"location":"member/gen_ai/gen_ai_prompt_library.html#volume-weighted-average-price-vwap","title":"Volume Weighted Average Price (VWAP)","text":"<pre><code>Create a strategy that generates a BUY signal when the price rises above the VWAP line and a SELL signal when the price drops below the VWAP line, indicating potential shifts in supply and demand.\n</code></pre>"},{"location":"member/gen_ai/get_open_ai_keys.html","title":"OpenAI","text":""},{"location":"member/gen_ai/get_open_ai_keys.html#what-is-chat-gpt","title":"What is Chat-GPT ?","text":"<p>Generative AI involves creating new content using machine learning. A key method is GANs, where a generator creates data and a discriminator evaluates its realism. Another method is VAEs, which encode and decode data. ChatGPT is a specific AI model using generative text, like a conversation. It can understand context, answer questions, and generate text in a human-like manner. It finds use in various fields, from text generation to customer service, but also raises concerns about accuracy and responsible use.</p>"},{"location":"member/gen_ai/get_open_ai_keys.html#why-we-use-chat-gpt","title":"Why we use Chat-GPT ?","text":"<p>ChatGPT can assist in generating code for algorithmic trading strategies. It can translate strategy ideas into code snippets, provide coding guidance, and help with customization. However, human expertise is essential to validate, optimize, and manage risks in the complex realm of algorithmic trading.</p>"},{"location":"member/gen_ai/get_open_ai_keys.html#how-to-get-chat-gpt-api-keys","title":"How to get Chat-GPT API keys ?","text":"<p>To get your chat GPT API keys, you can watch the video given below</p> <p></p> <p>Or</p> <p>You can simply follow the steps here:</p>"},{"location":"member/gen_ai/get_open_ai_keys.html#step-1-loginsignup","title":"Step 1 - Login/Signup","text":"<p>Login or Signup in your open AI account, you can use gmail account, microsoft account or apple account to signup.  </p>"},{"location":"member/gen_ai/get_open_ai_keys.html#step-2-open-your-profile","title":"Step 2 - Open Your Profile","text":"<p>Once you are on the home page of your account, you can select your profile on top-right corner, and then select the option View API Keys from the drop-down menu. </p>"},{"location":"member/gen_ai/get_open_ai_keys.html#step-3-generate-new-secret-keys","title":"Step 3 - Generate New Secret Keys","text":"<p>Now that you are in the API Keys section, you will have to create a new key.  </p>"},{"location":"member/gen_ai/get_open_ai_keys.html#step-4-get-secrete-keys","title":"Step 4 - Get Secrete Keys","text":"<p>On clicking Create new secret key a pop-up will appear, where you can enter the key name, which is for your reference to remember multiple secret keys, once done, there will be another section where you can copy the open-ai secret keys.  </p>"},{"location":"member/gen_ai/get_open_ai_keys.html#step-5-ready-to-go-with-algobulls","title":"Step 5 - Ready to go with AlgoBulls","text":"<p>Once you have copied your secret key then you can now save it on your AlgoBulls Account for accessing the Phoenix Copilot feature to create a strategy, and there you go. To know how to save keys and start with generating strategies using Chat-GPT, click here Happy Trading !</p>"},{"location":"member/gen_ai/phoenix_copilot_introduction.html","title":"Introduction","text":"<p>If you have creative ideas in your mind and want to design an algotrading strategy, but you are new at coding, don't worry; we have got it covered using our Phoenix's Create Using AI feature which will help you to create trading strategies seamlessly.</p>"},{"location":"member/gen_ai/phoenix_copilot_introduction.html#enter-your-prompts","title":"Enter your Prompts","text":"<ol> <li>On the left-hand side you can see the previous sessions and chat history</li> <li>Right below you will see a button for Prompts Library which has all the sample prompts that would generate wonderful strategies, you can pick any of them, if needed you can even tailor those prompts and use them.</li> <li>To start a new session, click on New Session</li> <li>Enter your prompt or select from the sample prompts or take one prompt from the Prompts Library</li> <li>Click on the send button to start generating</li> </ol> <p>Please Note, It takes some time to generate the strategy as it processes a lot of data, so please be patient</p> <p></p> <p>Please Note</p> <p>Direct response code from gen-ai may not be 100% accurate, you will have to make sure that pythonic errors are not present. Also dont forget to configure your strategy parameters before executing the code.</p> <p>Modify your code ?</p> <p>To know more on how to code trading strategies and understand their format, click here. We also have in detail explanation for regular strategies as well as options strategies.</p>"},{"location":"member/gen_ai/phoenix_copilot_introduction.html#save-your-strategy","title":"Save your Strategy","text":"<ol> <li>Once it gives you the strategy, you can ask it to make more changes as per your need or you can save it directly.</li> <li>To save, click in the top right corner of the code, you can even copy the code if you want.</li> <li>Once you save it, it will redirect you to a new page where you have save your strategy and update its configuration parameters from the parameter settings.</li> <li>All your saved strategies can be viewed in My Coded Strategies section in Phoenix.    </li> </ol> <p>What's Next ?</p> <p>You can check out our strategy code structure and their respective formats for options and equity. Once you have verified that your strategy has no pythonic errors then you can move on to Configure and Execute your Strategy. </p>"},{"location":"member/pyalgotrad/brokerage.html","title":"Brokerage","text":""},{"location":"member/pyalgotrad/brokerage.html#brokerage","title":"Brokerage","text":"<ul> <li>Parameter Name: <code>broker_commission_percentage</code></li> <li>Type: float</li> <li>Default Value: None</li> <li>Definition: Brokerage is the fee charged by your broker for executing a trade. It's usually a percentage of the trade value. The <code>broker_commission_percentage</code> parameter lets you specify the brokerage fee as a percentage.</li> <li> <p>Explanation: Brokers charge a fee for executing your trades, and this fee is often a percentage of your trade amount. You can adjust this parameter to match the fees your broker charges.</p> </li> <li> <p>Parameter Name: <code>broker_commission_price</code></p> </li> <li>Type: float</li> <li>Default Value: None</li> <li>Definition: The <code>broker_commission_price</code> parameter allows you to specify a fixed broker fee per trade. This fee is added on top of the percentage-based brokerage. It accounts for any flat fees associated with your trades.</li> <li>Explanation: In addition to the percentage-based fees, some brokers charge a fixed fee for every trade. Use this parameter to include those fixed fees in your backtesting calculations.</li> </ul>"},{"location":"member/pyalgotrad/brokerage.html#how-to-use","title":"How to Use","text":"<p>To incorporate slippage and brokerage into your backtesting, simply pass the desired values for <code>slippage_percent</code>, <code>broker_commission_percentage</code>, and <code>broker_commission_price</code> when calling the <code>algobulls_connection.get_backtesting_report_pnl_table</code> function. These parameters help you account for real-world trading costs and execution variations, making your backtesting results more realistic.</p> <ul> <li>Note: When both <code>broker_commission_percentage</code> and <code>broker_commission_price</code> are provided, the function will automatically calculate the brokerage cost using both parameters and select the option that results in the lower brokerage cost. This ensures that you pay the minimum brokerage fees for your trades.</li> </ul>"},{"location":"member/pyalgotrad/brokerage.html#example","title":"Example","text":"<pre><code>import algobulls_connection\n# Fetch PnL data for a trading strategy with custom slippage and brokerage settings\npnl_table = algobulls_connection.get_backtesting_report_pnl_table(\n    strategy_code=\"your_strategy_code\",\n    show_all_rows=True,\n    force_fetch=True,\n    country='USA',\n    broker_commission_percentage=1.5,  # Adjust brokerage percentage as needed\n    broker_commission_price=0.3,      # Adjust fixed brokerage cost as needed\n    slippage_percent=4.5,             # Adjust slippage percentage as needed\n)\n# Print the PnL table with custom slippage and brokerage settings\nprint(pnl_table)\n</code></pre>"},{"location":"member/pyalgotrad/introduction.html","title":"pyalgotrading","text":""},{"location":"member/pyalgotrad/introduction.html#introduction","title":"Introduction","text":"<p>Welcome to the Pyalgotrading Documentation \u2013 your guide to practising and acquainting yourself with the pyalgotrading package. Pyalgotrading, built with Python, is an algorithmic trading library that empowers you to design and implement trading strategies on a variety of financial instruments, such as equities, futures, and options. To embark on your journey with Pyalgotrading, ensure you have an active AlgoBulls account, a platform designed for creating and testing trading strategies.</p>"},{"location":"member/pyalgotrad/introduction.html#key-features","title":"Key Features","text":"<ul> <li>Powered by the AlgoBulls Platform</li> <li>Everything related to Algorithmic Trading Strategies!<ul> <li>Free pool of Strategies are available at pyalgostrategypool!</li> <li>Create &amp; upload strategies easily on the cloud</li> <li>Support for all 150+ Technical Indicators provided by TA-Lib</li> <li>Support for multiple candlesticks patterns - Japanese OHLC, Renko, Heikin-Ashi, Linebreak</li> <li>Support for multiple candle intervals - 1 minute, 3 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 1 day.</li> <li>Support for Regular Orders, Bracket Orders and Cover Orders</li> <li>Support for MARKET, LIMIT, STOPLOSS-LIMIT, STOPLOSS-MARKET orders</li> <li>Support for INTRADAY and DELIVERY orders</li> </ul> </li> <li>Support for Backtesting</li> <li>Support for Paper Trading</li> <li>Support for Live Trading / Real Trading</li> <li>Support for multiple brokers for Live Trading. Check list of supported brokers here.</li> <li>Real-time Logs for Backtesting, Paper Trading, Live Trading</li> <li>Multiple real-time Reports available for Backtesting, Paper Trading and Live Trading:<ul> <li>Profit-&amp;-Loss report (P&amp;L report)</li> <li>Statistics Report</li> <li>Order History Log for each order with state transitions &amp; timestamps</li> <li>Detailed analytics with charts</li> </ul> </li> <li>Support for calculating Slippage</li> <li>Support for calculating Brokerage</li> <li>Support for importing external P&amp;L table and generating analytics on the same</li> <li>Plot Candlestick charts using plotly.py</li> </ul> <p>Backtesting, Paper Trading and Real Trading can be performed on the same strategy code base!</p> <p>Prerequisites</p> <p>Before you commence development, make sure to establish your workspace and gather all prerequisites as outlined here.</p>"},{"location":"member/pyalgotrad/introduction.html#support-seeking-assistance","title":"Support / Seeking Assistance","text":"<ul> <li>Bug Reporting / New Feature Request: Create a new issue on GitHub.</li> <li>Engage in Discussion: Join fellow developers on the discussion forum.</li> <li>Discussion Community: Join fellow algotrading ninjas on the discussion Slack</li> <li>Additional Support: For further help, contact support@algobulls.com.</li> </ul>"},{"location":"member/pyalgotrad/introduction.html#overview","title":"Overview","text":"<ol> <li> <p>Check out the basic structure of a strategy: Before coding your strategy, refer to the basic structure guide provided by the Pyalgotrading package. This will help you understand the trading strategy methods and flow.</p> </li> <li> <p>Code your own simple strategy using the pyalgotrading package: Use your Python IDE to code your trading strategy using the pyalgotrading package. You can also use ready-made strategies from the pyalgostrategypool package if you prefer not to code your own.</p> </li> <li> <p>Upload your strategy to the platform: Upon coding your strategy, upload it to the AlgoBulls platform by crafting a new strategy and uploading the corresponding file.</p> </li> <li> <p>Run Backtest / Paper Trade / Real Trade with your strategy:  Once uploaded, initiate backtests, paper trades, or real trades on the AlgoBulls platform to evaluate its performance.</p> </li> <li> <p>Retrieve real-time logs, review reports and stats, and inspect order history:Monitor your strategy's performance by fetching runtime logs, examining reports and statistics, and reviewing your order history to track executed trades.</p> </li> <li> <p>Reach out to AlgoBulls Support for any queries: If you encounter issues during the tutorial, contact the AlgoBulls Support team for assistance.</p> </li> </ol>"},{"location":"member/pyalgotrad/introduction.html#conclusion","title":"Conclusion","text":"<p>This documentation serves as your launchpad into the Pyalgotrading package and the creation of your trading strategies. It also steers you through the process of uploading, executing, and monitoring strategies on the AlgoBulls platform. Our goal is to equip you with the expertise needed to craft effective trading strategies using Pyalgotrading.</p>"},{"location":"member/pyalgotrad/introduction.html#contribution-guidelines","title":"Contribution Guidelines","text":"<ol> <li>Fork this project to your account.</li> <li>Create a branch for the change you intend to make.</li> <li>Make your changes to your fork.</li> <li>Send a pull request from your fork\u2019s branch to our <code>master</code> branch.</li> </ol>"},{"location":"member/pyalgotrad/prerequisites.html","title":"Setup your Workspace","text":""},{"location":"member/pyalgotrad/prerequisites.html#prerequisites","title":"Prerequisites","text":"<p>You will need the following to start with Pyalgotrading:</p>"},{"location":"member/pyalgotrad/prerequisites.html#algobulls-account","title":"AlgoBulls Account","text":"<p>To upload and test your strategies, you will need this account. You can create your account for FREE on the AlgoBulls website.</p>"},{"location":"member/pyalgotrad/prerequisites.html#developer-key","title":"Developer Key","text":"<p>To access the features, you will need a developer key. The key can be obtained as follows:</p> <ul> <li>Step 1: Activate the Advanced Phoenix Plan from the Pricing menu. </li> <li>Step 2: Get the Developer Key from the Settings section. </li> </ul> <p>Please Note</p> <p>For security reasons, the developer key will get reset every time you log out from your AlgoBulls account.</p> <p>Once you have the developer key, you can access the AlgoBulls platform using <code>pyalgotrading</code> functions.   </p>"},{"location":"member/pyalgotrad/prerequisites.html#python-310","title":"Python 3.10+","text":"<p>The Pyalgotrading platform can run all strategies that conform to Python 3.8 or higher. However, we recommend Python 3.10 or higher. </p> <p>Python Tips</p> <ul> <li>It is a good idea to set up a virtual environment first while installing Python 3.10.</li> <li>Once Python is installed, most packages are easily installed in your venv using <code>pip install</code> command</li> </ul>"},{"location":"member/pyalgotrad/prerequisites.html#pyalgotrading-package","title":"Pyalgotrading Package","text":"<p>To create and execute your fully automated trading strategies, you only need to install <code>pyalgotrading</code>. You can install the <code>pyalgotrading</code> package using the following command:     <pre><code>pip install pyalgotrading\n</code></pre></p>"},{"location":"member/pyalgotrad/prerequisites.html#jupyter-notebook","title":"Jupyter Notebook","text":"<p>You will use a Jupyter Notebook to connect to the AlgoBulls platform. Using the notebook, you can upload the strategy, test your strategy (Backtesting, Paper Trading, or Real Trading), and fetch logs.        Install Jupyter Notebook using the following command: <pre><code>pip install jupyter\n</code></pre></p> <p>Pro Tip</p> <p>If you are an experienced Pyalgotrading user, Jupyter Notebook might not be necessary. You can directly integrate it into your application.</p>"},{"location":"member/pyalgotrad/prerequisites.html#enhancing-productivity","title":"Enhancing Productivity","text":"<p>For enhancing your productivity while building and executing strategies using Pyalgotrading, you can make use of Python IDEs of your choice, such as:</p> <ul> <li>PyCharm</li> <li>VS Code</li> </ul>"},{"location":"member/pyalgotrad/programexample.html","title":"Create your Strategy","text":""},{"location":"member/pyalgotrad/programexample.html#previously","title":"Previously...","text":"<p>You have covered the basic code structure of a strategy.</p>"},{"location":"member/pyalgotrad/programexample.html#now","title":"Now...","text":"<p>You can either follow this page to create a strategy, or you can pick up a ready strategy (shown below) and move to the next page. </p>"},{"location":"member/pyalgotrad/programexample.html#before-you-start","title":"Before you start...","text":"<p>If you want to use a ready strategy from the pyalgostrategypool package, then you can directly jump to the Upload section. </p>"},{"location":"member/pyalgotrad/programexample.html#lets-start","title":"Let's Start...","text":"<p>Follow the steps given below to create a new strategy of your own.</p> <p>Create a python file called <code>strategy_sma_regular_order.py</code>.</p> <p>You will add the following code snippets into the file and then save it.</p>"},{"location":"member/pyalgotrad/programexample.html#import-statements","title":"Import statements","text":"<pre><code>from pyalgotrading.strategy.strategy_base import StrategyBase\nfrom pyalgotrading.constants import *\n</code></pre>"},{"location":"member/pyalgotrad/programexample.html#create-the-class-strategysmaregularorder-and-subclass-it-from-strategybase","title":"Create the class <code>StrategySMARegularOrder</code> and subclass it from <code>StrategyBase</code>","text":"<p><pre><code>class StrategySMARegularOrder(StrategyBase):\n</code></pre> Now you can add the methods mentioned in the structure inside the class. First you can add the <code>__init__</code> and the <code>initialize</code> methods.</p>"},{"location":"member/pyalgotrad/programexample.html#constructor-def-__init__","title":"Constructor: <code>def __init__()</code>","text":"<pre><code>def __init__(self, *args, **kwargs):\n    name = 'SMA Regular Order Strategy'\n    super().__init__(*args, **kwargs)\n\n    self.timeperiod_x = self.strategy_parameters['timeperiod1']\n    self.timeperiod_y = self.strategy_parameters['timeperiod2']\n\n    self.main_order = None\n</code></pre> <p>The <code>init</code> method does the following:</p> <ol> <li><code>name</code> - variable which should store the name of your strategy</li> <li><code>super()</code> - Calls the constructor of the superclass.</li> <li><code>self.strategy_parameters</code> - Catches the parameters and saves them for local use - When you will submit a testing job for your SMA strategy,  you will pass parameters that will be used inside the strategy.  For SMA, we are calculating crossover for 2 SMA timeperiod values, example 5 and 12.  These 2 parameters will be caught by <code>self.strategy_parameters</code> and stored for local use in <code>self.timeperiod1</code> and <code>self.timeperiod2</code>.</li> <li><code>self.main_order</code> - Create an object that manages orders for you throughout the strategy.</li> </ol> <p>The <code>init</code> method is specific to Python's internal workings, and it is preceded and succeeded by double underscores ( _ _ ) joined together.</p>"},{"location":"member/pyalgotrad/programexample.html#def-initialize","title":"<code>def initialize()</code>","text":"<pre><code>def initialize(self):\n    self.main_order = {}\n</code></pre> <p>The <code>initialize</code> method sets the <code>self.main_order</code> as an empty dictionary. This method is called at the start of every trading day.</p> <p>For instance, say you are submitting a backtesting job for 5 previous days starting at 10:30 every day, then the <code>initialize</code> method will be called every day for 5 days at 10:30.</p> <p>Now add the two static methods, <code>name</code> and <code>versions_supprted</code>.</p>"},{"location":"member/pyalgotrad/programexample.html#def-name-optional","title":"<code>def name()</code> (optional)","text":"<p>If the <code>name</code> variable is defined in <code>__init__()</code>, this function is not needed. <pre><code>@staticmethod\ndef name():\n    return 'SMA Regular Order Strategy'\n</code></pre> The name should be unique in your collection of strategies.</p>"},{"location":"member/pyalgotrad/programexample.html#def-versions_supported-optional","title":"<code>def versions_supported()</code> (optional)","text":"<p>not required it will take the latest version of AlgoBullsEngine by default <pre><code>@staticmethod\ndef versions_supported():\n    return AlgoBullsEngineVersion.VERSION_3_2_0\n</code></pre> Mark both the above methods as <code>@staticmethod</code>.</p> <p>The <code>versions_supported</code> method does the following:</p> <ol> <li>It notifies the AlgoBulls platform that the strategy is working correctly for the platform version 3.2.0</li> <li>Since the platform will be constantly upgraded to incorporate new features and improve efficiency, the version may change.</li> <li>If the version changes, and if you submit a job for this strategy, then the AlgoBulls platform will spawn a server having version 3.2.0 for your strategy.</li> <li>Having this method ensures that the AlgoBulls platform always provides the correct environment for your strategy.</li> </ol>"},{"location":"member/pyalgotrad/programexample.html#def-strategy_select_instruments_for_entry","title":"<code>def strategy_select_instruments_for_entry()</code>","text":"<pre><code>def strategy_select_instruments_for_entry(self, candle, instruments_bucket):\n\n    instruments = []\n    meta = []\n\n    for instrument in instruments_bucket:\n        crossover_value = self.get_crossover_value(instrument)\n        if crossover_value == 1:\n            instruments.append(instrument)\n            meta.append({'action': 'BUY'})\n        elif crossover_value == -1:\n            if self.strategy_mode is StrategyMode.INTRADAY:\n                instruments.append(instrument)\n                meta.append({'action': 'SELL'})\n\n    return instruments, meta\n</code></pre> <p>The <code>strategy_select_instruments_for_entry</code> method does the following:</p> <ol> <li><code>instruments</code> and <code>meta</code> - Creates 2 empty lists that will be used to pass the selected instruments and additional information about them respectively.</li> <li>The Loop - The loop will iterate over each instrument name passed (while submitting the job) and will decide whether to set an entry position or not for it.</li> <li><code>crossover_value</code> - The crossover value is calculated and stored here. Crossover values are interpreted as:<ol> <li>Value 1 - Cut upwards</li> <li>Value -1 - Cut downwards</li> <li>Value 0 - No crossover</li> </ol> </li> <li>If conditions - If the crossover value is 1, then the instrument is selected for entry position, with the position as 'BUY'. If the crossover value is -1, then the instrument is selected for entry position, with the position as 'SELL'. The selected instrument is appended to the <code>instruments</code>, and the associated action (BUY/SELL) is appended to the <code>meta</code>.</li> <li><code>instruments</code> and <code>meta</code> - Both the lists (whether populated or empty) are returned to the platform for further actions.</li> </ol> <p>Note</p> <ul> <li>SELL Entry positions are allowed only if the strategy is running for INTRADAY. DELIVERY strategies do not allow SELL as entry positions. This is taken care of in the <code>elif</code> part.</li> <li>The <code>strategy_select_instruments_for_entry</code> method is called once for every candle time. For Instance, if you submit a job with the candle time as 15 minutes, then this method will be called once for every 15 minute candle.</li> <li>The actual Entry position (BUY/SELL) is not entered here. Here, only the instrument is selected based on the crossover value with the proper action mentioned in the <code>meta</code>. The Entry position will be taken in the next method below.</li> <li>The <code>meta</code> contains a very versatile dictionary object. You may use it to pass any other additional information that you wish. </li> </ul>"},{"location":"member/pyalgotrad/programexample.html#def-strategy_enter_position","title":"<code>def strategy_enter_position()</code>","text":"<pre><code>def strategy_enter_position(self, candle, instrument, sideband_info):\n    if sideband_info['action'] == 'BUY':\n        qty = self.number_of_lots * instrument.lot_size\n        self.main_order[instrument] = \\\n            self.broker.BuyOrderRegular(instrument=instrument,\n                order_code=BrokerOrderCodeConstants.INTRADAY,\n                order_variety=BrokerOrderVarietyConstants.MARKET,\n                quantity=qty)\n    elif sideband_info['action'] == 'SELL':\n        qty = self.number_of_lots * instrument.lot_size\n        self.main_order[instrument] = \\\n            self.broker.SellOrderRegular(instrument=instrument,\n                 order_code=BrokerOrderCodeConstants.INTRADAY,\n                 order_variety=BrokerOrderVarietyConstants.MARKET,\n                 quantity=qty)\n    else:\n        raise SystemExit(f'Got invalid sideband_info value: {sideband_info}')\n\n    return self.main_order[instrument]\n</code></pre>"},{"location":"member/pyalgotrad/programexample.html#or","title":"or","text":"<pre><code>def strategy_enter_position(self, candle, instrument, meta):\n    self.main_order_map[instrument] = _ = self.broker.OrderRegular(\n        intrument=instrument,                           \n        order_transaction_type=meta['action'],              # 'BUY' or 'SELL'\n        quantity=self.number_of_lots * instrument.lot_size, # number of lots (int)\n        price=None,\n        trigger_price=None\n    )\n    return _\n</code></pre> <p>The <code>strategy_enter_position</code> method does the following:</p> <ol> <li>If conditions - The conditions read the action from the <code>sideband_info</code> and perform the required action (BUY/SELL).</li> <li><code>qty</code> - The quantity is calculated and stored here. The number of lots will be passed by you as a parameter while submitting a job. The parameter will be caught in <code>self.number_of_lots</code>. The instrument object has the 'lot size', which you can retrieve using <code>instrument.lot_size</code>. You can then use the formula as shown in the code to calculate the quantity.</li> <li><code>OrderRegular</code>,<code>BuyOrderRegular</code> and <code>SellOrderRegular</code> - These execute the required action. You need to pass the instrument, order code, order variety and the quantity values.<ul> <li><code>instrument</code> - the instrument on which the BUY/SELL action will be performed.</li> <li><code>order_code</code> - whether the order is for INTRADAY or DELIVERY. Possible values are:<ul> <li><code>BrokerOrderCodeConstants.INTRADAY</code></li> <li><code>BrokerOrderCodeConstants.DELIVERY</code></li> <li><code>BrokerOrderCodeConstants.DELIVERY_T1</code></li> <li><code>BrokerOrderCodeConstants.DELIVERY_T2</code></li> </ul> </li> <li><code>order_variety</code> - the type of order variety. Possible values are:<ul> <li><code>BrokerOrderVarietyConstants.MARKET</code></li> <li><code>BrokerOrderVarietyConstants.LIMIT</code></li> <li><code>BrokerOrderVarietyConstants.STOPLOSS_MARKET</code></li> <li><code>BrokerOrderVarietyConstants.STOPLOSS_LIMIT</code></li> </ul> </li> <li><code>qty</code> - the quantity to BUY/SELL.</li> </ul> </li> <li><code>self.main_order</code> - The main order (for that particular instrument) is now populated (BUY OR SELL) and is returned to the platform for further actions.</li> </ol> <p>You can also punch Bracket Orders instead of Regular Orders. A typical BUY Bracket Order will look like this: <pre><code>qty = self.number_of_lots * instrument.lot_size\nltp = self.broker.get_ltp(instrument)\nself.main_order[instrument] = \\\n            self.broker.BuyOrderBracket(instrument=instrument,\n                order_code=BrokerOrderCodeConstants.INTRADAY,\n                order_variety=BrokerOrderVarietyConstants.LIMIT,\n                quantity=qty,\n                price=ltp,\n                stoploss_trigger=ltp - (ltp * self.stoploss),\n                target_trigger=ltp + (ltp * self.target),\n                trailing_stoploss_trigger=ltp * self.trailing_stoploss)\n</code></pre></p> <p>The additional parameters are:</p> <ul> <li><code>price</code> - If you want to BUY at the market price (Last Traded Price) or LTP, then just fetch the LTP using <code>get_ltp</code> as shown in the code above. Store the value in <code>ltp</code> and pass it to <code>price</code>.</li> <li><code>stoploss_trigger</code>, <code>target_trigger</code> and <code>trailing_stoploss_trigger</code> - You can calculate these using the <code>ltp</code> and the values you will pass through  the job that you will submit. The parameters will be caught as <code>self.stoploss</code>, <code>self.target</code> and <code>self.trailing_stoploss</code>.</li> </ul> <p>Note</p> <ul> <li>If you plan to use Bracket Order instead of Regular Orders, then create a separate Python file for it, say <code>strategy_sma_bracket_order.py</code>.  You can also change the class name as <code>StrategySMABracketOrder</code>. There will be changes in the entry and exit methods also.</li> <li>The <code>strategy_enter_position</code> method is called once for every instrument. For instance, you want to run this strategy for 5 instruments. Say that the <code>strategy_select_instruments_for_entry</code> method selects 3 instruments for ENTRY positions (BUY/SELL). Then, the <code>strategy_enter_position</code> method will be called thrice, once for each instrument respectively within the candle time frame (say, 15 minutes). </li> </ul>"},{"location":"member/pyalgotrad/programexample.html#def-strategy_select_instruments_for_exit","title":"<code>def strategy_select_instruments_for_exit()</code>","text":"<pre><code>def strategy_select_instruments_for_exit(self, candle, instruments_bucket):\n    instruments = []\n    meta = []\n\n    for instrument in instruments_bucket:\n        if self.main_order.get(instrument) is not None:\n            crossover_value = self.get_crossover_value(instrument)\n            if crossover_value in [1, -1]:\n                instruments.append(instrument)\n                meta.append({'action': 'EXIT'})\n    return instruments, meta\n</code></pre> <p>The <code>strategy_select_instruments_for_exit</code> method does the following:</p> <ol> <li><code>instruments</code> and <code>meta</code> - Creates 2 empty lists that will be used to pass the selected instruments and additional information about them respectively.</li> <li>The Loop - The loop will iterate over each instrument name passed (which are in Entry position (BUY/SELL)) and will decide whether to set an exit position or not for it.</li> <li>If condition - The exit steps are executed only if the instrument is holding at an ENTRY position (BUY/SELL). You can do this by checking if the <code>self.main_order</code> object is <code>None</code> or not, and proceed only if it is not <code>None</code>. </li> <li><code>crossover_value</code> - The crossover value is calculated and stored here. Crossover values are interpreted as:<ol> <li>Value 1 - Cut upwards</li> <li>Value -1 - Cut downwards</li> <li>Value 0 - No crossover</li> </ol> </li> <li>If condition - If the crossover value is 1 or -1, then the instrument is selected for exit position. The selected instrument is appended to the <code>instruments</code>, and the associated action (EXIT) is appended to the <code>meta</code>.</li> <li><code>instruments</code> and <code>meta</code> - Both the lists (whether populated or empty) are returned to the platform for further actions.</li> </ol> <p>Note</p> <ul> <li>The actual Exit position (BUY/SELL) is not entered here. Here, only the instrument is selected based on the crossover value with the proper action mentioned in the <code>meta</code>. The Exit position will be taken in the next method below.</li> <li>The <code>meta</code> contains a very versatile dictionary object. You may use it to pass any other additional information that you wish.</li> <li>Whenever a new trading day starts, the <code>strategy_select_instruments_for_exit</code> is called first. This is very important for DELIVERY strategies. Many instruments might be holding in an Entry Position at the end of the previous trading day, and they might be eligible for exit at the start of the new trading day.  </li> </ul>"},{"location":"member/pyalgotrad/programexample.html#def-strategy_exit_position","title":"<code>def strategy_exit_position()</code>","text":"<pre><code>def strategy_exit_position(self, candle, instrument, sideband_info):\n    if sideband_info['action'] == 'EXIT':\n        self.main_order[instrument].exit_position()\n        self.main_order[instrument] = None\n        return True\n\n    return False\n</code></pre> <p>The <code>strategy_exit_position</code> method does the following:</p> <ol> <li>If condition - checks whether the appropriate action is set in the <code>sideband_info</code>.</li> <li><code>self.main_order</code> - calls <code>exit_position</code> method for the particular main order of the instrument. If the Entry Position was BUY, then the exit position is automatically taken as SELL and vice versa. The platform takes care of this automatically.</li> <li><code>self.main_order</code> - set it to <code>None</code>, as the order has been exited and no longer holds anything.</li> <li>Return values - returns <code>True</code> to the platform if the exit steps were performed, else return <code>False</code>.</li> </ol>"},{"location":"member/pyalgotrad/programexample.html#def-get_crossover_value","title":"<code>def get_crossover_value()</code>","text":"<pre><code>def get_crossover_value(self, instrument):\n    hist_data = self.get_historical_data(instrument)\n    sma_x = talib.SMA(hist_data['close'], timeperiod=self.timeperiod_x)\n    sma_y = talib.SMA(hist_data['close'], timeperiod=self.timeperiod_y)\n    crossover_value = self.utils.crossover(sma_x, sma_y)\n    return crossover_value\n</code></pre> <p>The <code>get_crossover_value</code> method does the following:</p> <ol> <li><code>hist_data</code> - The historical data for the instrument is fetched using the <code>get_historical_data</code> method and stored here. The data is in the form of a table (Pandas DataFrame) having the following columns:<ul> <li><code>timestamp</code> - the data and time when the data was measured</li> <li><code>volume</code> - the volume of that instrument</li> <li><code>open</code>, <code>high</code>, <code>low</code> and <code>close</code> - the OHLC values of the instrument</li> <li><code>oi</code> - the Open Interest of that instrument</li> </ul> </li> <li><code>sma_x</code> and <code>sma_y</code> - the SMA function from the <code>talib</code> package is used to calculate the Moving Average for both SMA time-periods. The candle close value is used for calculations, i.e. <code>hist_data['close']</code>.</li> <li><code>crossover_value</code> - calculates the crossover value using the <code>crossover</code> method from the <code>utils</code> package.</li> <li>Return value - return the crossover value to the caller method.</li> </ol> <p>Note</p> <ul> <li>The order of values passed to the <code>crossover</code> method of the <code>utils</code> package is very important.</li> <li>Example: you have 2 SMA values, 5 and 12. The strategy describes that there should be an BUY Entry Position when SMA(5) cuts SMA(12) upwards (crossover value should be 1).</li> <li>In this case, if you mistakenly pass SMA(12) value first and SMA(5) value next to the <code>crossover</code> function, the answer you will get is -1 (Cut downwards).</li> <li>Though, the crossover value is correct, the strategy is expecting to BUY at crossover 1 as per the code, which will not work now.</li> <li>Therefore, the strategy will work correctly only if you pass SMA(5) first and then SMA(12) to the <code>crossover</code> function, thus making the order of parameters passed an important point to be aware of, while coding the strategy.</li> </ul>"},{"location":"member/pyalgotrad/programexample.html#whats-next","title":"What's Next...","text":"<p>Next, you upload the strategy into your AlgoBulls account.</p>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html","title":"Pyalgotrading Analytics","text":""},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#metric-values-and-statistics","title":"Metric Values and Statistics","text":""},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#cumulative-returns","title":"Cumulative Returns","text":"<ul> <li>The Cumulative Returns chart illustrates how our strategy's returns value has evolved over time in percentage. </li> <li>Positive values indicate gains, while negatives reflect losses. Bigger positive returns are more favourable. </li> <li>Keep in mind, this chart focuses on gains and losses, excluding risk and timing considerations.</li> <li>There are 2 sub categories of cumulative returns chart depending on the scale we are using. One is normal scaled and other is log scaled </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#end-of-year-returns-eoy","title":"End of Year Returns (EoY)","text":"<ul> <li>The End of Year Returns chart showcases our strategy's annual performance as a percentage. </li> <li>It quantifies its overall performance, considering gains or losses throughout each year.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#distributions-of-monthly-returns-histogram","title":"Distributions of Monthly Returns (Histogram)","text":"<ul> <li>In the Monthly Returns Distribution Histogram, we see the frequency distribution of different levels of returns over consecutive months. </li> <li>This histogram helps us understand the range and patterns in monthly returns, shedding light on our strategy's volatility and performance trends.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#daily-returns","title":"Daily Returns","text":"<ul> <li>The Daily Returns Chart portrays the percentage change in our strategy's returns between trading days. </li> <li>It provides insights into short-term volatility, trend analysis, and risk assessment.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#rolling-volatility-6-months","title":"Rolling Volatility (6 months)","text":"<ul> <li>A Rolling Volatility (6 months) Plot showcases the changing volatility of an investment over time using a rolling window of six months. </li> <li>This plot reveals how the investment's price fluctuations vary as the window moves across the dataset. </li> <li>It provides insights into short-term volatility patterns, helping investors understand how the investment's risk level evolves in response to different market conditions.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#rolling-sharpe-6-months","title":"Rolling Sharpe (6 months)","text":"<ul> <li>A Rolling Sharpe (6 months) Plot illustrates the dynamic changes in the Sharpe ratio over time using a rolling window of six months. </li> <li>The plot shows how the risk-adjusted performance of an investment fluctuates as the window moves through the dataset. </li> <li>This visualization helps investors understand how the Sharpe ratio varies with changing market conditions and provides insights into the investment's consistency and risk-return trade-offs over short-term periods.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#rolling-sortino-6-months","title":"Rolling Sortino (6 months)","text":"<ul> <li>A Rolling Sortino (6 months) Plot visualizes the variation in the Sortino ratio over time using a rolling window of six months. </li> <li>This plot demonstrates how the investment's risk-adjusted performance, considering only downside volatility, changes as the window progresses through the data. </li> <li>It offers insights into how the Sortino ratio evolves with market conditions, helping investors assess the investment's ability to generate favorable risk-adjusted returns over short-term intervals.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#worst-5-drawdown-periods","title":"Worst 5 Drawdown Periods","text":"<ul> <li>A Worst 5 Drawdown Periods plot displays the top five periods during which the strategy experienced the largest declines from peak to trough. </li> <li>This visualization helps strategists understand the most significant loss-making episodes in the strategy's run. </li> <li>It shows the magnitude and duration of these drawdowns, providing insights into the strategy's risk and potential vulnerabilities.     </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#underwater-plot","title":"Underwater Plot","text":"<ul> <li>The Underwater Plot visually narrates our strategy's performance concerning its past peaks. </li> <li>It showcases how much our returns value has dropped from its highest point over time. </li> <li>This aids in visualising periods of drawdown and recovery, offering insights into historical risk and resilience.    </li> </ul>"},{"location":"member/pyalgotrad/pyalgotrading_analytics.html#monthly-returns-heatmap","title":"Monthly Returns (Heatmap)","text":"<ul> <li>The Monthly Returns Heatmap offers a colour-coded view of our strategy's performance across months. </li> <li>Shades of green indicate positive returns, while shades of red signify losses. </li> <li>This visual tool helps spot trends and patterns, aiding in identifying strong and weak performance periods.    </li> </ul>"},{"location":"member/pyalgotrad/python-build-view-results.html","title":"Python build view results","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#how-to-view-the-results","title":"How to view the Results?","text":"<p>Once you start the strategy, it may take a while for it to complete the execution. You can switch to the Analytics tab after you run your strategy. Even if the strategy execution is not complete, you will still see intermediate results.</p> <p>Analytics: In the analytics section, you can view a strategy\u2019s Stats &amp; various other metrics in the form of graphs like P&amp;L.</p>"},{"location":"member/pyalgotrad/python-build-view-results.html#stats","title":"Stats","text":"<p>In this section you can see the total returns, sharpe ratio, sortino ratio, volatility, Max Drawdown, Total wins or Loses, Total short or long trades, hit ratio, number of trades, average trades per day, max profit, max loss, average profit per winning trade, average loss per losing trade. </p>"},{"location":"member/pyalgotrad/python-build-view-results.html#cumulative-returns","title":"Cumulative Returns","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#profit-loss-currency-or","title":"Profit &amp; Loss (Currency or %)","text":"<p>The trade by trade P&amp;L in Currency or Percentage. </p>"},{"location":"member/pyalgotrad/python-build-view-results.html#end-of-year-returns-plot","title":"End of Year Returns Plot (%)","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#monthly-returns-histogram","title":"Monthly Returns Histogram (%)","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#monthly-returns-heatmap","title":"Monthly Returns Heatmap (%)","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#daily-returns","title":"Daily Returns (%)","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#underwater-drawdown-plot","title":"Underwater Drawdown Plot (%)","text":""},{"location":"member/pyalgotrad/python-build-view-results.html#pl-book","title":"P&amp;L Book","text":"<p>View detailed trade by trade report. Premium users can analyze this data in the form of heatmaps for Gross Profit &amp; Loss, Trading Volume &amp; Total number of Trades. </p>"},{"location":"member/pyalgotrad/python-build-view-results.html#user-log","title":"User Log","text":"<p>Real-time logs from strategy execution are displayed in this section. Use these logs to debug your strategy\u2019s behavior and performance. </p>"},{"location":"member/pyalgotrad/python-build-view-results.html#order-history","title":"Order History","text":"<p>View the order state transition for every order placed by your strategy in-depth. </p>"},{"location":"member/pyalgotrad/select.html","title":"Select your Strategy","text":""},{"location":"member/pyalgotrad/select.html#previously","title":"Previously...","text":"<p>You have uploaded or saved a strategy by:</p> <ul> <li>Your strategy is already uploaded on the AlgoBulls account and you want to search or select it</li> </ul> <p>OR</p> <ul> <li>You have saved the strategy from the AlgoBulls Website</li> </ul>"},{"location":"member/pyalgotrad/select.html#now","title":"Now...","text":"<p>You are now ready to select or import your strategy from your AlgoBulls account for Backtesting, Paper Trading and/or Real Trading. </p>"},{"location":"member/pyalgotrad/select.html#before-you-start","title":"Before you start...","text":"<ul> <li>Make sure you have an active working AlgoBulls account ready to go!</li> <li>Open a Jupyter Notebook.</li> <li>If you have coded the strategy yourself and not used a ready strategy from the pyalgostrategypool package, then make sure your strategy file (.py) and the Jupyter Notebook are in the same folder. </li> </ul>"},{"location":"member/pyalgotrad/select.html#lets-start","title":"Let's Start...","text":"<p>Run the following code snippets into the Jupyter Notebook one by one (or all together).</p>"},{"location":"member/pyalgotrad/select.html#import-statements","title":"Import statements","text":"<pre><code>import inspect\nfrom pyalgotrading.algobulls import AlgoBullsConnection\n</code></pre>"},{"location":"member/pyalgotrad/select.html#import-the-strategy-class","title":"Import the strategy class","text":"<p>Perform the below step either to import a ready strategy OR to import your own created strategy.</p> <ul> <li> <p>Import a ready strategy <pre><code>from pyalgostrategypool.strategy_ema_regular_order import StrategyEMARegularOrder\n</code></pre></p> </li> <li> <p>Import your own strategy <pre><code>from strategy_sma_regular_order import StrategySMARegularOrder\n</code></pre></p> </li> </ul>"},{"location":"member/pyalgotrad/select.html#establish-a-connection-to-the-algobulls-platform","title":"Establish a connection to the AlgoBulls Platform","text":"<p><pre><code>algobulls_connection = AlgoBullsConnection()\nalgobulls_connection.get_authorization_url()\n</code></pre> The output of the above step is:</p> <p><code>Please login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login</code></p> <p>Get Developer Key</p> <p>You will need to log in to your AlgoBulls account and fetch the access token from:  (See How) Settings -&gt; General -&gt; Developer Options </p> <p>Once you have the access token, set it in the code as shown here:</p> <p><pre><code>algobulls_connection.set_access_token('4365817b795770ea31040a21ad29c8e78b63ad88')\n</code></pre> Replace the token you have copied with the token in the code above.</p>"},{"location":"member/pyalgotrad/select.html#view-all-the-strategies-in-your-algobulls-account","title":"View all the strategies in your AlgoBulls Account","text":"<p>You can view all the strategy saved on your AlgoBulls account. <pre><code>all_strategies_df = algobulls_connection.get_all_strategies()\nprint(all_strategies_df)\n</code></pre></p>"},{"location":"member/pyalgotrad/select.html#search-your-strategy","title":"Search your Strategy","text":"<ul> <li>Search your strategy using <code>strategy name</code>. Make sure you have the strategy with given name in your AlgoBulls Account.      <pre><code>    strategy_name = 'Exponential Moving Averages Crossover'\n    strategy_code, strategy_name = all_strategies_df.loc[all_strategies_df['strategyName'] == strategy_name].iloc[0]        \n</code></pre></li> <li>Search your strategy using <code>strategy code</code>. Make sure you have the strategy with given code in your AlgoBulls Account.      <pre><code>strategy_code = 'afd6214c5db94dbeae7502e861fa4ffc'\nstrategycode, strategyname = all_strategies_df.loc[all_strategies_df['strategyCode'] == strategy_code].iloc[0]\n</code></pre></li> </ul>"},{"location":"member/pyalgotrad/select.html#whats-next","title":"What's Next...","text":"<p>You are now ready to test your uploaded strategy and perform Backtesting, Paper Trading and/or Real Trading with it.</p>"},{"location":"member/pyalgotrad/slippage.html","title":"Slippage","text":""},{"location":"member/pyalgotrad/slippage.html#slippage-and-brokerage-parameters","title":"Slippage and Brokerage Parameters","text":"<p>In the <code>algobulls_connection.get_backtesting_report_pnl_table</code> function, you have the option to specify <code>slippage</code> and <code>brokerage</code> parameters to account for transaction costs and execution variations. These parameters allow you to fine-tune your backtesting results to better simulate real-world trading conditions.</p>"},{"location":"member/pyalgotrad/slippage.html#slippage","title":"Slippage","text":"<ul> <li>Parameter Name: <code>slippage_percent</code></li> <li>Type: float</li> <li>Default Value: None</li> <li>Definition: Slippage is the difference between the expected execution price of a trade and the actual execution price. It often occurs due to market volatility and the time it takes to execute an order. Slippage can have a significant impact on trading results, and this parameter allows you to simulate it.</li> <li>Explanation: Imagine you're trading and placing an order at a specific price, but the market moves quickly. Slippage accounts for the price difference between what you expected and what you actually get. Use this parameter to make your backtesting experience more realistic.</li> </ul>"},{"location":"member/pyalgotrad/slippage.html#how-to-use","title":"How to Use","text":"<p>To incorporate slippage into your backtesting, simply pass the desired values for <code>slippage_percent</code>, when calling the <code>algobulls_connection.get_backtesting_report_pnl_table</code> function. These parameters help you account for real-world trading costs and execution variations, making your backtesting results more realistic.</p>"},{"location":"member/pyalgotrad/slippage.html#example","title":"Example","text":"<pre><code>import algobulls_connection\n# Fetch PnL data for a trading strategy with custom slippage  settings\npnl_table = algobulls_connection.get_backtesting_report_pnl_table(\n    strategy_code=\"your_strategy_code\",\n    show_all_rows=True,\n    force_fetch=True,\n    country='USA',\n    slippage_percent=4.5,             # Adjust slippage percentage as needed\n)\n# Print the PnL table with custom slippage  settings\nprint(pnl_table)\n</code></pre>"},{"location":"member/pyalgotrad/testing.html","title":"Execute your Strategy","text":""},{"location":"member/pyalgotrad/testing.html#previously","title":"Previously...","text":"<p>You have uploaded your strategy to the AlgoBulls platform.</p>"},{"location":"member/pyalgotrad/testing.html#now","title":"Now...","text":"<p>Using the uploaded strategy, you can now try:  </p> <ul> <li>Backtesting </li> <li>Paper Trading</li> <li>Real Trading </li> </ul>"},{"location":"member/pyalgotrad/testing.html#before-you-start","title":"Before you start...","text":"<p>Open a Jupyter Notebook.</p> <p>The steps you will follow are:</p> <ol> <li>Establish a connection to the AlgoBulls Platform.</li> <li>Display all Strategies you have in your account.</li> <li>Select the strategy.</li> <li>Optionally, print the strategy once.</li> <li>Select instrument(s).</li> <li>Submit/Run a Backtest, Paper Trade or Real Trade job.</li> <li>Check Job Status.</li> <li>Fetch Logs (even while the job is running).</li> <li>Fetch Reports. (PnL, Statistics, Order History)</li> </ol>"},{"location":"member/pyalgotrad/testing.html#lets-start","title":"Let's Start...","text":"<p>Run the following code snippets into the Jupyter Notebook one by one (or all together).</p>"},{"location":"member/pyalgotrad/testing.html#create-a-new-strategy-file","title":"Create a new strategy file","text":"<p>eg: strategy_<code>&lt;unique_code_if_needed&gt;</code>_options_ema_crossover.py Make sure this strategy file is in the same folder as the jupyter notebook.</p> <p>Coding Conventions</p> <ul> <li>Keep a unique file name</li> <li>Make sure that the file name is in lowercase and that each word is separated with an underscore '_' as shown above.</li> </ul> <p>How to Code ?</p> <p>To know more on how to code trading strategies and understand their format, click here. We have in detail explanation for regular strategies as well as options strategies</p>"},{"location":"member/pyalgotrad/testing.html#import-statements","title":"Import statements","text":"<pre><code>from pyalgotrading.algobulls import AlgoBullsConnection\nfrom datetime import datetime as dt\nfrom pyalgotrading.constants import *\n</code></pre>"},{"location":"member/pyalgotrad/testing.html#establish-a-connection-to-the-algobulls-platform","title":"Establish a connection to the AlgoBulls Platform","text":"<p><pre><code>algobulls_connection = AlgoBullsConnection()\nalgobulls_connection.get_authorization_url()\n</code></pre> The output of the above step is:</p> <p><code>Please login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login</code></p> <p>Get Developer Key</p> <p>You will need to log in to your AlgoBulls account and fetch the access token from:  (See How) Settings -&gt; General -&gt; Developer Options </p> <p>Once you have the access token, set it in the code as shown here:</p> <pre><code>algobulls_connection.set_access_token('4365817b795770ea31040a21ad29c8e78b63ad88')\n</code></pre> <p>Replace the token you have copied with the token in the code above.</p>"},{"location":"member/pyalgotrad/testing.html#display-all-strategies-in-your-account","title":"Display all strategies in your account","text":"<pre><code>all_strategies = algobulls_connection.get_all_strategies()\nall_strategies\n</code></pre> <p>An example of the output will be: </p>"},{"location":"member/pyalgotrad/testing.html#select-the-strategy","title":"Select the strategy","text":"<p>Select the last entry of the <code>strategyCode</code> column and display it. <pre><code>strategy_code = all_strategies.iloc[-1]['strategyCode']\nstrategy_code\n</code></pre></p>"},{"location":"member/pyalgotrad/testing.html#print-your-strategy-code","title":"Print your Strategy code","text":"<p>You can print your strategy code once to verify if this is the correct code. This step is optional.</p> <pre><code>strategy_details1 = algobulls_connection.get_strategy_details(strategy_code)\nprint(strategy_details1)\n</code></pre>"},{"location":"member/pyalgotrad/testing.html#search-for-instruments-based-on-a-search-query","title":"Search for instruments (based on a search query)","text":"<p>Now display a few instruments with some keyword. The example below uses 'SBIN' as the keyword.</p> <pre><code>instruments = algobulls_connection.search_instrument('SBIN')\ninstruments\n</code></pre>"},{"location":"member/pyalgotrad/testing.html#select-an-instrument","title":"Select an instrument","text":"<p>From the output, select the instrument on which you wish to test your strategy. For this example, select the first one. <pre><code>instrument = instruments[0]['value']\ninstrument\n</code></pre></p>"},{"location":"member/pyalgotrad/testing.html#submit-a-job","title":"Submit a Job","text":"<p>Delete previous trades <pre><code>algobulls_connection.delete_previous_trades(strategy=strategy)\n</code></pre></p> <p>Set the parameters for the strategy <pre><code>parameters={\n    'timeperiod1': 5,\n    'timeperiod2': 12\n}\n</code></pre></p> <pre><code>vendor_details = {\n    'brokerName': '&lt;VENDOR_NAME&gt;',\n    'credentialParameters': {\n        'api_key': '&lt;API_KEY&gt;',\n        'secret_key': '&lt;SECRET_KEY&gt;'\n    }\n}\n</code></pre> <pre><code>broking_details = {\n    'brokerName': '&lt;BROKER_NAME&gt;',\n    'credentialParameters': {\n        'user_id': '&lt;USER_ID&gt;',\n        'api_key': '&lt;API_KEY&gt;',\n        'password': '&lt;PASSWORD&gt;'\n    }\n}\n</code></pre> <p>Click on each of the tabs to see the relevant code snippet.</p> BacktestingPaper TradingReal Trading <pre><code>algobulls_connection.backtest(\n        strategy=strategy_code,         # strategy code\n        start='2020-7-1 09:15 +0530',   # start date-time of strategy ('YYYY-MM-DD HH:MM z')\n        end='2020-7-7 15:30 +0530',     # end date-time of strategy ('YYYY-MM-DD HH:MM z')\n        instruments='NSE:SBIN',         # name of the instrument\n        lots=1,                         # number of lots per trade\n        parameters=parameters,          # parameters required for the strategy\n        candle='15 minutes',            # candle size eg : '1 Day', '1 hour', '3 minutes'\n        delete_previous_trades=True,    # delete the previous trades for papertrading (default is true),\n        initial_funds_virtual=10000,    # virtual funds allotted before the paper trading starts (default is 1e9)\n        vendor_details=vendor_details   # vendor's details for authentication and verification \n)\n</code></pre> <pre><code>algobulls_connection.papertrade(\n        strategy=strategy_code,         # strategy code\n        start='09:15 +0530',            # start time of strategy (HH:MM z)     \n        end='15:30 +0530',              # end time of strategy (HH:MM z)\n        instruments='NSE:SBIN',         # name of the instrument\n        lots=1,                         # number of lots per trade\n        parameters=parameters,          # parameters required for the strategy\n        candle='15 minutes',            # candle size eg : '1 Day', '1 hour', '3 minutes'\n        delete_previous_trades=True,    # delete the previous trades for papertrading (default is true)\n        initial_funds_virtual=10000,    # virtual funds allotted before the paper trading starts (default is 1e9)\n        vendor_details=vendor_details   # vendor's details for authentication and verification \n)\n</code></pre> <pre><code>algobulls_connection.realtrade(\n        strategy=strategy_code,          # strategy code\n        start='09:15 +0530',             # start time of strategy (HH:MM z)     \n        end='15:30 +0530',               # end time of strategy (HH:MM z)\n        instruments='NSE:SBIN',          # name of the instrument\n        lots=1,                          # number of lots per trade\n        parameters=parameters,           # parameters required for the strategy\n        candle='15 minutes',             # candle size eg : '1 Day', '1 hour', '3 minutes'\n        broking_details=broking_details  # broker's details for authentication and verification \n)\n</code></pre>"},{"location":"member/pyalgotrad/testing.html#fetch-job-status","title":"Fetch Job Status","text":"<p>Click on each of the tabs to see the relevant code snippet. There are 4 stages of your strategy execution : STARTING, STARTED, STOPPING and STOPPED </p> BacktestingPaper TradingReal Trading <pre><code>algobulls_connection.get_backtesting_job_status(strategy_code)\n</code></pre> <pre><code>algobulls_connection.get_papertrading_job_status(strategy_code)\n</code></pre> <pre><code>algobulls_connection.get_realtrading_job_status(strategy_code)\n</code></pre> <p>You can stop a submitted job anytime.</p>"},{"location":"member/pyalgotrad/testing.html#stop-a-job","title":"Stop a Job","text":"<p>Click on each of the tabs to see the relevant code snippet.  </p> BacktestingPaper TradingReal Trading <pre><code>algobulls_connection.stop_backtesting_job(strategy_code)\n</code></pre> <pre><code>algobulls_connection.stop_papertrading_job(strategy_code)\n</code></pre> <pre><code>algobulls_connection.stop_realtrading_job(strategy_code)\n</code></pre> <p>You can fetch the logs in the middle of a job to monitor the progress.</p>"},{"location":"member/pyalgotrad/testing.html#fetch-logs","title":"Fetch logs","text":"<p>Logging Tip</p> <ul> <li>There are 2 variations when fetching logs:  <ul> <li>Progressive Logs (<code>print_live_logs</code> = True):  will show progress bar and update the latest logs as the strategy is executed</li> <li>Complete Logs (<code>print_live_logs</code> = False): will fetch logs after strategy is executed.(It wont update the latest logs, unless called manually again)</li> </ul> </li> </ul> <p>Click on each of the tabs to see the relevant code snippet.  </p> BacktestingPaper TradingReal Trading <pre><code>logs = algobulls_connection.get_backtesting_logs(\n            strategy_code,                              # strategy code \n            display_progress_bar=True,                  # (default=True) to track the execution on progress bar as your strategy is executed\n            print_live_logs: True                       # (default=False) to print the live logs as your strategy is executed\n        )\nprint(logs)\n</code></pre> <pre><code>logs = algobulls_connection.get_papertrading_logs(\n            strategy_code,                              # strategy code \n            display_progress_bar=True,                  # (default=True) to track the execution on progress bar as your strategy is executed\n            print_live_logs: True                       # (default=True) to print the live logs as your strategy is executed\n        )\nprint(logs)\n</code></pre> <pre><code>logs = algobulls_connection.get_realtrading_logs(\n            strategy_code,                              # strategy code \n            display_progress_bar=True,                  # (default=True) to track the execution on progress bar as your strategy is executed\n            print_live_logs: True                       # (default=True) to print the live logs as your strategy is executed\n        )\nprint(logs)\n</code></pre> <p>You can fetch the PnL report, statistics and order history for a job.</p>"},{"location":"member/pyalgotrad/testing.html#fetch-pnl-reports","title":"Fetch PnL Reports","text":"<p>Click on each of the tabs to see the relevant code snippet.</p> <p>Please Note</p> <p>Make sure that  strategy's execution status is at STOPPED stage before generating PnL reports</p> BacktestingPaper TradingReal Trading <pre><code>algobulls_connection.get_backtesting_report_pnl_table(\n        strategy_code,                      # strategy code\n        show_all_rows=True,                 # default=True         \n        force_fetch=True,                   # pnl data is saved locally once fetched, to update the locally fetched data, make this parameter True\n        country='USA',                      # country of the exchange that was used while starting the job ('India' or 'USA')\n        broker_commission_percentage: 1     # Percentage of broker commission per trade\n        broker_commission_price: 0.2        # Broker fee per trade\n        slippage_percent: 3                 # Slippage percentage value\n)\n</code></pre> <pre><code>algobulls_connection.get_papertrading_report_pnl_table(\n        strategy_code,                      # strategy code\n        show_all_rows=True,                 # default=True         \n        force_fetch=True,                   # pnl data is saved locally once fetched, to update the locally fetched data, make this parameter True\n        country='USA',                      # country of the exchange that was used while starting the job ('India' or 'USA')\n        broker_commission_percentage: 1     # Percentage of broker commission per trade\n        broker_commission_price: 0.2        # Broker fee per trade\n        slippage_percent: 3                 # Slippage percentage value\n)\n</code></pre> <pre><code>algobulls_connection.get_realtrading_report_pnl_table(\n        strategy_code,              # strategy code\n        show_all_rows=True,         # default=True         \n        force_fetch=True,           # pnl data is saved locally once fetched, to update the locally fetched data, make this parameter True\n        country='USA',              # country of the exchange that was used while starting the job ('India' or 'USA')\n)\n</code></pre> <p>To know more about slippage and brokerage parameters click here</p>"},{"location":"member/pyalgotrad/testing.html#fetch-report-statistics","title":"Fetch Report Statistics","text":"<p>Click on each of the tabs to see the relevant code snippet.</p> <p>Analytics Tips</p> <p>You can view your analytics on the Phoenix page as well, simply log inside your AlgoBulls Account, and look for your Strategy in Phoenix -&gt; My Coded Strategies</p> BacktestingPaper TradingReal Trading <pre><code>algobulls_connection.get_backtesting_report_statistics(\n    strategy_code,          # strategy code\n    report='full',          # format of the report\n    html_dump=True          # save report as html file\n)\n</code></pre> <pre><code>algobulls_connection.get_papertrading_report_statistics(\n    strategy_code,          # strategy code\n    report='full',          # format of the report\n    html_dump=True          # save report as html file\n)\n</code></pre> <pre><code>algobulls_connection.get_realtrading_report_statistics(\n    strategy_code,          # strategy code\n    report='full',          # format of the report\n    html_dump=True          # save report as html file\n)\n</code></pre>"},{"location":"member/pyalgotrad/testing.html#generate-statistics-from-external-csv","title":"Generate Statistics from External CSV","text":"<p>Make sure your csv has the columns names as \"net_pnl\" and \"entry_timestamp\". The \"net_pnl\" column will contain the net profit and loss of every trade and its respective entry time will be stored in \"entry_timestamp\". <pre><code>connection.get_report_statistics(file_path=\"testing_file.csv\", initial_funds=3000)\n</code></pre></p>"},{"location":"member/pyalgotrad/testing.html#fetch-order-history","title":"Fetch Order History","text":"<p>Click on each of the tabs to see the relevant code snippet.</p> BacktestingPaper TradingReal Trading <pre><code>order_history = algobulls_connection.get_backtesting_report_order_history(strategy_code)\nprint(order_history)\n</code></pre> <pre><code>order_history = algobulls_connection.get_papertrading_report_order_history(strategy_code)\nprint(order_history)\n</code></pre> <pre><code>order_history = algobulls_connection.get_realtrading_report_order_history(strategy_code)\nprint(order_history)\n</code></pre> <p>Note</p> <ul> <li>Order History for Real Trading is not supported by brokers.</li> <li>Order History for Backtesting, Paper Trading and Real Trading is supported by the AlgoBulls Virtual Brokers.</li> </ul>"},{"location":"member/pyalgotrad/testing.html#whats-next","title":"What's Next...","text":"<p>You can now explore more by creating and uploading more complex strategies.</p> <p>You can also check out the Analytics, to understand more about the returns and analyze your strategy based on the analytics report.</p>"},{"location":"member/pyalgotrad/upload.html","title":"Upload your Strategy","text":""},{"location":"member/pyalgotrad/upload.html#previously","title":"Previously...","text":"<p>You have created a strategy by:</p> <ul> <li>Coding the complete strategy from the Create page.</li> </ul> <p>OR</p> <ul> <li>Picking up a ready strategy from the pyalgostrategypool package.</li> </ul>"},{"location":"member/pyalgotrad/upload.html#now","title":"Now...","text":"<p>You are now ready to upload your strategy into your AlgoBulls account for Backtesting, Paper Trading and/or Real Trading. </p>"},{"location":"member/pyalgotrad/upload.html#before-you-start","title":"Before you start...","text":"<ul> <li>Make sure you have an active working AlgoBulls account ready to go!</li> <li>Open a Jupyter Notebook.</li> <li>If you have coded the strategy yourself and not used a ready strategy from the pyalgostrategypool package, then make sure your strategy file (.py) and the Jupyter Notebook are in the same folder. </li> </ul>"},{"location":"member/pyalgotrad/upload.html#lets-start","title":"Let's Start...","text":"<p>Run the following code snippets into the Jupyter Notebook one by one (or all together).</p>"},{"location":"member/pyalgotrad/upload.html#import-statements","title":"Import statements","text":"<pre><code>import inspect\nfrom pyalgotrading.algobulls import AlgoBullsConnection\n</code></pre> <ul> <li> <p>Import a ready strategy <pre><code>from pyalgostrategypool.strategy_ema_regular_order import StrategyEMARegularOrder\n</code></pre></p> </li> <li> <p>Import your own strategy <pre><code>from strategy_sma_regular_order import StrategySMARegularOrder\n</code></pre></p> </li> </ul>"},{"location":"member/pyalgotrad/upload.html#establish-a-connection-to-the-algobulls-platform","title":"Establish a connection to the AlgoBulls Platform","text":"<p><pre><code>algobulls_connection = AlgoBullsConnection()\nalgobulls_connection.get_authorization_url()\n</code></pre> The output of the above step is:</p> <p><code>Please login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login</code></p> <p>Get Developer Key</p> <p>You will need to log in to your AlgoBulls account and fetch the access token from:  (See How) Settings -&gt; General -&gt; Developer Options </p> <p>Once you have the access token, set it in the code as shown here:</p> <p><pre><code>algobulls_connection.set_access_token('4365817b795770ea31040a21ad29c8e78b63ad88')\n</code></pre> Replace the token you have copied with the token in the code above.</p>"},{"location":"member/pyalgotrad/upload.html#print-your-strategy-code","title":"Print your Strategy code","text":"<p>You can print your strategy code once to verify if this is the correct code before uploading it to the platform. This step is optional. <pre><code>print(inspect.getsource(StrategySMARegularOrder))\n</code></pre></p>"},{"location":"member/pyalgotrad/upload.html#upload-your-strategy_1","title":"Upload your Strategy","text":"<p>Upload your strategy as shown in the code below. <pre><code>algobulls_connection.create_strategy(StrategySMARegularOrder)\n</code></pre></p>"},{"location":"member/pyalgotrad/upload.html#re-upload-your-strategy-after-modifications","title":"Re-upload your Strategy after modifications","text":"<p>If you are re-uploading your strategy after some changes, then use the <code>overwrite</code> switch as shown here. <pre><code>algobulls_connection.create_strategy(StrategySMARegularOrder, overwrite=True)\n</code></pre></p>"},{"location":"member/pyalgotrad/upload.html#whats-next","title":"What's Next...","text":"<p>You are now ready to test your uploaded strategy and perform Backtesting, Paper Trading and/or Real Trading with it.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html","title":"Options Strategy Structure","text":"<p>Links</p> <ul> <li>Code Structure of Strategy (workflow of a strategy)</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#1-initial-steps","title":"1. Initial steps","text":""},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#naming-a-class","title":"Naming a Class","text":"eg: For the above strategy name the class name would be:     <pre><code>StrategyOptionsEMACrossover(StrategyOptionsBaseV2)\n</code></pre> <p>Coding Conventions</p> <pre><code>* Make a class with the same name as the file name\n* Make sure the first letter of each word is in uppercase and the initials should be in uppercase as well.\n* If the class name includes indicator names like EMA, SMA, and VWAP the name should be in uppercase in the class name but not in the file name.\n* Every options strategy is a child class of the StrategyOptionsBaseV2 class.\n</code></pre>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#naming-your-strategy","title":"Naming your Strategy","text":"<p>This name will be displayed in your My Coded Strategies in Phoenix Web, and it will also be the strategy_name when you are fetching all strategies in pyalgotrading. Inside your strategy class, you can write your first parameter as <code>name</code>.     <pre><code>name = 'options_ema_crossover'\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#2-init-method","title":"2. Init method","text":"<p>This method gets called only once when the strategy is started.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#strategy-info","title":"Strategy info","text":"<p>In the init method add the line given below <pre><code>super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#parameter-creation","title":"Parameter creation","text":"<p>Next, we assign the parameter values to the class variables of the same name as the parameters but in the lowercase format as shown below:</p> <p>eg: <pre><code>self.fresh_order_candle = self.strategy_parameters['FRESH_ORDER_CANDLE']\nself.start_time_hours = self.strategy_parameters['START_TIME_HOURS']\nself.start_time_minutes = self.strategy_parameters['START_TIME_MINUTES']\nself.end_time_hours = self.strategy_parameters['END_TIME_HOURS']\nself.end_time_minutes = self.strategy_parameters['END_TIME_MINUTES']\nself.no_of_strikes_away_ce = self.strategy_parameters['NO_OF_STRIKES_AWAY_CE']\nself.no_of_strikes_away_p = self.strategy_parameters['NO_OF_STRIKES_AWAY_PE']\nself._strike_direction_ce = self.strategy_parameters['STRIKES_DIRECTION_CE']\nself._strike_direction_pe = self.strategy_parameters['STRIKES_DIRECTION_PE']\nself.ema_period_one = self.strategy_parameters['EMA_PERIOD_ONE']\nself.ema_period_two = self.strategy_parameters['EMA_PERIOD_TWO']\nself.target_percentage = self.strategy_parameters['TARGET_PERCENTAGE']\nself.stoploss_percentage = self.strategy_parameters['STOPLOSS_PERCENTAGE']\nself.stoploss_range = self.strategy_parameters['STOPLOSS_RANGE']\nself.stoploss_order_count_allowed = self.strategy_parameters['STOPLOSS_ORDER_COUNT_ALLOWED']\n</code></pre></p> <p>Note</p> <ul> <li>The parameter names and the number of parameters may change for different strategies.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#start-time-and-end-time-creation","title":"Start time and End time creation","text":"<p>Adding Start and End time is useful when you want to define a timerange between which the strategy will be running each day. Add the below code to calculate the strategy start time and end time, from the <code>strategy_parameters</code>.</p> <p>try: <pre><code>    self.candle_start_time = time(hour=self.start_time_hours, minute=self.start_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting start hours and minutes... EXITING')\n    raise SystemExit\n</code></pre> try: <pre><code>    self.candle_end_time = time(hour=self.end_time_hours, minute=self.end_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting end time hours and minutes... EXITING')\n    raise SystemExit\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#strategy-variables","title":"Strategy variables","text":"<p>We create our own strategy variables other than the strategy parameter variables which will be used throughout the strategy.</p> <p>eg: <pre><code>self.main_order = None            # We save the entry order in this variable\nself.stoploss_order = None        # We save the corresponding stoploss exit order of the entry order in this variable\n</code></pre> We initialize the variables with a None value.     !!! Note             There could be more strategy variables required as per the strategy requirement. </p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#3-initialize-method","title":"3. Initialize method","text":"<p>Unlike the <code>init method</code>, this method gets called every day at the beginning of the day once the strategy is started.</p> <p>Here the strategy variables that were initialized as None are again defined as dictionaries/lists except for the <code>self.order_tag_manager</code>.  Create a reference for <code>OrderTagManager</code> as shown below:</p> <pre><code>self.order_tag_manager = OrderTagManager\n</code></pre>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#4-ordertagmanager","title":"4. OrderTagManager","text":"<p>The <code>self.order_tag_manager</code> is used to store/remove the entry/exit orders. The <code>self.order_tag_manager</code> has the following methods:</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#add_order","title":"add_order","text":"<ul> <li>Stores the order object for the given tags. eg:</li> </ul> <pre><code>self.order_tag_manager.add_order(_order, tags=[base_inst_str, entry_key])\n</code></pre> <ul> <li>Here the <code>_order</code> is the order object stored inside the <code>OrderTagManager</code> for the tags <code>base_inst_str</code> and <code>entry_key</code>.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#get_orders","title":"get_orders","text":"<ul> <li>Retrieve the order(s) for the given tags.</li> </ul> <p>eg:</p> <pre><code>self.order_tag_manager.get_orders(tags=[base_inst_str, BrokerExistingOrderPositionConstants.ENTER, entry_key], ignore_errors=True)\n</code></pre> <ul> <li>Here the order object retrieved from the <code>OrderTagManager</code> for the tags <code>base_inst_str, BrokerExistingOrderPositionConstants.ENTER</code> and <code>entry_key</code></li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#remove_tags","title":"remove_tags","text":"<ul> <li>Removes the tags stored in the <code>OrderTagManager</code> along with the orders related stored in that tag</li> </ul> <p>eg:</p> <pre><code>self.order_tag_manager.remove_tags(tags=entry_key)\n</code></pre> <p>Here the <code>entry_key</code> tag is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>When the tag is removed the order objects stored in that tag are also removed but the same order objects would still be present in order tags.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#remove_order","title":"remove_order","text":"<ul> <li>Remove the order(s) from the <code>OrderTagManager</code> for the given tag(s).</li> </ul> <p>eg:</p> <p><pre><code>self.order_tag_manager.remove_order(main_order)\n</code></pre> Here the <code>main_order</code> order object is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>The order object will be removed from all the tags ta</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#get_internals","title":"get_internals","text":"<pre><code>Returns the values i.e. both the entry and exit orders stored inside the tags list.\n</code></pre>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#5-child-instruments-calculation","title":"5. Child instruments calculation","text":""},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#get_ltp","title":"get_ltp","text":"<p>Fetch the ltp of the base instrument (instrument set while executing strategy) <pre><code>ltp = self.broker.get_ltp(self.underlying_instrument)\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#options_instruments_set_up_local","title":"options_instruments_set_up_local","text":"<p>Get the ATM ITM and OTM lists of the child instrument based on the LTP     <pre><code>self.options_instruments_set_up_local(self.underlying_instrument, tradingsymbol_suffix, ltp)\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#get_child_instrument_details","title":"get_child_instrument_details","text":"<p>Select a child instrument from the lists of ATM, ITM, and OTM based on the strike direction and no of strikes given for the child instrument     <pre><code>child_instrument = self.get_child_instrument_details(self.underlying_instrument, tradingsymbol_suffix, strike_direction, no_of_strikes)\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#6-entry-methods","title":"6. Entry Methods","text":""},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry","text":"<ul> <li> <p>In this method we process each instrument in the instruments bucket, if there is some entry condition to be checked then we create a <code>get_entry_decision</code> method  that calculates the entry condition like a crossover or compares the latest value of the OHLC data or indicator data.</p> </li> <li> <p>When the order has to be placed we add the <code>instrument</code> to <code>selectd_instruments_bucket</code> and additional data related to the instrument that will be required while placing to the <code>sideband_info</code>. This information is passed to the <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#strategy_enter_position","title":"strategy_enter_position","text":"<ul> <li>Here is where we actually place the entry order for which we calculate the quantity for the order to be placed. If the order is placed successfully we save the order in a class variable such that we can access the order object via the variable in the exit methods.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#7-exit-methods","title":"7. Exit Methods","text":""},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit","text":"<ul> <li>This method is called before the entry methods because in the case of delivery strategy we want to resume and exit previous day orders before we can place new entry orders.</li> <li>Here we place stoploss exit orders, target exit orders, and check for exit conditions for the open entry orders.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#strategy_exit_position","title":"strategy_exit_position","text":"<ul> <li>Here is where we actually place the exit order for where we exit the order which was placed during entry. If the order is placed successfully we clear the order in a class variable such that we can add new orders to the vacant place in variable in the entry methods.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#8-other-common-methods","title":"8. Other common methods","text":"<p>There are other methods that are used in the strategy:</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#check_and_place_stoploss_order","title":"check_and_place_stoploss_order","text":"<p>This method is called in the <code>strategy_select_instruments_for_exit</code> when our entry order is open, and we want to place a stoploss exit order for the same.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#set_all_none","title":"set_all_none","text":"<p>This method is called in the <code>strategy_exit_position</code> when our entry order has exited, and we want to remove the order object from the <code>self.main_order</code> variable.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#options_instruments_set_up_local_1","title":"options_instruments_set_up_local","text":"<p>This method is called in the <code>strategy_select_instruments_for_entry</code> to fetch the ATM, ITM, and OTM lists of the child instruments based on the LTP of the base instrument. </p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#get_child_instrument_details_1","title":"get_child_instrument_details","text":"<p>This method is called in the <code>strategy_select_instruments_for_entry</code> to fetch a single child instrument based on the no of strikes and strike direction.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#9-cleanup","title":"9. Cleanup","text":"<ol> <li>Add comments and docstrings wherever possible to improve code readability.</li> <li>Once the strategy is completed you can optimize imports, give proper indentation and proper formatting to the strategy code and remove unwanted imports, variables, and methods before delivering the code.</li> </ol>"},{"location":"member/pyalgotrad/strategy_guides/common_options_strategy.html#10-check-out-our-docs-for-developed-options-strategies","title":"10. Check out our docs for developed Options strategies","text":"<ul> <li>Options Bear Call Ladder</li> <li>Options Bear Put Ladder</li> <li>Options Bull Call Ladder</li> <li>Options Bull Put Ladder</li> <li>Options Long Iron Butterfly</li> <li>Options Straddle</li> <li>Options Strangle</li> </ul> <p>Tip</p> <p>To know more about a strategy from our given template, simply check the first line of comment in the code of that specific strategy.  </p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html","title":"Regular Strategy Structure","text":"<p>Links</p> <ul> <li>Code Structure of Strategy (workflow of a strategy)</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#1-initial-steps","title":"1. Initial steps","text":""},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#naming-a-class","title":"Naming a Class","text":"eg: For the above strategy name the class name would be:     <pre><code>StrategyFuturesEMACrossover(StrategyBase)\n</code></pre> <p>Coding Conventions</p> <pre><code>* Make a class with the same name as the file name\n* Make sure the first letter of each word is in uppercase and the initials should be in uppercase as well.\n* If the class name includes indicator names like EMA, SMA, and VWAP the name should be in uppercase in the class name but not in the file name.\n* Every strategy is a child class of the StrategyBase class.\n</code></pre>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#naming-your-strategy","title":"Naming your Strategy","text":"<p>This name will be displayed in your My Coded Strategies in Phoenix Web, and it will also be the strategy_name when you are fetching all strategies in pyalgotrading. Inside your strategy class, you can write your first parameter as <code>name</code>.     <pre><code>name = 'futures_ema_crossover'\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#2-init-method","title":"2. Init method","text":"<p>This method gets called only once when the strategy is started.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#strategy-info","title":"Strategy info","text":"<p>In the init method add the line given below <pre><code>super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#parameter-creation","title":"Parameter creation","text":"<p>Next we assign the parameter values to the class variables of the same name as the parameters but in the lowercase format, as shown below:</p> <p>eg: <pre><code>self.fresh_order_candle = self.strategy_parameters['FRESH_ORDER_CANDLE']\nself.start_time_hours = self.strategy_parameters['START_TIME_HOURS']\nself.start_time_minutes = self.strategy_parameters['START_TIME_MINUTES']\nself.end_time_hours = self.strategy_parameters['END_TIME_HOURS']\nself.end_time_minutes = self.strategy_parameters['END_TIME_MINUTES']\nself.ema_period_one = self.strategy_parameters['EMA_PERIOD_ONE']\nself.ema_period_two = self.strategy_parameters['EMA_PERIOD_TWO']\nself.target_percentage = self.strategy_parameters['TARGET_PERCENTAGE']\nself.stoploss_percentage = self.strategy_parameters['STOPLOSS_PERCENTAGE']\nself.stoploss_range = self.strategy_parameters['STOPLOSS_RANGE']\nself.stoploss_order_count_allowed = self.strategy_parameters['STOPLOSS_ORDER_COUNT_ALLOWED']\n</code></pre></p> <p>Note</p> <ul> <li>The parameter names and the number of parameters may be different for different strategies.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#start-time-and-end-time-creation","title":"Start time and End time creation","text":"<p>Adding Start and End time is useful when you want to define a timerange between which the strategy will be running each day. Add the below code to calculate the strategy start time and end time, from the <code>strategy_parameters</code>.     try:     <pre><code>    self.candle_start_time = time(hour=self.start_time_hours, minute=self.start_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting start hours and minutes... EXITING')\n    raise SystemExit\n</code></pre>     try:      <pre><code>    self.candle_end_time = time(hour=self.end_time_hours, minute=self.end_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting end time hours and minutes... EXITING')\n    raise SystemExit\n</code></pre></p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#strategy-variables","title":"Strategy variables","text":"<p>We create our own strategy variables other than the strategy parameter variables which will be used throughout the strategy.</p> <p>eg: <code>self.order_tag_manager = None</code> </p> <p>We initialize the variables with a None value.</p> <p>Note</p> <pre><code>There could be more strategy variables required as per the strategy requirement.\n</code></pre>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#3-initialize-method","title":"3. Initialize method","text":"<p>Unlike the <code>init method</code>, this method gets called every day at the beginning of the day once the strategy is started.</p> <p>Here the strategy variables that were initialized as None are again defined as dictionaries/lists except for the <code>self.order_tag_manager</code>.  Create a reference for <code>OrderTagManager</code> as shown below:</p> <pre><code>self.order_tag_manager = OrderTagManager\n</code></pre>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#4-ordertagmanager","title":"4. OrderTagManager","text":"<p>The <code>self.order_tag_manager</code> is used to store/remove the entry/exit orders. The <code>self.order_tag_manager</code> has the following methods:</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#add_order","title":"add_order","text":"<ul> <li>Stores the order object for the given tags. eg: <pre><code>self.order_tag_manager.add_order(_order, tags=[base_inst_str, entry_key])\n</code></pre></li> <li>Here the <code>_order</code> is the order object stored inside the <code>OrderTagManager</code> for the tags <code>base_inst_str</code> and <code>entry_key</code>.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#get_orders","title":"get_orders","text":"<ul> <li>Retrieve the order(s) for the given tags. eg: <pre><code>self.order_tag_manager.get_orders(tags=[base_inst_str, BrokerExistingOrderPositionConstants.ENTER, entry_key], ignore_errors=True)\n</code></pre></li> <li>Here the order object retrieved from the <code>OrderTagManager</code> for the tags <code>base_inst_str, BrokerExistingOrderPositionConstants.ENTER</code> and <code>entry_key</code></li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#remove_tags","title":"remove_tags","text":"<ul> <li>Removes the tags stored in the <code>OrderTagManager</code> along with the orders related stored in that tag eg: <pre><code>self.order_tag_manager.remove_tags(tags=entry_key)\n</code></pre></li> <li>Here the <code>entry_key</code> tag is removed from the <code>OrderTagManager</code>.</li> </ul> <p>Note</p> <p>When the tag is removed the order objects stored in that tag are also removed but the same order objects would still be present in the order tags.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#remove_order","title":"remove_order","text":"<ul> <li>Remove the order(s) from the <code>OrderTagManager</code> for the given tag(s). eg:</li> </ul> <pre><code>self.order_tag_manager.remove_order(main_order)\n</code></pre> <p>Here the <code>main_order</code> order object is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>The order object will be removed from all the tags ta</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#get_internals","title":"get_internals","text":"<ul> <li>Returns the values i.e. both the entry and exit orders stored inside the tags list.   </li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#5-entry-methods","title":"5. Entry Methods","text":""},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry","text":"<ul> <li> <p>In this method we process each instrument in the instruments bucket, if there is some entry condition to be checked then we create an <code>get_entry_decision</code> method  that calculates the entry condition like a crossover or compares the latest value of the OHLC data or indicator data.</p> </li> <li> <p>When the order has to be placed we add the <code>instrument</code> to <code>selected_instruments_bucket</code> and additional data related to the instrument that will be required while placing to the <code>sideband_info</code>. This information is passed to the <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#strategy_enter_position","title":"strategy_enter_position","text":"<ul> <li>Here is where we actually place the entry order for which we calculate the quantity for the order to be placed. If the order is placed successfully we save the order in a class variable such that we can access the order object via the variable in the exit methods.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#6-exit-methods","title":"6. Exit Methods","text":""},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit:","text":"<ul> <li>This method is called before the entry methods because in the case of delivery strategy we want to resume and exit previous day orders before we can place new entry orders.</li> <li>Here we place stoploss exit orders, target exit orders, and check for exit conditions for the open entry orders.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#strategy_exit_position","title":"strategy_exit_position","text":"<ul> <li>Here is where we actually place the exit order for where we exit the order which was placed during entry. If the order is placed successfully we clear the order in a class variable such that we can add new orders to the vacant place in variable in the entry methods.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#7-other-common-methods","title":"7. Other common methods","text":"<p>There are other methods that are used in the strategy:</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#check_and_place_stoploss_order","title":"check_and_place_stoploss_order","text":"<p>This method is called in the <code>strategy_select_instruments_for_exit</code> when our entry order is open, and we want to place a stoploss exit order for the same.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#set_all_none","title":"set_all_none","text":"<p>This method is called in the <code>strategy_exit_position</code> when our entry order has exited, and we want to remove the order object from the <code>self.main_order</code> variable.</p>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#8-cleanup","title":"8. Cleanup","text":"<ol> <li>Add comments and docstrings wherever possible to improve code readability.</li> <li>Once the strategy is completed you can optimize imports, give proper indentation and proper formatting to the strategy code and remove unwanted imports, variables, and methods before delivering the code.</li> </ol>"},{"location":"member/pyalgotrad/strategy_guides/common_regular_strategy.html#10-check-out-our-docs-for-developed-regular-strategies","title":"10. Check out our docs for developed Regular strategies","text":"<ul> <li>Aroon Crossover</li> <li>Bollinger Bands</li> <li>EMA Crossover</li> <li>Inverse EMA Scalping</li> <li>Reverse RSI</li> <li>Stochastic Crossover</li> <li>VWAP Crossover</li> </ul> <p>Tip</p> <p>To know more about a strategy from our given template, simply check the first line of comment in the code of that specific strategy.  </p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html","title":"Code Structure of Strategy","text":"<p>Coding Prerequisites</p> <ul> <li>For pyalgotrading check here.</li> <li>For Phoenix Web check here.</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#methods","title":"Methods","text":""},{"location":"member/pyalgotrad/strategy_guides/structure.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry()","text":"<p>This function helps you choose which trading instruments you want your strategy to work with. The system will use this function to go through each instrument one by one, at each candle's time. You get to write code that decides whether to place an order for a specific instrument or not.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#strategy_enter_position","title":"strategy_enter_position()","text":"<p>This function is where you can place orders for the instruments you selected earlier. It's executed for each instrument you picked in the previous function.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit()","text":"<p>After you've entered a position for an instrument, this function is called for each of those instruments at each candle interval. You can use it to decide whether an instrument should be exited from the position.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#strategy_exit_position","title":"strategy_exit_position()","text":"<p>In this function, you can close or exit positions for the instruments you marked for exiting in the previous function. It's done instrument by instrument.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#supporting-methods","title":"Supporting Methods","text":"<p>You have the following supporting methods:</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#init","title":"init()","text":"<p>This method is like a starter for your strategy. It checks if the values you give it make sense and sets up some useful information for your strategy to use.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#initialize","title":"initialize()","text":"<p>This method is called when your strategy begins, both at the very start and at the beginning of each trading day. It's like setting up your strategy's workspace and giving your tools a starting position.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#name","title":"name()","text":"<p>This method gives your strategy a special name. It's like giving your strategy a unique nickname.</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#versions_supported","title":"versions_supported()","text":"<p>This method lets you specify which version of the AlgoBulls Platform your strategy works well with. It's like saying, \"My strategy is ready for this specific version of the platform.\"</p>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#utility-functions","title":"Utility Functions","text":"<p>You have the following utility function to be used in this strategy :</p> <p>Links</p> <ul> <li>Strategy Structure (regular)</li> <li>Strategy Structure (options)</li> </ul>"},{"location":"member/pyalgotrad/strategy_guides/structure.html#get_crossover_value","title":"get_crossover_value()","text":"This handy function calculates something called the \"crossover value\" for you. It's like having a calculator that figures out this specific value for your strategy."},{"location":"member/pyalgotrad/strategy_guides/structure.html#flowchart","title":"Flowchart","text":"<p>Once you create your own strategy or use a ready strategy from the pyalgostrategypool package, this is how it works internally on the AlgoBulls Core Trading Engine.</p> <p></p>"},{"location":"member/python_build/pyalgotrading_analytics.html","title":"Pyalgotrading Analytics","text":""},{"location":"member/python_build/pyalgotrading_analytics.html#metric-values-and-statistics","title":"Metric Values and Statistics","text":""},{"location":"member/python_build/pyalgotrading_analytics.html#cumulative-returns","title":"Cumulative Returns","text":"<ul> <li>The Cumulative Returns chart illustrates how our strategy's returns value has evolved over time in percentage. </li> <li>Positive values indicate gains, while negatives reflect losses. Bigger positive returns are more favourable. </li> <li>Keep in mind, this chart focuses on gains and losses, excluding risk and timing considerations.</li> <li>There are 2 sub categories of cumulative returns chart depending on the scale we are using. One is normal scaled and other is log scaled </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#end-of-year-returns-eoy","title":"End of Year Returns (EoY)","text":"<ul> <li>The End of Year Returns chart showcases our strategy's annual performance as a percentage. </li> <li>It quantifies its overall performance, considering gains or losses throughout each year.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#distributions-of-monthly-returns-histogram","title":"Distributions of Monthly Returns (Histogram)","text":"<ul> <li>In the Monthly Returns Distribution Histogram, we see the frequency distribution of different levels of returns over consecutive months. </li> <li>This histogram helps us understand the range and patterns in monthly returns, shedding light on our strategy's volatility and performance trends.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#daily-returns","title":"Daily Returns","text":"<ul> <li>The Daily Returns Chart portrays the percentage change in our strategy's returns between trading days. </li> <li>It provides insights into short-term volatility, trend analysis, and risk assessment.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#rolling-volatility-6-months","title":"Rolling Volatility (6 months)","text":"<ul> <li>A Rolling Volatility (6 months) Plot showcases the changing volatility of an investment over time using a rolling window of six months. </li> <li>This plot reveals how the investment's price fluctuations vary as the window moves across the dataset. </li> <li>It provides insights into short-term volatility patterns, helping investors understand how the investment's risk level evolves in response to different market conditions.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#rolling-sharpe-6-months","title":"Rolling Sharpe (6 months)","text":"<ul> <li>A Rolling Sharpe (6 months) Plot illustrates the dynamic changes in the Sharpe ratio over time using a rolling window of six months. </li> <li>The plot shows how the risk-adjusted performance of an investment fluctuates as the window moves through the dataset. </li> <li>This visualization helps investors understand how the Sharpe ratio varies with changing market conditions and provides insights into the investment's consistency and risk-return trade-offs over short-term periods.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#rolling-sortino-6-months","title":"Rolling Sortino (6 months)","text":"<ul> <li>A Rolling Sortino (6 months) Plot visualizes the variation in the Sortino ratio over time using a rolling window of six months. </li> <li>This plot demonstrates how the investment's risk-adjusted performance, considering only downside volatility, changes as the window progresses through the data. </li> <li>It offers insights into how the Sortino ratio evolves with market conditions, helping investors assess the investment's ability to generate favorable risk-adjusted returns over short-term intervals.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#worst-5-drawdown-periods","title":"Worst 5 Drawdown Periods","text":"<ul> <li>A Worst 5 Drawdown Periods plot displays the top five periods during which the strategy experienced the largest declines from peak to trough. </li> <li>This visualization helps strategists understand the most significant loss-making episodes in the strategy's run. </li> <li>It shows the magnitude and duration of these drawdowns, providing insights into the strategy's risk and potential vulnerabilities.     </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#underwater-plot","title":"Underwater Plot","text":"<ul> <li>The Underwater Plot visually narrates our strategy's performance concerning its past peaks. </li> <li>It showcases how much our returns value has dropped from its highest point over time. </li> <li>This aids in visualising periods of drawdown and recovery, offering insights into historical risk and resilience.    </li> </ul>"},{"location":"member/python_build/pyalgotrading_analytics.html#monthly-returns-heatmap","title":"Monthly Returns (Heatmap)","text":"<ul> <li>The Monthly Returns Heatmap offers a colour-coded view of our strategy's performance across months. </li> <li>Shades of green indicate positive returns, while shades of red signify losses. </li> <li>This visual tool helps spot trends and patterns, aiding in identifying strong and weak performance periods.    </li> </ul>"},{"location":"member/python_build/python-build-code-gen-ai.html","title":"Code Using AI","text":"<p>If you have creative ideas in your mind and want to design an algotrading strategy, but you are new at coding, don't worry; we have got it covered using our Phoenix's Create Using AI feature which will help you to create trading strategies seamlessly.</p>"},{"location":"member/python_build/python-build-code-gen-ai.html#enter-your-prompts","title":"Enter your Prompts","text":"<ol> <li>On the left-hand side you can see the previous sessions and chat history</li> <li>Right below you will see a button for Prompts Library which has all the sample prompts that would generate wonderful strategies, you can pick any of them, if needed you can even tailor those prompts and use them.</li> <li>To start a new session, click on New Session</li> <li>Enter your prompt or select from the sample prompts or take one prompt from the Prompts Library</li> <li>Click on the send button to start generating</li> </ol> <p>Please Note, It takes some time to generate the strategy as it processes a lot of data, so please be patient</p> <p></p> <p>Please Note</p> <p>Direct response code from gen-ai may not be 100% accurate, you will have to make sure that pythonic errors are not present. Also dont forget to configure your strategy parameters before executing the code.</p> <p>Modify your code ?</p> <p>To know more on how to code trading strategies and understand their format, click here. We also have in detail explanation for regular strategies as well as options strategies.</p>"},{"location":"member/python_build/python-build-code-gen-ai.html#save-your-strategy","title":"Save your Strategy","text":"<ol> <li>Once it gives you the strategy, you can ask it to make more changes as per your need or you can save it directly.</li> <li>To save, click in the top right corner of the code, you can even copy the code if you want.</li> <li>Once you save it, it will redirect you to a new page where you have save your strategy and update its configuration parameters from the parameter settings.</li> <li>All your saved strategies can be viewed in My Coded Strategies section in Phoenix.    </li> </ol> <p>What's Next ?</p> <p>You can check out our strategy code structure and their respective formats for options and equity. Once you have verified that your strategy has no pythonic errors then you can move on to Configure and Execute your Strategy. </p>"},{"location":"member/python_build/python-build-code-new.html","title":"Code New Strategy","text":""},{"location":"member/python_build/python-build-code-new.html#how-to-code-a-new-strategy","title":"How to code a new strategy?","text":"<p>If you want to create your own strategy, click on the + Sign in the Code New Strategy option under the My Coded Strategies section.</p> <p></p> <p>A new blank code editor will open, allowing you to start coding your new strategy. You can check out the basic building blocks of a strategy here to help you with your code structure. After you've finished coding, click Save to save this strategy in the My Coded Strategies section.</p> <p></p> <p>How to Code ?</p> <p>To know more on how to code trading strategies and understand their format, click here. We also have in detail explanation for regular strategies as well as options strategies.</p> <p>Next, you need to configure the strategy\u2019s parameters by clicking on the settings symbol in the top right corner of the code editor. In this section you can add, view &amp; edit the strategy parameters.</p> <p>To test the behavior and performance of the strategy, click on Save &amp; Start and follow the directions given earlier. The performance of the strategy will soon be available in the Results section.</p> <p>You can rename a strategy by clicking the edit symbol beside the strategy name. </p> <p></p> <p>What's Next ?</p> <p>You can check out our strategy code structure and their respective formats for options and equity. Once you have verified that your strategy has no pythonic errors then you can move on to  Configure and Execute your Strategy. </p>"},{"location":"member/python_build/python-build-code-ready-templates.html","title":"Code Ready Templates","text":""},{"location":"member/python_build/python-build-code-ready-templates.html#how-to-code-strategies-using-ready-templates","title":"How to code strategies using Ready Templates?","text":"<p>Select a template that you would like to modify from the Ready Template section. To view all the ready-to-use templates, click on More.</p> <p></p> <p>Click on the Code button placed in the bottom right corner of the selected template to view the strategy code.</p> <p></p> <p>You should now see the code editor, where you can start modifying the code as required.</p> <p>Modify your code ?</p> <p>To know more on how to code trading strategies and understand their format, click here. We also have in detail explanation for regular strategies as well as options strategies.</p> <p></p> <p>To save the strategy, click the Save button. This strategy will be added to your list of My coded strategies.</p> <p></p> <p>What's Next ?</p> <p>You can check out our strategy code structure and their respective formats for options and equity. Once you have verified that your strategy has no pythonic errors then you can move on to  Configure and Execute your Strategy. </p>"},{"location":"member/python_build/python-build-config-parameters.html","title":"Configure and Execute your Strategy","text":"<p>To effectively use pyalgotrading and make the most of your trading strategy, it's essential to be familiar with some frequently used stock market terminologies. Let's go over these terms before diving into configuring your strategy parameters.</p> <ol> <li>Exchange: An exchange is a marketplace where various financial instruments like securities, commodities, and derivatives are traded. Examples include NSE (National Stock Exchange), BSE (Bombay Stock Exchange), NYSE (New York Stock Exchange), and NASDAQ.</li> <li>Instruments: Instruments are the specific assets or securities traded on these exchanges. These include stocks like AAPL (Apple Inc.), TSLA (Tesla, Inc.), TATAMOTORS (Tata Motors Limited), and SBIN (State Bank of India).</li> <li>Candlestick Charts: Candlestick charts are commonly used in stock market analysis. They represent the opening and closing prices of a stock or asset over regular time intervals, which are often referred to as \"candle size.\"</li> <li>Intraday Trading: Intraday trading, also known as day trading, involves buying and selling stocks within the same trading day.</li> <li>Delivery Trading: Delivery trading is a type of trading where traders buy shares and hold them for an extended period, which can range from a few days to several months or even years.</li> <li>Position: A position refers to the amount of a security or asset owned (or sold short) by an individual or entity. Traders take positions when they make buy or sell orders.</li> <li>Order: An order is an instruction to buy or sell a security or asset on a trading venue, such as a stock market or cryptocurrency exchange.</li> <li>Crossover: A crossover occurs when two signal lines intersect. Signal lines can be various indicators like moving averages, Relative Strength Index (RSI), Volume Weighted Averages, etc. Crossovers are often used to trigger and place orders. Now that we've covered these essential terms, let's move on to configuring your trading strategy parameters.</li> </ol>"},{"location":"member/python_build/python-build-config-parameters.html#configure-strategy-parameters","title":"Configure Strategy Parameters","text":"<p>You can configure the strategy\u2019s parameters by clicking on the settings symbol in the top right corner of the code editor. In this section, you can view a strategy\u2019s parameters or edit these parameters too.</p> <p></p> <p>There 4 sections for configuring your parameters:</p>"},{"location":"member/python_build/python-build-config-parameters.html#instruments","title":"Instruments","text":"<ul> <li>Here you can select the allowed exchanges from the drop box given on the left (eg: NASDAQ, NYSE, NSE etc.)</li> <li>Once you have selected the exchange you can search the instrument in the search-box right beside it</li> </ul>"},{"location":"member/python_build/python-build-config-parameters.html#strategy-settings","title":"Strategy Settings","text":"<ul> <li>Here you can select the candle size, it is the size of candle on which you are running your strategy is going to be executed</li> <li>You can even select the mode i.e. INTRADAY or DELIVERY</li> </ul>"},{"location":"member/python_build/python-build-config-parameters.html#order-settings","title":"Order Settings","text":"<ul> <li>You can adjust your orders, on how they will act when the strategy is 'Resumed' or strategy is 'Exited'</li> <li>Resume Positions from Start: If you have previous trades in your strategy, you can resume your strategy without deleting or overwriting them. Only applicable for DELIVERY mode.</li> <li>Exit Intraday Orders on Stop: If checked, strategy will square-off positions automatically at the end of each trading day.</li> <li>Max Order Count: Maximum number of orders your strategy will execute per day. Once this limit is completed for the day, all BUY/SELL signals for new orders would be automatically ignored.</li> <li>Crossover Accuracy Decimal: When running a crossover strategy, the number of decimals of the underlying indicators to be taken do decide an upward cut, downward cut or no cut.</li> <li>Credit Exposure Factor: Applicable only for Live Trading. Use this to set the exposure limit given by your broker. System will take available funds as 'current fund balance X credit exposure factor' for executing the strategy</li> </ul>"},{"location":"member/python_build/python-build-config-parameters.html#user-parameters","title":"User Parameters","text":"<ul> <li>Use this option to pass various values of the strategy parameters from outside, without changing the code base for every execution. They are accessible as a dictionary called <code>strategy_parameters</code> inside  your strategy class' constructor method.</li> <li>You can customize/create your own parameters for the strategy. Click on +Add New Parameter to begin adding them. They should match with the parameters you have defined in your Python class.</li> </ul> <p>Once Strategy and User Parameters are configured, you can follow these steps to execute your strategy.</p>"},{"location":"member/python_build/python-build-config-parameters.html#follow-these-simple-steps-to-test-the-strategys-performance","title":"Follow these simple steps to test the strategy's performance","text":"<p>Step 1</p> <p>After clicking Save &amp; Start, a pop-up window will appear.</p> <p></p> <p>Step 2</p> <p>In the customizations section, choose Backtesting to backtest or Paper Trading to Paper Trade a strategy.</p> <p>Select the duration option in the customizations section. Add the desired date and time, as well as the quantity/lots. In Backtesting, you will need to put the start date and end date along with time.</p> <p></p> <p>In Paper Trading, you only need to add the start and end time.</p> <p></p> <p>Step 3</p> <p>In the Strategy Configuration section, you can check the parameters added or modified by you. </p> <p>Step 4</p> <p>To begin testing the strategy, click on Execute. </p> <p>Step 5</p> <p>Go to the Analytics section to see the returns and performance of the strategy visualized.</p> <p>Note:</p> <p>The use of Paper Trading would be available from Monday - Friday (excluding exchange's holidays) from 9 AM to 16:00 PM. You can code your strategy &amp; analyze the strategy results 24x7.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Go to the Logs section to see the step-by-step execution of the strategy in logs.</p> <p></p> <p></p> <p>You can rename a strategy by clicking the edit symbol beside the strategy name.</p> <p></p>"},{"location":"member/python_build/python-build-getstarted.html","title":"Setup your Workspace","text":""},{"location":"member/python_build/python-build-getstarted.html#how-to-get-started-with-phoenix","title":"How to get started with Phoenix?","text":"<p>To start developing your own strategy, you must first activate a plan from the Pricing section. Select the Developers tab in the Pricing section and select a plan of your choice.</p> <p></p> <ul> <li>Advanced Phoenix Plan: Develop your own Algorithmic Trading Strategy along with Analytics support, concurrent Strategy Executions, Professional Support, and more.</li> </ul> <p>After selecting your plan, you will be able to begin coding. You can either edit the preloaded Ready templates or use the Code from Scratch section to create your own strategies.</p>"},{"location":"member/python_build/python-build-introduction.html","title":"Phoenix Web","text":""},{"location":"member/python_build/python-build-introduction.html#introduction","title":"Introduction","text":"<p>Now you can code your own strategy easily using our Phoenix service! Begin coding your own strategy from scratch, or modify some of our ready-made templates to suit your needs. Get access to our state-of-the-art AlgoBulls Core Trading Engine, which automatically leverages our infrastructure so that you can access the latest historical data to gauge the performance of your strategies. Tweak the various parameters of your strategy to choose the ideal instrument, indicator values, and profit loss percentages as per your needs! View the performance of your strategy using our visual analytics feature and continue to tweak until you are satisfied with the performance. Get your strategy approved for live trading from our experts and deploy it on 30+ supported brokers without coding any broker integration logic.</p> <p>Select Phoenix from the navigation bar on the left to know more.</p> <p></p>"},{"location":"member/python_build/python-build-introduction.html#an-overview","title":"An overview","text":"<p>Running Strategies: This section shows how many strategies are currently active and running in your account. </p> <p>Strategies Saved: This displays the number of strategies saved in your AlgoBulls account. It also shows the number of maximum strategies that you can save as per your current plan. </p> <p>Execution Time Consumed: You can view the number of minutes that have been used for Backtesting or Paper Trading your strategies.</p> <p>Note:</p> <p>Paper Trading would be available from Monday - Friday (excluding NSE/NASDAQ holidays) within the trading time of that particular exchange. You can code your strategy, execute on Backtesting mode or analyse the strategy results 24x7.</p> <p>Analytics Support: This shows whether your analytics support is active. Analytics support is not available to free plan users.</p> <p>Professional Support: This section connects you to other professional support forums for additional support while developing the strategy. </p> <p>Active Plan: This section displays the current plan active on your AlgoBulls account. </p> <p>Ready Templates: Ready-to-use templates that you can modify and test.</p> <p></p> <p>My Coded Strategies: Strategies that have been coded and saved by you are displayed here. This includes new and modified strategies developed by you.</p> <p></p> <p>Need Support: You can raise support for the particular statregy from here make sure your stategy is present in My Coded Strategies section</p> <p></p> <p>Quick Help: Resources to help you code better.</p> <p></p>"},{"location":"member/python_build/python-build-professional.html","title":"Phoenix Professional Support","text":""},{"location":"member/python_build/python-build-professional.html#are-you-an-experienced-trader-with-limited-coding-experience","title":"Are you an Experienced Trader with Limited Coding Experience?","text":"<p>If you're an experienced trader who excels at building trading strategies based on technical analysis but lacks the coding expertise to implement them, Phoenix offers you the perfect solution \u2013 our Phoenix Professional Support.</p>"},{"location":"member/python_build/python-build-professional.html#how-can-phoenix-professional-support-help-you","title":"How Can Phoenix Professional Support Help You?","text":"<p>Our Phoenix Professional Support bridges the gap between your market expertise in technical analysis and our proficiency in coding and algo trading strategy development. We understand that not everyone is a coding wizard, and that's where our professional support comes in.</p>"},{"location":"member/python_build/python-build-professional.html#getting-started","title":"Getting Started","text":"<p>To take advantage of our Phoenix Professional Support, follow these simple steps:</p> <ol> <li> <p>Click on \"Professional Support\" - Look for the \"Professional Support\" button on the Phoenix Web splash and click on it to get started.    </p> </li> <li> <p>Describe Your Strategy - Once you're in the professional support interface, you'll be prompted to describe your trading strategy. You can provide details on how you want your strategy to work, including entry and exit criteria, risk management rules, and any specific requirements you have.</p> <p>Sample Prompt: \"I want a strategy that buys stocks when the 50-day moving average crosses above the 200-day moving average and sells when it crosses below. Additionally, I'd like a stop-loss of 5% and a take-profit at 10%.\"</p> <p></p> </li> <li> <p>Indicate Technical Indicators - Specify which technical indicators you want to use in your strategy. You can mention indicators like moving averages, RSI, MACD, or any others that are crucial for your trading approach.</p> </li> <li> <p>Submit Your Request - Once you've filled in the necessary information, click on the \"Submit\" button. Your request will be sent to our professional support team.</p> </li> </ol>"},{"location":"member/python_build/python-build-professional.html#what-happens-next","title":"What Happens Next?","text":"<p>Our dedicated professional support team will promptly review your request. They will connect with you to gather any additional details if needed and ensure they have a clear understanding of your requirements.</p> <p>Our team of experienced Python developers and algo trading experts will then get to work on implementing your strategy according to your specifications. We'll ensure that your strategy is coded efficiently and effectively, leveraging the power of Phoenix.</p> <p>You can expect to receive your custom-coded trading strategy as soon as possible, allowing you to put your trading expertise to work without the coding hassle.</p> <p>With Phoenix's Professional Support, you can confidently bring your trading ideas to life and stay ahead in the competitive world of stock market trading. Start automating your strategies today!</p>"},{"location":"member/python_build/python-build-view-results.html","title":"Analytics","text":""},{"location":"member/python_build/python-build-view-results.html#how-to-view-the-results","title":"How to view the Results?","text":"<p>Once you start the strategy, it may take a while for it to complete the execution. You can switch to the Analytics tab after you run your strategy. Even if the strategy execution is not complete, you will still see intermediate results.</p> <p>Analytics: In the analytics section, you can view a strategy\u2019s Stats &amp; various other metrics in the form of graphs like P&amp;L.</p>"},{"location":"member/python_build/python-build-view-results.html#stats","title":"Stats","text":"<p>In this section you can see the total returns, sharpe ratio, sortino ratio, volatility, Max Drawdown, Total wins or Loses, Total short or long trades, hit ratio, number of trades, average trades per day, max profit, max loss, average profit per winning trade, average loss per losing trade. </p>"},{"location":"member/python_build/python-build-view-results.html#cumulative-returns","title":"Cumulative Returns","text":""},{"location":"member/python_build/python-build-view-results.html#profit-loss-currency-or","title":"Profit &amp; Loss (Currency or %)","text":"<p>The trade by trade P&amp;L in Currency or Percentage. </p>"},{"location":"member/python_build/python-build-view-results.html#end-of-year-returns-plot","title":"End of Year Returns Plot (%)","text":""},{"location":"member/python_build/python-build-view-results.html#monthly-returns-histogram","title":"Monthly Returns Histogram (%)","text":""},{"location":"member/python_build/python-build-view-results.html#monthly-returns-heatmap","title":"Monthly Returns Heatmap (%)","text":""},{"location":"member/python_build/python-build-view-results.html#daily-returns","title":"Daily Returns (%)","text":""},{"location":"member/python_build/python-build-view-results.html#underwater-drawdown-plot","title":"Underwater Drawdown Plot (%)","text":""},{"location":"member/python_build/python-build-view-results.html#pl-book","title":"P&amp;L Book","text":"<p>View detailed trade by trade report. Premium users can analyze this data in the form of heatmaps for Gross Profit &amp; Loss, Trading Volume &amp; Total number of Trades. </p>"},{"location":"member/python_build/python-build-view-results.html#user-log","title":"User Log","text":"<p>Real-time logs from strategy execution are displayed in this section. Use these logs to debug your strategy\u2019s behavior and performance. </p>"},{"location":"member/python_build/python-build-view-results.html#order-history","title":"Order History","text":"<p>View the order state transition for every order placed by your strategy in-depth. </p>"},{"location":"member/python_build/python-build-view-results.html#pl-table","title":"P&amp;L Table","text":"<p>View comprehensive trade-by-trade report in a user-friendly tabular format. This table provides details on entry and exit trades, prices, timestamps, transaction types, and trade-by-trade profit and loss. You can display these figures in either percentages or dollars. </p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html","title":"Options Strategy Structure","text":"<p>Links</p> <ul> <li>Code Structure of Strategy (workflow of a strategy)</li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#1-initial-steps","title":"1. Initial steps","text":""},{"location":"member/python_build/strategy_guides/common_options_strategy.html#naming-a-class","title":"Naming a Class","text":"eg: For the above strategy name the class name would be:     <pre><code>StrategyOptionsEMACrossover(StrategyOptionsBaseV2)\n</code></pre> <p>Coding Conventions</p> <pre><code>* Make a class with the same name as the file name\n* Make sure the first letter of each word is in uppercase and the initials should be in uppercase as well.\n* If the class name includes indicator names like EMA, SMA, and VWAP the name should be in uppercase in the class name but not in the file name.\n* Every options strategy is a child class of the StrategyOptionsBaseV2 class.\n</code></pre>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#naming-your-strategy","title":"Naming your Strategy","text":"<p>This name will be displayed in your My Coded Strategies in Phoenix Web, and it will also be the strategy_name when you are fetching all strategies in pyalgotrading. Inside your strategy class, you can write your first parameter as <code>name</code>.     <pre><code>name = 'options_ema_crossover'\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#2-init-method","title":"2. Init method","text":"<p>This method gets called only once when the strategy is started.</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#strategy-info","title":"Strategy info","text":"<p>In the init method add the line given below <pre><code>super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#parameter-creation","title":"Parameter creation","text":"<p>Next, we assign the parameter values to the class variables of the same name as the parameters but in the lowercase format as shown below:</p> <p>eg: <pre><code>self.fresh_order_candle = self.strategy_parameters['FRESH_ORDER_CANDLE']\nself.start_time_hours = self.strategy_parameters['START_TIME_HOURS']\nself.start_time_minutes = self.strategy_parameters['START_TIME_MINUTES']\nself.end_time_hours = self.strategy_parameters['END_TIME_HOURS']\nself.end_time_minutes = self.strategy_parameters['END_TIME_MINUTES']\nself.no_of_strikes_away_ce = self.strategy_parameters['NO_OF_STRIKES_AWAY_CE']\nself.no_of_strikes_away_p = self.strategy_parameters['NO_OF_STRIKES_AWAY_PE']\nself._strike_direction_ce = self.strategy_parameters['STRIKES_DIRECTION_CE']\nself._strike_direction_pe = self.strategy_parameters['STRIKES_DIRECTION_PE']\nself.ema_period_one = self.strategy_parameters['EMA_PERIOD_ONE']\nself.ema_period_two = self.strategy_parameters['EMA_PERIOD_TWO']\nself.target_percentage = self.strategy_parameters['TARGET_PERCENTAGE']\nself.stoploss_percentage = self.strategy_parameters['STOPLOSS_PERCENTAGE']\nself.stoploss_range = self.strategy_parameters['STOPLOSS_RANGE']\nself.stoploss_order_count_allowed = self.strategy_parameters['STOPLOSS_ORDER_COUNT_ALLOWED']\n</code></pre></p> <p>Note</p> <ul> <li>The parameter names and the number of parameters may change for different strategies.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#start-time-and-end-time-creation","title":"Start time and End time creation","text":"<p>Adding Start and End time is useful when you want to define a timerange between which the strategy will be running each day. Add the below code to calculate the strategy start time and end time, from the <code>strategy_parameters</code>.</p> <p>try: <pre><code>    self.candle_start_time = time(hour=self.start_time_hours, minute=self.start_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting start hours and minutes... EXITING')\n    raise SystemExit\n</code></pre> try: <pre><code>    self.candle_end_time = time(hour=self.end_time_hours, minute=self.end_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting end time hours and minutes... EXITING')\n    raise SystemExit\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#strategy-variables","title":"Strategy variables","text":"<p>We create our own strategy variables other than the strategy parameter variables which will be used throughout the strategy.</p> <p>eg: <pre><code>self.main_order = None            # We save the entry order in this variable\nself.stoploss_order = None        # We save the corresponding stoploss exit order of the entry order in this variable\n</code></pre> We initialize the variables with a None value.     !!! Note             There could be more strategy variables required as per the strategy requirement. </p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#3-initialize-method","title":"3. Initialize method","text":"<p>Unlike the <code>init method</code>, this method gets called every day at the beginning of the day once the strategy is started.</p> <p>Here the strategy variables that were initialized as None are again defined as dictionaries/lists except for the <code>self.order_tag_manager</code>.  Create a reference for <code>OrderTagManager</code> as shown below:</p> <pre><code>self.order_tag_manager = OrderTagManager\n</code></pre>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#4-ordertagmanager","title":"4. OrderTagManager","text":"<p>The <code>self.order_tag_manager</code> is used to store/remove the entry/exit orders. The <code>self.order_tag_manager</code> has the following methods:</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#add_order","title":"add_order","text":"<ul> <li>Stores the order object for the given tags. eg:</li> </ul> <pre><code>self.order_tag_manager.add_order(_order, tags=[base_inst_str, entry_key])\n</code></pre> <ul> <li>Here the <code>_order</code> is the order object stored inside the <code>OrderTagManager</code> for the tags <code>base_inst_str</code> and <code>entry_key</code>.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#get_orders","title":"get_orders","text":"<ul> <li>Retrieve the order(s) for the given tags.</li> </ul> <p>eg:</p> <pre><code>self.order_tag_manager.get_orders(tags=[base_inst_str, BrokerExistingOrderPositionConstants.ENTER, entry_key], ignore_errors=True)\n</code></pre> <ul> <li>Here the order object retrieved from the <code>OrderTagManager</code> for the tags <code>base_inst_str, BrokerExistingOrderPositionConstants.ENTER</code> and <code>entry_key</code></li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#remove_tags","title":"remove_tags","text":"<ul> <li>Removes the tags stored in the <code>OrderTagManager</code> along with the orders related stored in that tag</li> </ul> <p>eg:</p> <pre><code>self.order_tag_manager.remove_tags(tags=entry_key)\n</code></pre> <p>Here the <code>entry_key</code> tag is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>When the tag is removed the order objects stored in that tag are also removed but the same order objects would still be present in order tags.</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#remove_order","title":"remove_order","text":"<ul> <li>Remove the order(s) from the <code>OrderTagManager</code> for the given tag(s).</li> </ul> <p>eg:</p> <p><pre><code>self.order_tag_manager.remove_order(main_order)\n</code></pre> Here the <code>main_order</code> order object is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>The order object will be removed from all the tags ta</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#get_internals","title":"get_internals","text":"<pre><code>Returns the values i.e. both the entry and exit orders stored inside the tags list.\n</code></pre>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#5-child-instruments-calculation","title":"5. Child instruments calculation","text":""},{"location":"member/python_build/strategy_guides/common_options_strategy.html#get_ltp","title":"get_ltp","text":"<p>Fetch the ltp of the base instrument (instrument set while executing strategy) <pre><code>ltp = self.broker.get_ltp(self.underlying_instrument)\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#options_instruments_set_up_local","title":"options_instruments_set_up_local","text":"<p>Get the ATM ITM and OTM lists of the child instrument based on the LTP     <pre><code>self.options_instruments_set_up_local(self.underlying_instrument, tradingsymbol_suffix, ltp)\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#get_child_instrument_details","title":"get_child_instrument_details","text":"<p>Select a child instrument from the lists of ATM, ITM, and OTM based on the strike direction and no of strikes given for the child instrument     <pre><code>child_instrument = self.get_child_instrument_details(self.underlying_instrument, tradingsymbol_suffix, strike_direction, no_of_strikes)\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#6-entry-methods","title":"6. Entry Methods","text":""},{"location":"member/python_build/strategy_guides/common_options_strategy.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry","text":"<ul> <li> <p>In this method we process each instrument in the instruments bucket, if there is some entry condition to be checked then we create a <code>get_entry_decision</code> method  that calculates the entry condition like a crossover or compares the latest value of the OHLC data or indicator data.</p> </li> <li> <p>When the order has to be placed we add the <code>instrument</code> to <code>selectd_instruments_bucket</code> and additional data related to the instrument that will be required while placing to the <code>sideband_info</code>. This information is passed to the <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#strategy_enter_position","title":"strategy_enter_position","text":"<ul> <li>Here is where we actually place the entry order for which we calculate the quantity for the order to be placed. If the order is placed successfully we save the order in a class variable such that we can access the order object via the variable in the exit methods.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#7-exit-methods","title":"7. Exit Methods","text":""},{"location":"member/python_build/strategy_guides/common_options_strategy.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit","text":"<ul> <li>This method is called before the entry methods because in the case of delivery strategy we want to resume and exit previous day orders before we can place new entry orders.</li> <li>Here we place stoploss exit orders, target exit orders, and check for exit conditions for the open entry orders.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#strategy_exit_position","title":"strategy_exit_position","text":"<ul> <li>Here is where we actually place the exit order for where we exit the order which was placed during entry. If the order is placed successfully we clear the order in a class variable such that we can add new orders to the vacant place in variable in the entry methods.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#8-other-common-methods","title":"8. Other common methods","text":"<p>There are other methods that are used in the strategy:</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#check_and_place_stoploss_order","title":"check_and_place_stoploss_order","text":"<p>This method is called in the <code>strategy_select_instruments_for_exit</code> when our entry order is open, and we want to place a stoploss exit order for the same.</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#set_all_none","title":"set_all_none","text":"<p>This method is called in the <code>strategy_exit_position</code> when our entry order has exited, and we want to remove the order object from the <code>self.main_order</code> variable.</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#options_instruments_set_up_local_1","title":"options_instruments_set_up_local","text":"<p>This method is called in the <code>strategy_select_instruments_for_entry</code> to fetch the ATM, ITM, and OTM lists of the child instruments based on the LTP of the base instrument. </p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#get_child_instrument_details_1","title":"get_child_instrument_details","text":"<p>This method is called in the <code>strategy_select_instruments_for_entry</code> to fetch a single child instrument based on the no of strikes and strike direction.</p>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#9-cleanup","title":"9. Cleanup","text":"<ol> <li>Add comments and docstrings wherever possible to improve code readability.</li> <li>Once the strategy is completed you can optimize imports, give proper indentation and proper formatting to the strategy code and remove unwanted imports, variables, and methods before delivering the code.</li> </ol>"},{"location":"member/python_build/strategy_guides/common_options_strategy.html#10-check-out-our-docs-for-developed-options-strategies","title":"10. Check out our docs for developed Options strategies","text":"<ul> <li>Options Bear Call Ladder</li> <li>Options Bear Put Ladder</li> <li>Options Bull Call Ladder</li> <li>Options Bull Put Ladder</li> <li>Options Long Iron Butterfly</li> <li>Options Straddle</li> <li>Options Strangle</li> </ul> <p>Tip</p> <p>To know more about a strategy from our given template, simply check the first line of comment in the code of that specific strategy.  </p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html","title":"Regular Strategy Structure","text":"<p>Links</p> <ul> <li>Code Structure of Strategy (workflow of a strategy)</li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#1-initial-steps","title":"1. Initial steps","text":""},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#naming-a-class","title":"Naming a Class","text":"eg: For the above strategy name the class name would be:     <pre><code>StrategyFuturesEMACrossover(StrategyBase)\n</code></pre> <p>Coding Conventions</p> <pre><code>* Make a class with the same name as the file name\n* Make sure the first letter of each word is in uppercase and the initials should be in uppercase as well.\n* If the class name includes indicator names like EMA, SMA, and VWAP the name should be in uppercase in the class name but not in the file name.\n* Every strategy is a child class of the StrategyBase class.\n</code></pre>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#naming-your-strategy","title":"Naming your Strategy","text":"<p>This name will be displayed in your My Coded Strategies in Phoenix Web, and it will also be the strategy_name when you are fetching all strategies in pyalgotrading. Inside your strategy class, you can write your first parameter as <code>name</code>.     <pre><code>name = 'futures_ema_crossover'\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#2-init-method","title":"2. Init method","text":"<p>This method gets called only once when the strategy is started.</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#strategy-info","title":"Strategy info","text":"<p>In the init method add the line given below <pre><code>super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#parameter-creation","title":"Parameter creation","text":"<p>Next we assign the parameter values to the class variables of the same name as the parameters but in the lowercase format, as shown below:</p> <p>eg: <pre><code>self.fresh_order_candle = self.strategy_parameters['FRESH_ORDER_CANDLE']\nself.start_time_hours = self.strategy_parameters['START_TIME_HOURS']\nself.start_time_minutes = self.strategy_parameters['START_TIME_MINUTES']\nself.end_time_hours = self.strategy_parameters['END_TIME_HOURS']\nself.end_time_minutes = self.strategy_parameters['END_TIME_MINUTES']\nself.ema_period_one = self.strategy_parameters['EMA_PERIOD_ONE']\nself.ema_period_two = self.strategy_parameters['EMA_PERIOD_TWO']\nself.target_percentage = self.strategy_parameters['TARGET_PERCENTAGE']\nself.stoploss_percentage = self.strategy_parameters['STOPLOSS_PERCENTAGE']\nself.stoploss_range = self.strategy_parameters['STOPLOSS_RANGE']\nself.stoploss_order_count_allowed = self.strategy_parameters['STOPLOSS_ORDER_COUNT_ALLOWED']\n</code></pre></p> <p>Note</p> <ul> <li>The parameter names and the number of parameters may be different for different strategies.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#start-time-and-end-time-creation","title":"Start time and End time creation","text":"<p>Adding Start and End time is useful when you want to define a timerange between which the strategy will be running each day. Add the below code to calculate the strategy start time and end time, from the <code>strategy_parameters</code>.     try:     <pre><code>    self.candle_start_time = time(hour=self.start_time_hours, minute=self.start_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting start hours and minutes... EXITING')\n    raise SystemExit\n</code></pre>     try:      <pre><code>    self.candle_end_time = time(hour=self.end_time_hours, minute=self.end_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting end time hours and minutes... EXITING')\n    raise SystemExit\n</code></pre></p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#strategy-variables","title":"Strategy variables","text":"<p>We create our own strategy variables other than the strategy parameter variables which will be used throughout the strategy.</p> <p>eg: <code>self.order_tag_manager = None</code> </p> <p>We initialize the variables with a None value.</p> <p>Note</p> <pre><code>There could be more strategy variables required as per the strategy requirement.\n</code></pre>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#3-initialize-method","title":"3. Initialize method","text":"<p>Unlike the <code>init method</code>, this method gets called every day at the beginning of the day once the strategy is started.</p> <p>Here the strategy variables that were initialized as None are again defined as dictionaries/lists except for the <code>self.order_tag_manager</code>.  Create a reference for <code>OrderTagManager</code> as shown below:</p> <pre><code>self.order_tag_manager = OrderTagManager\n</code></pre>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#4-ordertagmanager","title":"4. OrderTagManager","text":"<p>The <code>self.order_tag_manager</code> is used to store/remove the entry/exit orders. The <code>self.order_tag_manager</code> has the following methods:</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#add_order","title":"add_order","text":"<ul> <li>Stores the order object for the given tags. eg: <pre><code>self.order_tag_manager.add_order(_order, tags=[base_inst_str, entry_key])\n</code></pre></li> <li>Here the <code>_order</code> is the order object stored inside the <code>OrderTagManager</code> for the tags <code>base_inst_str</code> and <code>entry_key</code>.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#get_orders","title":"get_orders","text":"<ul> <li>Retrieve the order(s) for the given tags. eg: <pre><code>self.order_tag_manager.get_orders(tags=[base_inst_str, BrokerExistingOrderPositionConstants.ENTER, entry_key], ignore_errors=True)\n</code></pre></li> <li>Here the order object retrieved from the <code>OrderTagManager</code> for the tags <code>base_inst_str, BrokerExistingOrderPositionConstants.ENTER</code> and <code>entry_key</code></li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#remove_tags","title":"remove_tags","text":"<ul> <li>Removes the tags stored in the <code>OrderTagManager</code> along with the orders related stored in that tag eg: <pre><code>self.order_tag_manager.remove_tags(tags=entry_key)\n</code></pre></li> <li>Here the <code>entry_key</code> tag is removed from the <code>OrderTagManager</code>.</li> </ul> <p>Note</p> <p>When the tag is removed the order objects stored in that tag are also removed but the same order objects would still be present in the order tags.</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#remove_order","title":"remove_order","text":"<ul> <li>Remove the order(s) from the <code>OrderTagManager</code> for the given tag(s). eg:</li> </ul> <pre><code>self.order_tag_manager.remove_order(main_order)\n</code></pre> <p>Here the <code>main_order</code> order object is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>The order object will be removed from all the tags ta</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#get_internals","title":"get_internals","text":"<ul> <li>Returns the values i.e. both the entry and exit orders stored inside the tags list.   </li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#5-entry-methods","title":"5. Entry Methods","text":""},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry","text":"<ul> <li> <p>In this method we process each instrument in the instruments bucket, if there is some entry condition to be checked then we create an <code>get_entry_decision</code> method  that calculates the entry condition like a crossover or compares the latest value of the OHLC data or indicator data.</p> </li> <li> <p>When the order has to be placed we add the <code>instrument</code> to <code>selected_instruments_bucket</code> and additional data related to the instrument that will be required while placing to the <code>sideband_info</code>. This information is passed to the <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#strategy_enter_position","title":"strategy_enter_position","text":"<ul> <li>Here is where we actually place the entry order for which we calculate the quantity for the order to be placed. If the order is placed successfully we save the order in a class variable such that we can access the order object via the variable in the exit methods.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#6-exit-methods","title":"6. Exit Methods","text":""},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit:","text":"<ul> <li>This method is called before the entry methods because in the case of delivery strategy we want to resume and exit previous day orders before we can place new entry orders.</li> <li>Here we place stoploss exit orders, target exit orders, and check for exit conditions for the open entry orders.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#strategy_exit_position","title":"strategy_exit_position","text":"<ul> <li>Here is where we actually place the exit order for where we exit the order which was placed during entry. If the order is placed successfully we clear the order in a class variable such that we can add new orders to the vacant place in variable in the entry methods.</li> </ul>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#7-other-common-methods","title":"7. Other common methods","text":"<p>There are other methods that are used in the strategy:</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#check_and_place_stoploss_order","title":"check_and_place_stoploss_order","text":"<p>This method is called in the <code>strategy_select_instruments_for_exit</code> when our entry order is open, and we want to place a stoploss exit order for the same.</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#set_all_none","title":"set_all_none","text":"<p>This method is called in the <code>strategy_exit_position</code> when our entry order has exited, and we want to remove the order object from the <code>self.main_order</code> variable.</p>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#8-cleanup","title":"8. Cleanup","text":"<ol> <li>Add comments and docstrings wherever possible to improve code readability.</li> <li>Once the strategy is completed you can optimize imports, give proper indentation and proper formatting to the strategy code and remove unwanted imports, variables, and methods before delivering the code.</li> </ol>"},{"location":"member/python_build/strategy_guides/common_regular_strategy.html#10-check-out-our-docs-for-developed-regular-strategies","title":"10. Check out our docs for developed Regular strategies","text":"<ul> <li>Aroon Crossover</li> <li>Bollinger Bands</li> <li>EMA Crossover</li> <li>Inverse EMA Scalping</li> <li>Reverse RSI</li> <li>Stochastic Crossover</li> <li>VWAP Crossover</li> </ul> <p>Tip</p> <p>To know more about a strategy from our given template, simply check the first line of comment in the code of that specific strategy.  </p>"},{"location":"member/python_build/strategy_guides/structure.html","title":"Code Structure of Strategy","text":"<p>Coding Prerequisites</p> <ul> <li>For pyalgotrading check here.</li> <li>For Phoenix Web check here.</li> </ul>"},{"location":"member/python_build/strategy_guides/structure.html#methods","title":"Methods","text":""},{"location":"member/python_build/strategy_guides/structure.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry()","text":"<p>This function helps you choose which trading instruments you want your strategy to work with. The system will use this function to go through each instrument one by one, at each candle's time. You get to write code that decides whether to place an order for a specific instrument or not.</p>"},{"location":"member/python_build/strategy_guides/structure.html#strategy_enter_position","title":"strategy_enter_position()","text":"<p>This function is where you can place orders for the instruments you selected earlier. It's executed for each instrument you picked in the previous function.</p>"},{"location":"member/python_build/strategy_guides/structure.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit()","text":"<p>After you've entered a position for an instrument, this function is called for each of those instruments at each candle interval. You can use it to decide whether an instrument should be exited from the position.</p>"},{"location":"member/python_build/strategy_guides/structure.html#strategy_exit_position","title":"strategy_exit_position()","text":"<p>In this function, you can close or exit positions for the instruments you marked for exiting in the previous function. It's done instrument by instrument.</p>"},{"location":"member/python_build/strategy_guides/structure.html#supporting-methods","title":"Supporting Methods","text":"<p>You have the following supporting methods:</p>"},{"location":"member/python_build/strategy_guides/structure.html#init","title":"init()","text":"<p>This method is like a starter for your strategy. It checks if the values you give it make sense and sets up some useful information for your strategy to use.</p>"},{"location":"member/python_build/strategy_guides/structure.html#initialize","title":"initialize()","text":"<p>This method is called when your strategy begins, both at the very start and at the beginning of each trading day. It's like setting up your strategy's workspace and giving your tools a starting position.</p>"},{"location":"member/python_build/strategy_guides/structure.html#name","title":"name()","text":"<p>This method gives your strategy a special name. It's like giving your strategy a unique nickname.</p>"},{"location":"member/python_build/strategy_guides/structure.html#versions_supported","title":"versions_supported()","text":"<p>This method lets you specify which version of the AlgoBulls Platform your strategy works well with. It's like saying, \"My strategy is ready for this specific version of the platform.\"</p>"},{"location":"member/python_build/strategy_guides/structure.html#utility-functions","title":"Utility Functions","text":"<p>You have the following utility function to be used in this strategy :</p> <p>Links</p> <ul> <li>Strategy Structure (regular)</li> <li>Strategy Structure (options)</li> </ul>"},{"location":"member/python_build/strategy_guides/structure.html#get_crossover_value","title":"get_crossover_value()","text":"This handy function calculates something called the \"crossover value\" for you. It's like having a calculator that figures out this specific value for your strategy."},{"location":"member/python_build/strategy_guides/structure.html#flowchart","title":"Flowchart","text":"<p>Once you create your own strategy or use a ready strategy from the pyalgostrategypool package, this is how it works internally on the AlgoBulls Core Trading Engine.</p> <p></p>"},{"location":"member/strategies/aroon_crossover.html","title":"Aroon Crossover","text":"<p>This is a trading strategy called \"Aroon Crossover\" implemented in Python using the PyAlgoTrading library. The strategy is based on the Aroon indicator crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebooks for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebook for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/aroon_crossover.html#aroon-indicator","title":"Aroon Indicator","text":"<ul> <li> <p>In the stock market, Aroon refers to the Aroon indicator, which is a technical analysis tool used to measure the strength and direction of a trend. It consists of two lines, the Aroon-Up line and the Aroon-Down line.</p> </li> <li> <p>The Aroon-Up line measures the number of periods since the highest price within a given period, while the Aroon-Down line measures the number of periods since the lowest price within a given period. The Aroon indicator ranges from 0 to 100, with values closer to 100 indicating a strong trend and values closer to 0 indicating a weak or non-existent trend.</p> </li> <li> <p>Traders and investors use the Aroon indicator to identify potential trend reversals, assess the strength of a trend, and generate buy or sell signals. For example, when the Aroon-Up line crosses above the Aroon-Down line, it may suggest a bullish trend, while a cross below may indicate a bearish trend.</p> </li> <li> <p>It is important to note that the Aroon indicator is just one of many tools used in technical analysis, and its effectiveness can vary depending on market conditions and other factors. It is often used in conjunction with other indicators and analysis techniques to make informed trading decisions.</p> </li> </ul> Fig.1 - SPY candle chart (top), Aroon Indicator for that chart (bottom)"},{"location":"member/strategies/aroon_crossover.html#strategy-overview","title":"Strategy Overview","text":"<p>This strategy, called Aroon Crossover, implements a crossover strategy using the Aroon indicator. It generates entry and exit signals based on the crossover of Aroon Up and Aroon Down values.</p>"},{"location":"member/strategies/aroon_crossover.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIME_PERIOD None greater than 0 The period for which we calculate the Aroon Value"},{"location":"member/strategies/aroon_crossover.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the Aroon Up and Aroon Down values for a given instrument based on the historical data. It uses the <code>talib.AROON</code> function from the Talib library to calculate the values. The method then determines the crossover of Aroon Up and Aroon Down and returns the corresponding entry or exit action.</p>"},{"location":"member/strategies/bollinger_bands.html","title":"Bollinger Bands","text":"<p>This is a trading strategy called \"Bollinger Bands\" implemented in Python using the PyAlgoTrading library. The strategy is based on the bollinger bands indicator values.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebooks for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebook for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/bollinger_bands.html#bollinger-bands-indicator","title":"Bollinger Bands Indicator","text":"<p>Bollinger Bands consists of a middle band (typically a 20-day Simple Moving Average) and two bands that represent the upper and lower price boundaries based on standard deviations. The bands adjust dynamically with market volatility.</p> <p>Key points about Bollinger Bands:</p> <ul> <li>The middle band is a moving average, while the upper and lower bands are calculated by adding/subtracting standard deviations from the middle band.</li> <li>Bollinger Bands help assess price volatility and identify potential overbought or oversold market conditions.</li> <li>A narrowing of the bands (Bollinger Squeeze) suggests low volatility, often followed by increased volatility and potential price breakout.</li> <li>Touching or exceeding the upper band may indicate an overbought market, while touching or falling below the lower band may suggest an oversold market.</li> <li>Price reversals can be observed when the price moves from one band to the other.</li> <li>The upper and lower bands can act as dynamic support and resistance levels.</li> <li>Bollinger Bands are used in combination with other indicators and analysis techniques to make trading decisions. They are not a standalone strategy but provide valuable insights when combined with other tools like the RSI.</li> </ul> Fig.1 - SPY candle chart (top) with Bollinger Bands (purple), 20 day standard deviation graph (bottom)"},{"location":"member/strategies/bollinger_bands.html#strategy-overview","title":"Strategy Overview","text":"<p>This strategy, called Bollinger Bands, is an implementation of the Bollinger Bands indicator. It uses the Bollinger Bands values to compare with previous candle's OPEN, HIGH, LOW and CLOSE values and generate entry and exit signals for trading instruments.</p>"},{"location":"member/strategies/bollinger_bands.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIME_PERIOD None greater than 0 Period (number of candles) by which Bollinger Bands are calculated STANDARD_DEVIATION None between 0 to 10 Standard deviation (in percent) for upper and lower band from the signal bands"},{"location":"member/strategies/bollinger_bands.html#decision-calculation","title":"Decision Calculation","text":"<p>The <code>get_decision</code> method calculates the Bollinger Bands values for a given instrument based on the OHLC (Open, High, Low, Close) historical data. It uses the <code>talib.BBANDS</code> function from the Talib library to calculate the upper and lower bands. The method compares the previous candle's open, low, and close values with the upper and lower bands to determine the entry or exit action. If the conditions for a buy or sell signal are met, the corresponding action is returned.</p>"},{"location":"member/strategies/ema_crossover.html","title":"EMA Crossover","text":"<p>This is a trading strategy called \"EMA Regular Order Strategy\" implemented in Python using the PyAlgoTrading library. The strategy is based on the exponential moving average crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebooks for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebook for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/ema_crossover.html#ema-indicator","title":"EMA indicator","text":"<p>Exponential Moving Averages (EMAs) are a popular technical analysis tool used in the stock market. They are similar to Simple Moving Averages (SMAs), but they place greater emphasis on recent price data.</p> <p>Here is a summary of Exponential Moving Averages:</p> <ul> <li>An Exponential Moving Average is a type of moving average that assigns more weight to recent prices, making it more responsive to current market conditions.</li> <li>Unlike the SMA, which gives equal weight to all data points, the EMA assigns exponentially decreasing weights to older data points.</li> <li>The formula for calculating an EMA involves using a smoothing factor or multiplier that determines the weight given to the previous EMA value and the current price.</li> <li>The most common period used for EMAs is 12 and 26 days, representing short-term and long-term trends, respectively.</li> <li>EMAs are commonly used to identify trend direction, support and resistance levels, and potential entry or exit points.</li> <li>When the price crosses above the EMA, it may signal a bullish trend, while a cross below the EMA may suggest a bearish trend.</li> <li>The EMA is more responsive to price changes compared to the SMA, making it useful for short-term trading strategies.</li> <li>EMAs are often used in conjunction with other technical indicators, such as the Moving Average Convergence Divergence (MACD), to generate trading signals.</li> <li>Traders and investors use Exponential Moving Averages to smooth out price fluctuations, identify trend reversals, and determine potential support and resistance levels. They provide a visual representation of the average price over a specific period, with greater weight given to recent prices.</li> </ul> Fig.1 - IBM candle chart (top) with EMA (green) and SMA (red) lines"},{"location":"member/strategies/ema_crossover.html#strategy-overview","title":"Strategy Overview","text":"<p>This strategy, called EMA Regular Order Strategy, implements a crossover strategy using Exponential Moving Averages (EMA). It generates entry and exit signals based on the crossover of two EMAs.</p>"},{"location":"member/strategies/ema_crossover.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIME_PERIOD1 None greater than 0 Period (number of candles) by which EMA-1 is calculated TIME_PERIOD2 None greater than 0 Period (number of candles) by which EMA-2 is calculated"},{"location":"member/strategies/ema_crossover.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the crossover value based on the two EMAs of the closing prices. It uses the <code>talib.EMA</code> function from the Talib library to calculate the EMAs. The method then determines the crossover between the two EMAs and returns the corresponding value (-1, 0, or 1).</p>"},{"location":"member/strategies/fee.html","title":"Frequently Encountered Errors","text":"<p>This page provides insights into common errors encountered while developing and executing algorithmic trading strategies, along with their possible causes and solutions. These errors are often logged in the user.log file.</p>"},{"location":"member/strategies/fee.html#execution-time-exceeded-timeout_duration-duration-of-60-sec","title":"<code>Execution time exceeded timeout_duration duration of 60 sec.</code>","text":""},{"location":"member/strategies/fee.html#possible-causes","title":"Possible Causes","text":"<ul> <li> <p>Historical Data Fetching Duration:</p> <p>Fetching historical data may take longer, especially if the duration is set to a large number of days.</p> </li> <li> <p>Suboptimal Decision-Making Logic:</p> <p>The decision-making logic might be suboptimal, leading to increased processing time.</p> </li> <li> <p>Sequential Execution Approach:</p> <p>A sequential approach of fetching historical data and then making the decisions in case of multiple instruments can contribute to delays.</p> </li> <li> <p>Real-Time Calculations:</p> <p>If there are calculations that could be pre-conditioned or pre-calculated before the market opens, optimizing real-time calculations might help.</p> </li> </ul>"},{"location":"member/strategies/fee.html#solutions","title":"Solutions","text":"<ul> <li> <p>Optimize Historical Data Fetching:</p> <p>Consider reducing the number of days for which historical data is fetched. A shorter duration, like 5 days, can be a reasonable compromise.</p> <pre><code>@staticmethod\ndef get_historical_data_duration():\n    return 5\n</code></pre> </li> <li> <p>Optimize the Decision-Making logic:</p> <p>Revisit your strategy logic and check if any code block can be optimized.</p> </li> <li> <p>Batch Processing for Decision-Making:</p> <p>In case of multiple instruments, lets say you are fetching the historical data for the instrument, and have implemented the decision-making logic for whether this instrument should get selected for order placement or not. Once this is done, you repeat the same process for the next instrument. Instead of a sequential approach, try fetching historical data for all instruments in one loop and then making decisions for all instruments in another loop.</p> </li> <li> <p>Pre-Calculate Conditions:</p> <p>Identify conditions that can be pre-calculated before the market opens. Adjust the strategy start time to accommodate these pre-calculations. If certain conditions can be chcked before the market starts, set the trading start time of the strategy to a value before the market start time. Add specific checks inside the strategy to ensure that the actual order placement, etc. are executed after the market starts.</p> </li> </ul>"},{"location":"member/strategies/fee.html#no-data-in-charts","title":"<code>No Data in Charts</code>","text":""},{"location":"member/strategies/fee.html#description","title":"Description","text":"<p>Encountering the \"NO data in charts\" error while running a strategy is a common issue. This problem arises when using a small quantity with very large funds.  Limited visibility on charts due to large funds with a small quantity setting.</p>"},{"location":"member/strategies/fee.html#possible-causes_1","title":"Possible Causes","text":"<ul> <li> <p>Scale Discrepancy:</p> <p>The large fund amount may lead to extremely small values on the y-axis, which are not visible, causing charts to appear empty.</p> </li> <li> <p>Default Quantity and Funds:</p> <p>Default quantity and funds settings, if not adjusted, may lead to similar issues with empty charts.</p> </li> </ul>"},{"location":"member/strategies/fee.html#solutions_1","title":"Solutions","text":"<ul> <li> <p>Normalize Values:</p> <p>Normalize values by using larger quantities or scaling to ensure meaningful data display across various scenarios.</p> </li> <li> <p>Adjust Default Settings:</p> <p>Consider adjusting default values to something more suitable for common scenarios.  Charts displaying proper data with suitable funds and quantity settings</p> </li> </ul>"},{"location":"member/strategies/fee.html#openai-api-quota-depletion","title":"<code>OpenAI API Quota Depletion</code>","text":""},{"location":"member/strategies/fee.html#description_1","title":"Description","text":"<p>The \"OpenAI API current quota exceeded\" error indicates that the current quota or available credits for the OpenAI API has been exhausted. This typically occurs when the allotted usage limit for the API key has been reached.</p>"},{"location":"member/strategies/fee.html#possible-causes_2","title":"Possible Causes","text":"<ul> <li> <p>Credit Depletion:</p> <p>The API key has utilized its entire quota or available credits.</p> </li> </ul>"},{"location":"member/strategies/fee.html#solutions_2","title":"Solutions","text":"<ul> <li> <p>Purchase More Credits:</p> <p>To continue using the OpenAI API, consider purchasing additional credits or upgrading your plan to increase the quota. Click here to add more credits.   </p> </li> <li> <p>Alternative Key:</p> <p>If available, switch to a different API key that still has unused credits.</p> </li> </ul>"},{"location":"member/strategies/how_to.html","title":"How to","text":""},{"location":"member/strategies/how_to.html#fetch-last-traded-price-ltp-of-an-instrument","title":"Fetch Last Traded Price (LTP) of an Instrument","text":"<p>To fetch the Last Traded Price (LTP) of any instrument, use the following method:</p> <pre><code>self.broker.get_ltp(instrument)\n</code></pre> <p>This method retrieves the last traded price of the specified instrument.</p>"},{"location":"member/strategies/how_to.html#access-attributes-of-an-instrument-object","title":"Access Attributes of an Instrument Object","text":"<p>An instrument object typically contains various attributes providing information about the instrument:</p> <ul> <li><code>exchange</code>: Exchange on which the instrument is listed.</li> <li><code>expiry</code>: Expiration date of the instrument (applicable for derivatives).</li> <li><code>lot_size</code>: Number of units in a single lot of the instrument.</li> <li><code>strike_price</code>: Strike price of the instrument (applicable for options).</li> <li><code>segment</code>: Trading segment of the instrument.</li> <li><code>tradingsymbol</code>: Unique trading symbol of the instrument.</li> <li><code>tick_size</code>: Minimum price movement (tick) of the instrument.</li> </ul> <p>To access these attributes, use the following notation:</p> <pre><code>instrument.exchange\ninstrument.expiry\ninstrument.lot_size\ninstrument.strike_price\ninstrument.segment\ninstrument.tradingsymbol\ninstrument.tick_size\n</code></pre>"},{"location":"member/strategies/how_to.html#fetch-different-types-of-instruments","title":"Fetch Different Types of Instruments","text":"<p>To fetch different types of instruments, use the <code>get_instruments_filtered</code> method:</p> <p>Method Signature: <pre><code>self.broker.get_instruments_filtered(segment, tradingsymbol_exact=None, tradingsymbol_prefix=None, tradingsymbol_suffix=None, expiry=None)\n</code></pre> Example: <pre><code>from datetime import date\ninstruments = self.broker.get_instruments_filtered(segment='NSE_FO', tradingsymbol_prefix='NIFTY', expiry=date(2024,01,04))\n</code></pre></p> <p>This example fetches equity instruments with a trading symbol prefix of 'NIFTY' and an expiry date of 4th January, 2024.</p>"},{"location":"member/strategies/how_to.html#access-attributes-of-an-order-object","title":"Access Attributes of an Order Object","text":"<p>An order object typically contains various attributes providing information about the order:</p> <ul> <li><code>entry_price</code>: Entry price of the order.</li> <li><code>id</code>: AlgoBulls specific alphanumeric order ID.</li> <li><code>instrument</code>: Instrument for which the order is placed.</li> <li><code>order_code</code>: Code for the order type (INTRADAY/DELIVERY).</li> <li><code>order_time</code>: Time at which the order is placed.</li> <li><code>order_transaction_type</code>: Type of transaction (BUY/SELL).</li> <li><code>order_type</code>: Type of order (REGULAR/BRACKET/COVER).</li> <li><code>order_variety</code>: Variety of the order (MARKET, LIMIT, STOPLOSS_MARKET, STOPLOSS_LIMIT).</li> <li><code>position</code>: Position (ENTER/EXIT).</li> <li><code>price</code>: Price of the order.</li> <li><code>quantity</code>: Order quantity.</li> <li><code>quantity_pending</code>: Quantity that is currently pending.</li> <li><code>trigger_price</code>: Trigger price of the order.</li> </ul> <p>To access these attributes, use the following notation: <pre><code>order.entry_price\norder.id\norder.instrument\norder.order_code\norder.order_time\norder.order_transaction_type\norder.order_type\norder.order_variety\norder.position\norder.price\norder.quantity\norder.quantity_pending\norder.trigger_price\n</code></pre></p>"},{"location":"member/strategies/inverse_ema_scalping.html","title":"Inverse EMA Scalping","text":"<p>This is a trading strategy called \"Inverse EMA Scalping Regular Order Strategy\" implemented in Python using the PyAlgoTrading library. The strategy is based on the exponential moving average crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebooks for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebooks for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/inverse_ema_scalping.html#what-is-inverse-ema","title":"What is Inverse EMA","text":"<p>Inverse EMA, also known as Reverse Exponential Moving Average (REMA), is a variation of the Exponential Moving Average (EMA) in the stock market. While the EMA gives more weight to recent price data, the Inverse EMA assigns more weight to older data points.</p> <p>Here is a summary of Inverse EMA:</p> <ul> <li>Inverse EMA is calculated by applying the EMA formula in reverse, giving greater weight to older data points and less weight to recent prices.</li> <li>Instead of smoothing out price fluctuations like the EMA, the Inverse EMA amplifies them, making it more responsive to historical data.</li> <li>The formula for calculating Inverse EMA is similar to the EMA, but it uses a different smoothing factor or multiplier that assigns higher weight to older data points.</li> <li>The Inverse EMA is primarily used to identify historical patterns and potential turning points in the market.</li> <li>When the price crosses above the Inverse EMA, it may suggest a potential reversal from a downtrend to an uptrend, and vice versa when the price crosses below the Inverse EMA.</li> <li>Inverse EMA is not as widely used as the EMA or other moving averages, and its applications may vary among traders and analysts.</li> <li>Inverse EMA is a less commonly used variation of the Exponential Moving Average. While the EMA is designed to provide a smoothed average of recent prices, the Inverse EMA emphasizes historical data, potentially highlighting significant turning points in the market. Traders and analysts who utilize the Inverse EMA may incorporate it into their technical analysis toolkit to complement other indicators and gain insights into price reversals and historical patterns.</li> </ul>"},{"location":"member/strategies/inverse_ema_scalping.html#strategy-overview","title":"Strategy Overview","text":"<p>This strategy implements a scalping strategy using Exponential Moving Averages (EMA). It generates entry and exit signals based on the inverse crossover of two EMAs.</p>"},{"location":"member/strategies/inverse_ema_scalping.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description LARGER_TIME_PERIOD None greater than 0 Period (number of candles) by which large period EMA is calculated SMALLER_TIME_PERIOD None greater than 0 Period (number of candles) by which short period EMA is calculated"},{"location":"member/strategies/inverse_ema_scalping.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the crossover value based on the inverse crossover of the two EMAs of the closing prices. It uses the <code>talib.EMA</code> function from the Talib library to calculate the EMAs. The method then determines the inverse crossover between the two EMAs and returns the corresponding value (-1, 0, or 1).</p>"},{"location":"member/strategies/macd_crossover.html","title":"MACD Crossover","text":"<p>This is a trading strategy called \"MACD Crossovers\" implemented in Python using the PyAlgoTrading library. The strategy is based on the MACD indicator crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/macd_crossover.html#macd-crossover_1","title":"MACD Crossover","text":"<p>In the dynamic world of stock trading, mastering effective strategies is the key to success. The Moving Average Convergence Divergence (MACD) Crossover strategy is a powerful tool that can help traders identify potential entry and exit points in the stock market.</p> <p>Here is a summary of RSI and MACD in the stock market: - The MACD is a trend-following momentum indicator that consists of two lines: the MACD line and the Signal line.  - A bullish signal is generated when the MACD line crosses above the Signal line, indicating a potential uptrend.  - Conversely, a bearish signal occurs when the MACD line crosses below the Signal line, suggesting a potential downtrend. - When the MACD crosses above the Signal line, it's a signal to consider a long (BUY) position.  - Conversely, when the MACD crosses below the Signal line, it may be time to think about a short (SELL) position.</p>"},{"location":"member/strategies/macd_crossover.html#strategy-overview","title":"Strategy Overview","text":"<p>The MACD Crossover strategy is a robust approach that leverages the power of the MACD indicator to identify potential entry and exit points in the stock market.</p>"},{"location":"member/strategies/macd_crossover.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIMEPERIOD_FAST None greater than 0 Period (number of candles) by which EMA 2 is calculated TIMEPERIOD_SLOW None greater than 0 Period (number of candles) by which EMA 2 is calculated TIMEPERIOD_SIGNAL None greater than 0 Period (number of candles) by which  moving average is calculated"},{"location":"member/strategies/macd_crossover.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the crossover value based on the inverse crossover of the two EMAs of the closing prices. It uses the <code>talib.MACD</code> function from the Talib library to calculate the MACDs. The method then determines the crossover between the two MACDs and returns the corresponding value (-1, 0, or 1).</p>"},{"location":"member/strategies/mean_reversion_bollinger_bands.html","title":"Mean Reversion Bollinger Bands","text":"<p>This is a trading strategy called \"Mean Reversion Bollinger Bands\" implemented in Python using the PyAlgoTrading library. The strategy is based on the bollingerbands indicator.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/mean_reversion_bollinger_bands.html#mean-reversion-bollinger-bands_1","title":"Mean Reversion Bollinger Bands","text":"<p>In the dynamic world of stock trading, effective strategies can make all the difference. The Mean Reversion Bollinger Bands strategy is a powerful tool that traders can use to identify potential entry and exit points in the stock market.</p> <p>Here is a summary of RSI and MACD in the stock market: - Bollinger Bands are a volatility indicator that consists of a middle band (usually a simple moving average), an upper band, and a lower band. These bands expand and contract based on price volatility. The strategy leverages these bands to identify potential mean reversion opportunities. - Mean reversion is the idea that prices tend to revert to their historical average over time. In this strategy, traders look for situations where the price deviates significantly from the middle Bollinger Band and expect it to revert to the mean. - The Mean Reversion Bollinger Bands strategy involves identifying price movements that touch or cross the upper or lower bands and anticipating a reversal.  - When the price touches the upper band, traders may consider a short (SELL) position, expecting a downward move. - Conversely, when the price touches the lower band, it may signal a potential long (BUY) opportunity, anticipating an upward move.</p>"},{"location":"member/strategies/mean_reversion_bollinger_bands.html#strategy-overview","title":"Strategy Overview","text":"<p>The Mean Reversion Bollinger Bands strategy is a robust approach that leverages the power of Bollinger Bands to identify potential mean reversion opportunities in the stock market.</p>"},{"location":"member/strategies/mean_reversion_bollinger_bands.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIME_PERIOD None greater than 0 Period (number of candles) by which Bollinger Bands are calculated STANDARD_DEVIATION None between 0 to 10 Standard deviation (in percent) for upper and lower band from the signal bands"},{"location":"member/strategies/mean_reversion_bollinger_bands.html#decision-calculation","title":"Decision Calculation","text":"<p>The <code>get_decision</code> method calculates the Bollinger Bands values for a given instrument based on the OHLC (Open, High, Low, Close) historical data. It uses the <code>talib.BBANDS</code> function from the Talib library to calculate the upper and lower bands. The method compares the previous candle's open, low, and close values with the upper and lower bands to determine the entry or exit action. If the conditions for a buy or sell signal are met, the corresponding action is returned.</p>"},{"location":"member/strategies/options_bear_call_ladder.html","title":"Options Bear Call Ladder","text":""},{"location":"member/strategies/options_bear_call_ladder.html#options-bear-call-ladder","title":"Options Bear Call Ladder","text":"<p>This class implements the Options Bear Call Ladder strategy.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Options from Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for options from NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for options from NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/options_bear_call_ladder.html#bear-call-ladder","title":"Bear Call Ladder","text":"<ul> <li> <p>In the stock market, an options bear call ladder is a strategy that involves buying and selling call options with different strike prices to profit from a moderate bearish outlook on the underlying asset. It is a complex strategy that combines both long and short call positions.</p> </li> <li> <p>To create a bear call ladder, an investor typically does the following:</p> <ol> <li>Sells a lower strike call option.</li> <li>Buys two higher strike call options.</li> <li>Sells a final even higher strike call option.</li> </ol> </li> <li> <p>The bear call ladder aims to generate a limited profit if the price of the underlying asset remains below the middle strike price at expiration. The strategy benefits from time decay and a moderate decrease in the price of the underlying asset.</p> </li> <li> <p>The maximum profit potential of the bear call ladder is achieved when the price of the underlying asset is below the middle strike price at expiration. If the price declines further, the profit potential remains limited. However, if the price rises above the higher strike price, the strategy can result in losses.</p> </li> <li> <p>The key feature of the bear call ladder is the combination of short call options, which generate premium income, and long call options, which provide protection against unlimited losses in case the price of the underlying asset rises sharply.</p> </li> <li> <p>Traders implementing the bear call ladder strategy should carefully consider factors such as the strike prices, premium costs, and expiration date to assess their risk-reward profile. It's important to note that options trading involves risks, and traders should have a thorough understanding of the strategy and associated risks before employing it in the stock market.</p> </li> <li> <p>Please be aware that options trading can be complex and involves significant risks. It is always recommended to consult with a qualified financial advisor or broker before engaging in options trading activities.</p> </li> </ul>"},{"location":"member/strategies/options_bear_call_ladder.html#parameters","title":"Parameters","text":"Name Default Value Expected Value Description LEG_ONE_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_ONE_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_ONE_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_ONE_NUMBER_OF_STRIKES 0 greater than 0 Number of strikes for leg one. LEG_TWO_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_TWO_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_TWO_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_TWO_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one. LEG_THREE_TRANSACTION_TYPE 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_THREE_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_THREE_STRIKE_DIRECTION 0 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_THREE_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/options_bear_put_ladder.html","title":"Options Bear Put Ladder","text":""},{"location":"member/strategies/options_bear_put_ladder.html#options-bear-put-ladder","title":"Options Bear Put Ladder","text":"<p>This is a template for the Options Bear Put Ladder strategy. The strategy involves the combination of buying and selling put options to profit from a downward price movement in the underlying asset. It utilizes multiple legs with different strike prices and transaction types to create a ladder-like structure.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Options from Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for options from NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for options from NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/options_bear_put_ladder.html#bear-put-ladder","title":"Bear Put Ladder","text":"<ul> <li> <p>In the stock market, an options bear put ladder is a strategy that combines buying and selling put options with different strike prices to profit from a moderate bearish view on the underlying asset. It involves a mix of long and short put positions.</p> </li> <li> <p>To implement a bear put ladder strategy, an investor generally follows these steps:</p> <ol> <li>Buys a put option with a lower strike price.</li> <li>Sells two put options with higher strike prices.</li> <li>Buys a final put option with an even higher strike price.</li> </ol> </li> <li> <p>The goal of the bear put ladder is to generate a limited profit if the price of the underlying asset remains below the middle strike price at expiration. The strategy benefits from time decay and a moderate decline in the price of the underlying asset.</p> </li> <li> <p>The maximum profit potential is reached when the price of the underlying asset is below the middle strike price at expiration. If the price continues to decrease, the profit potential remains limited. However, if the price rises above the higher strike price, the strategy can result in losses.</p> </li> <li> <p>The bear put ladder strategy combines short put options to generate premium income and long put options to provide protection against significant losses in case the price of the underlying asset declines substantially.</p> </li> <li> <p>Traders implementing the bear put ladder strategy should consider factors such as the strike prices, premium costs, and expiration date to assess the risk-reward profile. It's crucial to have a comprehensive understanding of options trading and associated risks before employing this strategy in the stock market.</p> </li> <li> <p>Keep in mind that options trading can be complex and involves substantial risks. It is advisable to consult with a qualified financial advisor or broker before engaging in options trading activities.</p> </li> </ul>"},{"location":"member/strategies/options_bear_put_ladder.html#parameters","title":"Parameters","text":"Name Default Value Expected Value Description LEG_ONE_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_ONE_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_ONE_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_ONE_NUMBER_OF_STRIKES 0 greater than 0 Number of strikes for leg one. LEG_TWO_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_TWO_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_TWO_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_TWO_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one. LEG_THREE_TRANSACTION_TYPE 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_THREE_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_THREE_STRIKE_DIRECTION 0 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_THREE_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/options_bull_call_ladder.html","title":"Options Bull Call Ladder","text":""},{"location":"member/strategies/options_bull_call_ladder.html#options-bull-call-ladder","title":"Options Bull Call Ladder","text":"<p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Options from Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for options from NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for options from NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/options_bull_call_ladder.html#bull-call-ladder","title":"Bull Call Ladder","text":"<ul> <li> <p>In the stock market, an options bull call ladder is a strategy that involves buying and selling call options with different strike prices to profit from a moderate bullish outlook on the underlying asset. It is a complex strategy that combines both long and short call positions.</p> </li> <li> <p>To create a bull call ladder, an investor typically does the following:</p> <ol> <li>Buys a lower strike call option.</li> <li>Sells two higher strike call options.</li> <li>Buys a final even higher strike call option.</li> </ol> </li> <li> <p>The key feature of the bull call ladder is that it provides limited risk and potential for limited profit. The strategy is constructed in such a way that it can benefit from both a moderate rise in the price of the underlying asset and from time decay.</p> </li> <li> <p>The profit potential of the bull call ladder is highest if the price of the underlying asset rises to the level of the middle strike price at expiration. In this case, the investor can achieve the maximum profit. If the price of the underlying asset rises above the middle strike price, the profit potential is limited.</p> </li> <li> <p>On the other hand, if the price of the underlying asset remains below the lower strike price or declines, the strategy can result in losses. The maximum loss occurs if the price falls below the lower strike price.</p> </li> <li> <p>The bull call ladder is a moderately bullish strategy that aims to benefit from both time decay and the potential for a moderate increase in the price of the underlying asset. Traders implementing this strategy should carefully consider factors such as the strike prices, premium costs, and expiration date to assess their risk-reward profile.</p> </li> <li> <p>It is important to note that options trading involves risks, and traders should have a thorough understanding of the strategy and associated risks before employing it in the stock market.</p> </li> </ul>"},{"location":"member/strategies/options_bull_call_ladder.html#parameters","title":"Parameters","text":"Name Default Value Expected Value Description LEG_ONE_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_ONE_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_ONE_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_ONE_NUMBER_OF_STRIKES 0 greater than 0 Number of strikes for leg one. LEG_TWO_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_TWO_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_TWO_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_TWO_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one. LEG_THREE_TRANSACTION_TYPE 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_THREE_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_THREE_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_THREE_NUMBER_OF_STRIKES 4 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/options_bull_put_ladder.html","title":"Options Bull Put Ladder","text":""},{"location":"member/strategies/options_bull_put_ladder.html#options-bull-put-ladder","title":"Options Bull Put Ladder","text":"<p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Options from Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for options from NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for options from NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/options_bull_put_ladder.html#bull-put-ladder","title":"Bull Put ladder","text":"<ul> <li> <p>In the stock market, an options bull put ladder is a strategy that involves buying and selling put options with different strike prices to profit from a moderate bullish outlook on the underlying asset. It is a complex strategy that combines both long and short put positions.</p> </li> <li> <p>To create a bull put ladder, an investor typically does the following:</p> <ol> <li>Sells a higher strike put option.</li> <li>Buys two lower strike put options.</li> <li>Sells a final even lower strike put option.</li> </ol> </li> <li> <p>The key feature of the bull put ladder is that it provides limited risk and potential for limited profit. The strategy is constructed in such a way that it can benefit from both a moderate rise in the price of the underlying asset and from time decay.</p> </li> <li> <p>The profit potential of the bull put ladder is highest if the price of the underlying asset rises to the level of the middle strike price at expiration. In this case, the investor can achieve the maximum profit. If the price of the underlying asset rises above the middle strike price, the profit potential is limited.</p> </li> <li> <p>On the other hand, if the price of the underlying asset remains above the higher strike price or increases, the strategy can result in losses. The maximum loss occurs if the price rises above the higher strike price.</p> </li> <li> <p>The bull put ladder is a moderately bullish strategy that aims to benefit from both time decay and the potential for a moderate increase in the price of the underlying asset. Traders implementing this strategy should carefully consider factors such as the strike prices, premium costs, and expiration date to assess their risk-reward profile.</p> </li> <li> <p>It is important to note that options trading involves risks, and traders should have a thorough understanding of the strategy and associated risks before employing it in the stock market.</p> </li> </ul>"},{"location":"member/strategies/options_bull_put_ladder.html#initialization","title":"Initialization","text":"<p>The <code>__init__</code> method initializes the strategy and accepts parameters for configuring the strategy. The parameters are:</p> Name Default Value Expected Value Description LEG_ONE_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_ONE_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_ONE_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_ONE_NUMBER_OF_STRIKES 0 greater than 0 Number of strikes for leg one. LEG_TWO_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_TWO_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_TWO_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_TWO_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one. LEG_THREE_TRANSACTION_TYPE 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_THREE_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_THREE_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_THREE_NUMBER_OF_STRIKES 4 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/options_bull_put_ladder.html#additional-notes","title":"Additional Notes","text":"<ul> <li> <p>The <code>transaction_type_map</code>, <code>tradingsymbol_suffix_map</code>, and <code>strike_direction_map</code> dictionaries are used for mapping transaction types, trading symbol suffixes, and strike directions, respectively.</p> </li> <li> <p>The strategy supports a single allowed expiry date, which can be modified for multiple expiry dates.</p> </li> <li> <p>The strategy uses the <code>get_options_instrument_with_strike_direction</code> method from the base class to fetch child instruments.</p> </li> <li> <p>The <code>initialize</code> method sets up the list of instruments processed for the day.</p> </li> <li> <p>The <code>options_instruments_set_up_local</code> method sets up the Call and Put Options instruments for a given base instrument.</p> </li> <li> <p>The <code>strategy_select_instruments_for_entry</code> method selects instruments for entry by setting up child instruments and appending them to the selected instruments list.</p> </li> <li> <p>The <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/strategies/options_long_iron_butterfly.html","title":"Options Long Iron Butterfly","text":""},{"location":"member/strategies/options_long_iron_butterfly.html#options-long-iron-butterfly","title":"Options Long Iron Butterfly","text":"<p>This is a template for implementing the Options Long Iron Butterfly strategy in Python.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul>"},{"location":"member/strategies/options_long_iron_butterfly.html#long-iron-butterfly","title":"Long Iron Butterfly","text":"<ul> <li> <p>In the stock market, an options long iron butterfly is a complex strategy that involves buying two options with the same expiration date but different strike prices. It combines elements of both a bullish and bearish strategy and is designed to profit from low volatility in the underlying asset.</p> </li> <li> <p>To create a long iron butterfly, an investor typically does the following:</p> <ol> <li>Buys an at-the-money (ATM) put option.</li> <li>Buys an ATM call option.</li> <li>Sells an out-of-the-money (OTM) put option with a lower strike price.</li> <li>Sells an OTM call option with a higher strike price.</li> </ol> </li> <li> <p>The key feature of the long iron butterfly is that the sold options (OTM put and OTM call) help offset the cost of the purchased options (ATM put and ATM call). This results in a limited-risk, limited-reward strategy.</p> </li> <li> <p>The strategy profits when the price of the underlying asset remains within a specific range, known as the \"profit zone.\" The profit zone is determined by the strike prices of the options involved in the strategy. If the price of the underlying asset is within this range at expiration, the investor can achieve the maximum profit.</p> </li> <li> <p>However, if the price of the underlying asset moves significantly beyond the profit zone, the strategy can result in losses. The maximum loss occurs if the price falls below the lower strike price or rises above the higher strike price.</p> </li> <li> <p>The long iron butterfly is commonly used when traders anticipate low volatility in the underlying asset. It is a neutral strategy that seeks to benefit from the passage of time and a decrease in implied volatility. Traders implementing this strategy should carefully analyze factors such as the strike prices, premium costs, and expiration date to determine their risk-reward profile.</p> </li> <li> <p>It is important to note that options trading involves risks, and traders should have a thorough understanding of the strategy and associated risks before employing it in the stock market.</p> </li> </ul>"},{"location":"member/strategies/options_long_iron_butterfly.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The strategy accepts the following parameters:</p> Name Default Value Expected Value Description LEG_ONE_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_ONE_TRADING_SYMBOL_SUFFIX 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_ONE_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_ONE_NUMBER_OF_STRIKES 0 greater than 0 Number of strikes for leg one. LEG_TWO_TRANSACTION_TYPE 1 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_TWO_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_TWO_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_TWO_NUMBER_OF_STRIKES 0 greater than 0 Number of strikes for leg one. LEG_THREE_TRANSACTION_TYPE 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_THREE_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_THREE_STRIKE_DIRECTION 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_THREE_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one. LEG_FOUR_TRANSACTION_TYPE 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] LEG_FOUR_TRADING_SYMBOL_SUFFIX 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] LEG_FOUR_STRIKE_DIRECTION 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] LEG_FOUR_NUMBER_OF_STRIKES 2 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/options_straddle.html","title":"Options Straddle","text":""},{"location":"member/strategies/options_straddle.html#options-straddle","title":"Options Straddle","text":"<p>This class represents the implementation of an options straddle trading strategy.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Options from Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for options from NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/options_straddle.html#straddle-options","title":"Straddle Options","text":"<ul> <li> <p>In the stock market, an options straddle is a strategy where an investor simultaneously purchases a call option and a put option with the same strike price and expiration date on a particular underlying asset, such as a stock. The purpose of this strategy is to profit from significant price movements in the underlying asset, regardless of whether the price goes up or down.</p> </li> <li> <p>By using an options straddle, the investor is essentially betting on volatility rather than the direction of the price movement. If the price of the underlying asset experiences a substantial increase or decrease, either the call or put option will generate profits, offsetting any losses from the other option. The potential for profit is highest when there is a significant price swing, while the risk is limited to the cost of purchasing the options.</p> </li> <li> <p>This strategy is often employed when traders anticipate an upcoming event or announcement that could cause significant market volatility, such as earnings reports or regulatory decisions. The goal is to take advantage of the resulting price movement, regardless of whether it is upward or downward.</p> </li> <li> <p>It is important to note that options straddles can be risky as they require significant price movements to be profitable. If the price remains relatively stable, the trader may experience losses due to the cost of purchasing the options. Therefore, careful consideration of market conditions and risk management is crucial when implementing an options straddle strategy.</p> </li> </ul>"},{"location":"member/strategies/options_straddle.html#parameters","title":"Parameters","text":"Name Default Value Expected Value Description _leg_one_transaction_type 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] _leg_one_tradingsymbol_suffix 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] _leg_one_strike_direction 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] _leg_one_number_of_strikes 0 greater than 0 Number of strikes for leg one. _leg_two_transaction_type 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] _leg_two_tradingsymbol_suffix 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] _leg_two_strike_direction 1 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] _leg_two_number_of_strikes 0 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/options_strangle.html","title":"Options Strangle","text":""},{"location":"member/strategies/options_strangle.html#options-strangle","title":"Options Strangle","text":"<p>The <code>StrategyOptionsStrangle</code> class is a strategy template for trading options strangles. It is derived from the <code>StrategyOptionsBaseV2</code> class.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Options from Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for options from NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for options from NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/options_strangle.html#strangle-options","title":"Strangle Options","text":"<ul> <li> <p>In the stock market, an options strangle is a strategy where an investor simultaneously buys or sells a call option and a put option on the same underlying asset but with different strike prices and the same expiration date. The purpose of this strategy is to profit from significant price volatility in the underlying asset.</p> </li> <li> <p>Unlike an options straddle, which involves purchasing options at the same strike price, an options strangle involves selecting different strike prices. Typically, the investor buys an out-of-the-money call option (with a strike price above the current market price) and an out-of-the-money put option (with a strike price below the current market price).</p> </li> <li> <p>The strategy aims to benefit from a significant price movement in either direction. If the price of the underlying asset moves significantly upwards, the call option can generate profits. Conversely, if the price moves significantly downwards, the put option can generate profits. The investor is essentially betting on increased price volatility rather than predicting the direction of the price movement.</p> </li> <li> <p>Options strangles are commonly used when traders anticipate a substantial price movement but are unsure about the direction. This strategy allows for potential profits in either an upward or downward market scenario. However, it is important to note that options strangles can involve higher risks, as the underlying asset's price must move significantly to offset the cost of purchasing both options.</p> </li> <li> <p>Traders employing options strangles should carefully consider factors such as the expected price volatility, the expiration date, and the costs associated with purchasing the options. Implementing risk management techniques and monitoring market conditions are essential when utilizing an options strangle strategy.</p> </li> </ul>"},{"location":"member/strategies/options_strangle.html#parameters","title":"Parameters","text":"<p>The following parameters can be set in the Parameters Configuration Pane:</p> Name Default Value Expected Value Description _leg_one_transaction_type 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] _leg_one_tradingsymbol_suffix 1 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] _leg_one_strike_direction 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] _leg_one_number_of_strikes 2 greater than 0 Number of strikes for leg one. _leg_two_transaction_type 2 1 or 2 Transaction type for leg one. [BUY: 1, SELL: 2] _leg_two_tradingsymbol_suffix 2 1 or 2 Trading symbol suffix for leg one. [CE: 1,  PE: 2] _leg_two_strike_direction 2 0, 1 or 2 Strike direction for leg one. [ITM: 0, ATM: 1,  OTM: 2] _leg_two_number_of_strikes 2 greater than 0 Number of strikes for leg one."},{"location":"member/strategies/reverse_rsi.html","title":"Reverse RSI","text":"<p>This is a trading strategy called \"Reverse RSI\" implemented in Python using the PyAlgoTrading library. The strategy is based on the relative strength index indicator.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebook for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/reverse_rsi.html#relative-strength-index","title":"Relative Strength Index","text":"<p>RSI stands for Relative Strength Index, and it is a popular technical indicator used in the stock market to analyze the strength and momentum of a price trend. The RSI provides insights into whether a stock is overbought or oversold and can help identify potential trend reversals.</p> <p>Here is a summary of RSI in the stock market:</p> <ul> <li>The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements.</li> <li>It compares the magnitude of recent gains to recent losses over a specified period, typically 14 days, and generates a value between 0 and 100.</li> <li>The RSI is calculated using a formula that involves averaging the upward price movements (gains) and the downward price movements (losses) over the chosen period.</li> <li>A high RSI value (typically above 70) indicates that a stock is overbought, meaning it may have experienced a significant price increase and could be due for a correction or pullback.</li> <li>Conversely, a low RSI value (typically below 30) suggests that a stock is oversold, indicating it may have experienced a significant price decline and could be poised for a potential rebound or upward move.</li> <li>Traders often use RSI as a tool to identify potential trend reversals, as extreme RSI readings (above 70 or below 30) can signal a potential change in the direction of the price trend.</li> <li>Additionally, traders may look for bullish or bearish divergences between the RSI and the price chart, which can provide further indications of a potential trend reversal.</li> <li>The RSI is just one tool among many in technical analysis, and it is often used in conjunction with other indicators and analysis techniques to make more informed trading decisions.</li> </ul> <p>Overall, the Relative Strength Index (RSI) is a widely used indicator in the stock market to assess the strength and momentum of price movements. It helps traders identify overbought and oversold conditions, as well as potential trend reversals, which can assist in making trading decisions.</p> Fig.1 - MCD candle chart (top) and RSI plot (bottom)"},{"location":"member/strategies/reverse_rsi.html#strategy-overview","title":"Strategy Overview","text":"<p>The Reverse RSI strategy is a trading strategy based on the Relative Strength Index (RSI) indicator. It generates entry and exit signals based on the reverse crossover of the RSI values from specified overbought and oversold levels.</p>"},{"location":"member/strategies/reverse_rsi.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIME_PERIOD None greater than 0 Period (number of candles) by which RSI is calculated OVERBOUGHT_VALUE None greater than 0 RSI value above which stocks are considered over-bought OVERSOLD_VALUE None greater than 0 RSI value below which stocks are considered over-sold"},{"location":"member/strategies/reverse_rsi.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the crossover values for the RSI indicator using historical data of the instrument. It compares the RSI values with the overbought and oversold levels to determine the entry and exit actions. The method returns the crossover values for oversold and overbought levels.</p>"},{"location":"member/strategies/rsi_macd_crossover.html","title":"RSI MACD Crossover","text":"<p>This is a trading strategy called \"RSI MACD Crossovers\" implemented in Python using the PyAlgoTrading library. The strategy is based on the RSI and MACD indicator crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/rsi_macd_crossover.html#rsi-and-macd-crossover","title":"RSI and MACD Crossover","text":"<p>In the dynamic world of stock trading, effective strategies are the key to success. The combination of two powerful technical indicators, the Moving Average Convergence Divergence (MACD) and the Relative Strength Index (RSI), can be a game-changer for traders. This strategy leverages MACD and RSI crossovers to identify potential entry and exit points in the stock market.</p> <p>Here is a summary of RSI and MACD in the stock market: - The MACD is a trend-following momentum indicator. It consists of two lines: the MACD line and the Signal line. When the MACD line crosses above the Signal line, it generates a bullish signal, suggesting a potential uptrend. Conversely, a cross below the Signal line indicates a bearish signal, signaling a potential downtrend.</p> <ul> <li> <p>The RSI is an oscillator that measures the speed and change of price movements. RSI values above 70 typically indicate an overbought condition, signaling a potential price reversal to the downside. RSI values below 30 suggest an oversold condition, indicating a potential price reversal to the upside.</p> </li> <li> <p>The essence of this strategy lies in the crossover of the MACD and RSI indicators. When the MACD generates a bullish crossover and the RSI confirms by being below 70 (not in an overbought condition), it could be an opportune time to consider a long (BUY) position. </p> </li> <li> <p>Conversely, when the MACD produces a bearish crossover and the RSI is above 30 (not in an oversold condition), it may be a suitable moment to contemplate a short (SELL) position.</p> </li> </ul>"},{"location":"member/strategies/rsi_macd_crossover.html#strategy-overview","title":"Strategy Overview","text":"<p>The MACD and RSI crossover strategy is a robust approach that combines the strength of two widely used technical indicators. By identifying potential entry and exit points based on these crossovers, traders can make more informed decisions in the stock market.</p>"},{"location":"member/strategies/rsi_macd_crossover.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIMEPERIOD_FAST None greater than 0 Period (number of candles) by which EMA 2 is calculated TIMEPERIOD_SLOW None greater than 0 Period (number of candles) by which EMA 2 is calculated TIMEPERIOD_SIGNAL None greater than 0 Period (number of candles) by which  moving average is calculated TIMEPERIOD_RSI None greater than 0 Period (number of candles) by which RSI is calculated OVERSOLD_VALUE None greater than 0 Threshould value indicating potential buying opportunites OVERBOUGHT_VALUE None greater than 0 Threshould value indicating potential selling opportunites"},{"location":"member/strategies/rsi_macd_crossover.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the crossover value based on the inverse crossover of the two EMAs of the closing prices. It uses the <code>talib.MACD</code> and <code>talib.RSI</code> function from the Talib library to calculate the MACD and RSI. The method then determines the crossover between the MACD and RSI and returns the corresponding value (-1, 0, or 1).</p>"},{"location":"member/strategies/stochastic_crossover.html","title":"Stochastic Crossover","text":"<p>This is a trading strategy called \"Stochastic Crossover\" implemented in Python using the PyAlgoTrading library. The strategy is based on the Stochastic indicator crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebook for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/stochastic_crossover.html#stochastic-oscillator-indicator","title":"Stochastic Oscillator Indicator","text":"<p>In the stock market, Stochastic refers to the Stochastic Oscillator, which is a popular technical indicator used to analyze price momentum and identify potential trend reversals. The Stochastic Oscillator compares the closing price of a security to its price range over a specific period of time. It consists of two lines, %K and %D, and generates values between 0 and 100.</p> <p>Here is a summary of the Stochastic Oscillator in the stock market:</p> <ul> <li>The Stochastic Oscillator measures the relationship between a security's closing price and its price range over a chosen period.</li> <li>The indicator consists of two lines: %K and %D. %K represents the current closing price relative to the price range, while %D is a smoothed average of %K.</li> <li>The Stochastic Oscillator is bound between 0 and 100. Readings above 80 are typically considered overbought, suggesting a potential price decline or correction. Readings below 20 are often considered oversold, indicating a potential price increase or rebound.</li> <li>Traders use the Stochastic Oscillator to identify potential trend reversals, as overbought or oversold conditions can indicate a possible change in the direction of the price trend.</li> <li>The indicator also generates bullish or bearish divergences, where the price trend and the Stochastic lines move in opposite directions, which can signal a potential trend reversal.</li> <li>The Stochastic Oscillator has various trading strategies associated with it, such as crossovers, overbought/oversold levels, and divergences, which traders use to make buy or sell decisions.</li> <li>It is important to note that the Stochastic Oscillator is a lagging indicator, meaning it may not provide precise timing for trade entries or exits. Therefore, it is often used in conjunction with other indicators and analysis techniques to confirm signals and improve the accuracy of trading decisions.</li> <li>Overall, the Stochastic Oscillator is a widely used technical indicator in the stock market that helps traders assess price momentum, identify overbought and oversold conditions, and spot potential trend reversals. By analyzing the relationship between the closing price and price range, traders can gain insights into potential buying or selling opportunities.</li> </ul> Fig.1 - IBM candle chart (top) with Stochastic Fast (bottom)  Fig.2 - QQQQ candle chart (top) with Stochastic Fast (bottom 1), Stochastic Slow (bottom 2) and Full Stochastic (bottom 3)"},{"location":"member/strategies/stochastic_crossover.html#strategy-overview","title":"Strategy Overview","text":"<p>The strategy follows a simple rule based on the Stochastic indicator crossover. When the Stochastic indicator's %K line crosses above the %D line, a buy signal is generated. Conversely, when the %K line crosses below the %D line, a sell signal is generated. The strategy aims to capture potential trend reversals.</p>"},{"location":"member/strategies/stochastic_crossover.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description FASTK_PERIOD or PERIOD None greater than 0 The period for the fast %K line of the Stochastic indicator. SLOWK_PERIOD or SMOOTH_K_PERIOD None greater than 0 The period for the slow %K line of the Stochastic indicator. SLOWD_PERIOD or SMOOTH_D_PERIOD None greater than 0 The period for the slow %D line of the Stochastic indicator."},{"location":"member/strategies/stochastic_crossover.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the crossover values for the Slow-K and Slow-D of Stochastic indicator using historical data of the instrument. The method returns the crossover values between slow-K and slow-D.</p>"},{"location":"member/strategies/volatility_trend_atr.html","title":"Volatility Trends with Average True Range (ATR)","text":"<p>This is a trading strategy called \"Volatility Trends ATR\" implemented in Python using the PyAlgoTrading library. The strategy is based on the ATR indicator crossover.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/volatility_trend_atr.html#volatility-trends-with-average-true-range-atr-indicator","title":"Volatility Trends with Average True Range (ATR) Indicator","text":"<p>In the ever-changing realm of stock trading, market volatility can be both an opportunity and a challenge. Traders and investors require a reliable instrument to gauge price fluctuations and devise informed strategies. The Average True Range (ATR) steps in as a robust technical indicator to fulfill this role. ATR delivers valuable insights into market volatility trends, equipping traders with the necessary tools to make calculated decisions in the stock market.</p> <p>Here is a summary of ATR in the stock market: - The Average True Range (ATR), is a technical gauge designed to quantify a security's trading range over a specific time frame. Rather than simply tracking daily price changes, ATR calculates the \"true range,\" accounting for gaps between trading sessions.</p> <ul> <li> <p>ATR serves as a reliable volatility indicator. It quantifies the market's propensity for price movement. Elevated ATR values indicate significant price fluctuations, while lower values suggest relative price stability.</p> </li> <li> <p>ATR is adaptable to individual trading preferences. Traders can tailor the ATR period to match their specific trading style. For daily charts, a typical choice is the 14-day period, but adjustments can be made for shorter or longer timeframes, allowing for versatile application.</p> </li> <li> <p>ATR provides a numerical value, and its magnitude corresponds to the extent of market volatility. Larger ATR values signal more significant trading opportunities, much like a roller coaster promising an exhilarating ride.</p> </li> <li> <p>However, ATR isn't solely focused on turbulence. It effectively identifies periods of low volatility or consolidation in the market, signaling a need for caution or a potential shift in trading strategies.</p> </li> </ul>"},{"location":"member/strategies/volatility_trend_atr.html#strategy-overview","title":"Strategy Overview","text":"<p>The Average True Range (ATR) steps in as a robust technical indicator to fulfill this role. ATR delivers valuable insights into market volatility trends, equipping traders with the necessary tools to make calculated decisions in the stock market.</p>"},{"location":"member/strategies/volatility_trend_atr.html#strategy-parameters","title":"Strategy Parameters","text":"<p>The following parameters can be configured for the strategy:</p> Name Default Value Expected Value Description TIME_PERIOD None greater than 0 Period (number of candles) by which ATR is calculated ATR_PREV_CANDLES_NUM None greater than 0 nth Previous candle ATR"},{"location":"member/strategies/volatility_trend_atr.html#decision-calculation","title":"Decision Calculation","text":"<p>The <code>get_trend_direction</code> method calculates the ATR values for the volatility trend atr indicator using historical data of the instrument. It uses the <code>talib.AROON</code> function from the Talib library to calculate the values. It compares the ATR values with the atr of previous specified candle and determine the entry and exit actions. The method returns the ATR values for current candle.</p>"},{"location":"member/strategies/vwap_crossover.html","title":"VWAP Crossover","text":"<p>This is a trading strategy called \"VWAP Crossover\" implemented in Python using the PyAlgoTrading library. The strategy is based on the crossover of the VWAP (Volume Weighted Average Price) indicator.</p> <p>Links</p> <ul> <li>Strategy Code (.py)</li> <li>Strategy Structure (common methods used in a regular and options strategy)</li> </ul> <p>Jupyter Notebook for Indian Exchange (NSE)</p> <ul> <li>Click here to view a working notebook for NSE exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NSE exchange in cloud. No installation required. </li> </ul> <p>Jupyter Notebook for US Exchange (NASDAQ)</p> <ul> <li>Click here to view a working notebook for NASDAQ exchange in cloud. No installation required. </li> <li>Click here to execute a working notebook for NASDAQ exchange in cloud. No installation required. </li> </ul>"},{"location":"member/strategies/vwap_crossover.html#vwap-indicator","title":"VWAP indicator","text":"<p>In the stock market, VWAP stands for Volume-Weighted Average Price. VWAP is a trading indicator that calculates the average price at which a particular stock or security has traded throughout the day, taking into account both the price and the volume of each trade.</p> <p>Here is a summary of VWAP in the stock market:</p> <ul> <li>VWAP is calculated by multiplying the price of each trade by the corresponding volume and then summing up these values over a specific time period. The total value is divided by the cumulative volume to obtain the average price.</li> <li>The volume-weighted aspect of VWAP gives more weight to trades with higher volume, reflecting the significance of larger trades in the overall average price calculation.</li> <li>VWAP is typically calculated on an intraday basis, such as the trading day or a specific session, and resets at the start of each new period.</li> <li>Traders and investors use VWAP as a benchmark to assess whether their own trades are executed at a better or worse price compared to the average market price. It helps evaluate the quality of their execution and determine if they are buying or selling at a favorable price.</li> <li>VWAP is commonly used by institutional traders who execute large orders as it helps them minimize market impact and avoid unfavorable executions. By comparing their execution price to VWAP, they can assess their performance and adjust their trading strategies accordingly.</li> <li>In addition to being used as a benchmark, VWAP is also employed as a trading strategy. Some traders use VWAP as a reference point for making buy or sell decisions. For example, if the current price is above VWAP, it may be considered bullish, while a price below VWAP could be seen as bearish.</li> <li>VWAP is often displayed as a line on intraday price charts, allowing traders to visually compare the current price to the average price. It can provide insights into the market's overall sentiment and potential support or resistance levels.</li> <li>It is important to note that VWAP is a lagging indicator since it is based on historical data. Therefore, it is often used in combination with other indicators and analysis techniques to validate trade signals and make informed trading decisions.</li> <li>Overall, VWAP is a widely used indicator in the stock market that provides a volume-weighted average price, serving as a benchmark for evaluating trade execution quality and as a reference point for trading decisions. By considering both price and volume, VWAP offers insights into market dynamics and helps traders assess their performance relative to the average market price.</li> </ul> Fig.1 - IBM candle chart (top) with VWAP line  (Blue), Volume chart with SMA line"},{"location":"member/strategies/vwap_crossover.html#strategy-overview","title":"Strategy Overview","text":"<p>The strategy follows a simple rule based on the crossover of the VWAP indicator. When the price crosses above the VWAP, a buy signal is generated, and when the price crosses below the VWAP, a sell signal is generated. The strategy aims to capture potential trend reversals based on the VWAP.</p>"},{"location":"member/strategies/vwap_crossover.html#strategy-parameters","title":"Strategy Parameters","text":"<p>No specific strategy parameters are mentioned in the code. </p>"},{"location":"member/strategies/vwap_crossover.html#crossover-calculation","title":"Crossover Calculation","text":"<p>The <code>get_crossover_value</code> method calculates the VWAP from historical data and the crossover values for the VWAP of the instrument. The method returns the crossover values between close of hist data and vwap.</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html","title":"Options Strategy Structure","text":"<p>Links</p> <ul> <li>Code Structure of Strategy (workflow of a strategy)</li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#1-initial-steps","title":"1. Initial steps","text":""},{"location":"member/strategies/strategy_guides/common_options_strategy.html#naming-a-class","title":"Naming a Class","text":"eg: For the above strategy name the class name would be:     <pre><code>StrategyOptionsEMACrossover(StrategyOptionsBaseV2)\n</code></pre> <p>Coding Conventions</p> <pre><code>* Make a class with the same name as the file name\n* Make sure the first letter of each word is in uppercase and the initials should be in uppercase as well.\n* If the class name includes indicator names like EMA, SMA, and VWAP the name should be in uppercase in the class name but not in the file name.\n* Every options strategy is a child class of the StrategyOptionsBaseV2 class.\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#naming-your-strategy","title":"Naming your Strategy","text":"<p>This name will be displayed in your My Coded Strategies in Phoenix Web, and it will also be the strategy_name when you are fetching all strategies in pyalgotrading. Inside your strategy class, you can write your first parameter as <code>name</code>.     <pre><code>name = 'options_ema_crossover'\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#2-init-method","title":"2. Init method","text":"<p>This method gets called only once when the strategy is started.</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#strategy-info","title":"Strategy info","text":"<p>In the init method add the line given below <pre><code>super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#parameter-creation","title":"Parameter creation","text":"<p>Next, we assign the parameter values to the class variables of the same name as the parameters but in the lowercase format as shown below:</p> <p>eg: <pre><code>self.fresh_order_candle = self.strategy_parameters['FRESH_ORDER_CANDLE']\nself.start_time_hours = self.strategy_parameters['START_TIME_HOURS']\nself.start_time_minutes = self.strategy_parameters['START_TIME_MINUTES']\nself.end_time_hours = self.strategy_parameters['END_TIME_HOURS']\nself.end_time_minutes = self.strategy_parameters['END_TIME_MINUTES']\nself.no_of_strikes_away_ce = self.strategy_parameters['NO_OF_STRIKES_AWAY_CE']\nself.no_of_strikes_away_p = self.strategy_parameters['NO_OF_STRIKES_AWAY_PE']\nself._strike_direction_ce = self.strategy_parameters['STRIKES_DIRECTION_CE']\nself._strike_direction_pe = self.strategy_parameters['STRIKES_DIRECTION_PE']\nself.ema_period_one = self.strategy_parameters['EMA_PERIOD_ONE']\nself.ema_period_two = self.strategy_parameters['EMA_PERIOD_TWO']\nself.target_percentage = self.strategy_parameters['TARGET_PERCENTAGE']\nself.stoploss_percentage = self.strategy_parameters['STOPLOSS_PERCENTAGE']\nself.stoploss_range = self.strategy_parameters['STOPLOSS_RANGE']\nself.stoploss_order_count_allowed = self.strategy_parameters['STOPLOSS_ORDER_COUNT_ALLOWED']\n</code></pre></p> <p>Note</p> <ul> <li>The parameter names and the number of parameters may change for different strategies.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#start-time-and-end-time-creation","title":"Start time and End time creation","text":"<p>Adding Start and End time is useful when you want to define a timerange between which the strategy will be running each day. Add the below code to calculate the strategy start time and end time, from the <code>strategy_parameters</code>.</p> <p>try: <pre><code>    self.candle_start_time = time(hour=self.start_time_hours, minute=self.start_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting start hours and minutes... EXITING')\n    raise SystemExit\n</code></pre> try: <pre><code>    self.candle_end_time = time(hour=self.end_time_hours, minute=self.end_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting end time hours and minutes... EXITING')\n    raise SystemExit\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#strategy-variables","title":"Strategy variables","text":"<p>We create our own strategy variables other than the strategy parameter variables which will be used throughout the strategy.</p> <p>eg: <pre><code>self.main_order = None            # We save the entry order in this variable\nself.stoploss_order = None        # We save the corresponding stoploss exit order of the entry order in this variable\n</code></pre> We initialize the variables with a None value.     !!! Note             There could be more strategy variables required as per the strategy requirement. </p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#3-initialize-method","title":"3. Initialize method","text":"<p>Unlike the <code>init method</code>, this method gets called every day at the beginning of the day once the strategy is started.</p> <p>Here the strategy variables that were initialized as None are again defined as dictionaries/lists except for the <code>self.order_tag_manager</code>.  Create a reference for <code>OrderTagManager</code> as shown below:</p> <pre><code>self.order_tag_manager = OrderTagManager\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#4-ordertagmanager","title":"4. OrderTagManager","text":"<p>The <code>self.order_tag_manager</code> is used to store/remove the entry/exit orders. The <code>self.order_tag_manager</code> has the following methods:</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#add_order","title":"add_order","text":"<ul> <li>Stores the order object for the given tags. eg:</li> </ul> <pre><code>self.order_tag_manager.add_order(_order, tags=[base_inst_str, entry_key])\n</code></pre> <ul> <li>Here the <code>_order</code> is the order object stored inside the <code>OrderTagManager</code> for the tags <code>base_inst_str</code> and <code>entry_key</code>.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#get_orders","title":"get_orders","text":"<ul> <li>Retrieve the order(s) for the given tags.</li> </ul> <p>eg:</p> <pre><code>self.order_tag_manager.get_orders(tags=[base_inst_str, BrokerExistingOrderPositionConstants.ENTER, entry_key], ignore_errors=True)\n</code></pre> <ul> <li>Here the order object retrieved from the <code>OrderTagManager</code> for the tags <code>base_inst_str, BrokerExistingOrderPositionConstants.ENTER</code> and <code>entry_key</code></li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#remove_tags","title":"remove_tags","text":"<ul> <li>Removes the tags stored in the <code>OrderTagManager</code> along with the orders related stored in that tag</li> </ul> <p>eg:</p> <pre><code>self.order_tag_manager.remove_tags(tags=entry_key)\n</code></pre> <p>Here the <code>entry_key</code> tag is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>When the tag is removed the order objects stored in that tag are also removed but the same order objects would still be present in order tags.</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#remove_order","title":"remove_order","text":"<ul> <li>Remove the order(s) from the <code>OrderTagManager</code> for the given tag(s).</li> </ul> <p>eg:</p> <p><pre><code>self.order_tag_manager.remove_order(main_order)\n</code></pre> Here the <code>main_order</code> order object is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>The order object will be removed from all the tags ta</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#get_internals","title":"get_internals","text":"<pre><code>Returns the values i.e. both the entry and exit orders stored inside the tags list.\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#5-child-instruments-calculation","title":"5. Child instruments calculation","text":""},{"location":"member/strategies/strategy_guides/common_options_strategy.html#get_ltp","title":"get_ltp","text":"<p>Fetch the ltp of the base instrument (instrument set while executing strategy) <pre><code>ltp = self.broker.get_ltp(self.underlying_instrument)\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#options_instruments_set_up_local","title":"options_instruments_set_up_local","text":"<p>Get the ATM ITM and OTM lists of the child instrument based on the LTP     <pre><code>self.options_instruments_set_up_local(self.underlying_instrument, tradingsymbol_suffix, ltp)\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#get_child_instrument_details","title":"get_child_instrument_details","text":"<p>Select a child instrument from the lists of ATM, ITM, and OTM based on the strike direction and no of strikes given for the child instrument     <pre><code>child_instrument = self.get_child_instrument_details(self.underlying_instrument, tradingsymbol_suffix, strike_direction, no_of_strikes)\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#6-entry-methods","title":"6. Entry Methods","text":""},{"location":"member/strategies/strategy_guides/common_options_strategy.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry","text":"<ul> <li> <p>In this method we process each instrument in the instruments bucket, if there is some entry condition to be checked then we create a <code>get_entry_decision</code> method  that calculates the entry condition like a crossover or compares the latest value of the OHLC data or indicator data.</p> </li> <li> <p>When the order has to be placed we add the <code>instrument</code> to <code>selectd_instruments_bucket</code> and additional data related to the instrument that will be required while placing to the <code>sideband_info</code>. This information is passed to the <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#strategy_enter_position","title":"strategy_enter_position","text":"<ul> <li>Here is where we actually place the entry order for which we calculate the quantity for the order to be placed. If the order is placed successfully we save the order in a class variable such that we can access the order object via the variable in the exit methods.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#7-exit-methods","title":"7. Exit Methods","text":""},{"location":"member/strategies/strategy_guides/common_options_strategy.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit","text":"<ul> <li>This method is called before the entry methods because in the case of delivery strategy we want to resume and exit previous day orders before we can place new entry orders.</li> <li>Here we place stoploss exit orders, target exit orders, and check for exit conditions for the open entry orders.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#strategy_exit_position","title":"strategy_exit_position","text":"<ul> <li>Here is where we actually place the exit order for where we exit the order which was placed during entry. If the order is placed successfully we clear the order in a class variable such that we can add new orders to the vacant place in variable in the entry methods.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#8-other-common-methods","title":"8. Other common methods","text":"<p>There are other methods that are used in the strategy:</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#check_and_place_stoploss_order","title":"check_and_place_stoploss_order","text":"<p>This method is called in the <code>strategy_select_instruments_for_exit</code> when our entry order is open, and we want to place a stoploss exit order for the same.</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#set_all_none","title":"set_all_none","text":"<p>This method is called in the <code>strategy_exit_position</code> when our entry order has exited, and we want to remove the order object from the <code>self.main_order</code> variable.</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#options_instruments_set_up_local_1","title":"options_instruments_set_up_local","text":"<p>This method is called in the <code>strategy_select_instruments_for_entry</code> to fetch the ATM, ITM, and OTM lists of the child instruments based on the LTP of the base instrument. </p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#get_child_instrument_details_1","title":"get_child_instrument_details","text":"<p>This method is called in the <code>strategy_select_instruments_for_entry</code> to fetch a single child instrument based on the no of strikes and strike direction.</p>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#9-cleanup","title":"9. Cleanup","text":"<ol> <li>Add comments and docstrings wherever possible to improve code readability.</li> <li>Once the strategy is completed you can optimize imports, give proper indentation and proper formatting to the strategy code and remove unwanted imports, variables, and methods before delivering the code.</li> </ol>"},{"location":"member/strategies/strategy_guides/common_options_strategy.html#10-check-out-our-docs-for-developed-options-strategies","title":"10. Check out our docs for developed Options strategies","text":"<ul> <li>Options Bear Call Ladder</li> <li>Options Bear Put Ladder</li> <li>Options Bull Call Ladder</li> <li>Options Bull Put Ladder</li> <li>Options Long Iron Butterfly</li> <li>Options Straddle</li> <li>Options Strangle</li> </ul> <p>Tip</p> <p>To know more about a strategy from our given template, simply check the first line of comment in the code of that specific strategy.  </p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html","title":"Regular Strategy Structure","text":"<p>Links</p> <ul> <li>Code Structure of Strategy (workflow of a strategy)</li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#1-initial-steps","title":"1. Initial steps","text":""},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#naming-a-class","title":"Naming a Class","text":"eg: For the above strategy name the class name would be:     <pre><code>StrategyFuturesEMACrossover(StrategyBase)\n</code></pre> <p>Coding Conventions</p> <pre><code>* Make a class with the same name as the file name\n* Make sure the first letter of each word is in uppercase and the initials should be in uppercase as well.\n* If the class name includes indicator names like EMA, SMA, and VWAP the name should be in uppercase in the class name but not in the file name.\n* Every strategy is a child class of the StrategyBase class.\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#naming-your-strategy","title":"Naming your Strategy","text":"<p>This name will be displayed in your My Coded Strategies in Phoenix Web, and it will also be the strategy_name when you are fetching all strategies in pyalgotrading. Inside your strategy class, you can write your first parameter as <code>name</code>.     <pre><code>name = 'futures_ema_crossover'\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#2-init-method","title":"2. Init method","text":"<p>This method gets called only once when the strategy is started.</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#strategy-info","title":"Strategy info","text":"<p>In the init method add the line given below <pre><code>super().__init__(*args, **kwargs)\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#parameter-creation","title":"Parameter creation","text":"<p>Next we assign the parameter values to the class variables of the same name as the parameters but in the lowercase format, as shown below:</p> <p>eg: <pre><code>self.fresh_order_candle = self.strategy_parameters['FRESH_ORDER_CANDLE']\nself.start_time_hours = self.strategy_parameters['START_TIME_HOURS']\nself.start_time_minutes = self.strategy_parameters['START_TIME_MINUTES']\nself.end_time_hours = self.strategy_parameters['END_TIME_HOURS']\nself.end_time_minutes = self.strategy_parameters['END_TIME_MINUTES']\nself.ema_period_one = self.strategy_parameters['EMA_PERIOD_ONE']\nself.ema_period_two = self.strategy_parameters['EMA_PERIOD_TWO']\nself.target_percentage = self.strategy_parameters['TARGET_PERCENTAGE']\nself.stoploss_percentage = self.strategy_parameters['STOPLOSS_PERCENTAGE']\nself.stoploss_range = self.strategy_parameters['STOPLOSS_RANGE']\nself.stoploss_order_count_allowed = self.strategy_parameters['STOPLOSS_ORDER_COUNT_ALLOWED']\n</code></pre></p> <p>Note</p> <ul> <li>The parameter names and the number of parameters may be different for different strategies.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#start-time-and-end-time-creation","title":"Start time and End time creation","text":"<p>Adding Start and End time is useful when you want to define a timerange between which the strategy will be running each day. Add the below code to calculate the strategy start time and end time, from the <code>strategy_parameters</code>.     try:     <pre><code>    self.candle_start_time = time(hour=self.start_time_hours, minute=self.start_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting start hours and minutes... EXITING')\n    raise SystemExit\n</code></pre>     try:      <pre><code>    self.candle_end_time = time(hour=self.end_time_hours, minute=self.end_time_minutes)\nexcept ValueError:\n    self.logger.fatal('Error converting end time hours and minutes... EXITING')\n    raise SystemExit\n</code></pre></p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#strategy-variables","title":"Strategy variables","text":"<p>We create our own strategy variables other than the strategy parameter variables which will be used throughout the strategy.</p> <p>eg: <code>self.order_tag_manager = None</code> </p> <p>We initialize the variables with a None value.</p> <p>Note</p> <pre><code>There could be more strategy variables required as per the strategy requirement.\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#3-initialize-method","title":"3. Initialize method","text":"<p>Unlike the <code>init method</code>, this method gets called every day at the beginning of the day once the strategy is started.</p> <p>Here the strategy variables that were initialized as None are again defined as dictionaries/lists except for the <code>self.order_tag_manager</code>.  Create a reference for <code>OrderTagManager</code> as shown below:</p> <pre><code>self.order_tag_manager = OrderTagManager\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#4-ordertagmanager","title":"4. OrderTagManager","text":"<p>The <code>self.order_tag_manager</code> is used to store/remove the entry/exit orders. The <code>self.order_tag_manager</code> has the following methods:</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#add_order","title":"add_order","text":"<ul> <li>Stores the order object for the given tags. eg: <pre><code>self.order_tag_manager.add_order(_order, tags=[base_inst_str, entry_key])\n</code></pre></li> <li>Here the <code>_order</code> is the order object stored inside the <code>OrderTagManager</code> for the tags <code>base_inst_str</code> and <code>entry_key</code>.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#get_orders","title":"get_orders","text":"<ul> <li>Retrieve the order(s) for the given tags. eg: <pre><code>self.order_tag_manager.get_orders(tags=[base_inst_str, BrokerExistingOrderPositionConstants.ENTER, entry_key], ignore_errors=True)\n</code></pre></li> <li>Here the order object retrieved from the <code>OrderTagManager</code> for the tags <code>base_inst_str, BrokerExistingOrderPositionConstants.ENTER</code> and <code>entry_key</code></li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#remove_tags","title":"remove_tags","text":"<ul> <li>Removes the tags stored in the <code>OrderTagManager</code> along with the orders related stored in that tag eg: <pre><code>self.order_tag_manager.remove_tags(tags=entry_key)\n</code></pre></li> <li>Here the <code>entry_key</code> tag is removed from the <code>OrderTagManager</code>.</li> </ul> <p>Note</p> <p>When the tag is removed the order objects stored in that tag are also removed but the same order objects would still be present in the order tags.</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#remove_order","title":"remove_order","text":"<ul> <li>Remove the order(s) from the <code>OrderTagManager</code> for the given tag(s). eg:</li> </ul> <pre><code>self.order_tag_manager.remove_order(main_order)\n</code></pre> <p>Here the <code>main_order</code> order object is removed from the <code>OrderTagManager</code>.</p> <p>Note</p> <p>The order object will be removed from all the tags ta</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#get_internals","title":"get_internals","text":"<ul> <li>Returns the values i.e. both the entry and exit orders stored inside the tags list.   </li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#5-entry-methods","title":"5. Entry Methods","text":""},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry","text":"<ul> <li> <p>In this method we process each instrument in the instruments bucket, if there is some entry condition to be checked then we create an <code>get_entry_decision</code> method  that calculates the entry condition like a crossover or compares the latest value of the OHLC data or indicator data.</p> </li> <li> <p>When the order has to be placed we add the <code>instrument</code> to <code>selected_instruments_bucket</code> and additional data related to the instrument that will be required while placing to the <code>sideband_info</code>. This information is passed to the <code>strategy_enter_position</code> method</p> </li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#strategy_enter_position","title":"strategy_enter_position","text":"<ul> <li>Here is where we actually place the entry order for which we calculate the quantity for the order to be placed. If the order is placed successfully we save the order in a class variable such that we can access the order object via the variable in the exit methods.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#6-exit-methods","title":"6. Exit Methods","text":""},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit:","text":"<ul> <li>This method is called before the entry methods because in the case of delivery strategy we want to resume and exit previous day orders before we can place new entry orders.</li> <li>Here we place stoploss exit orders, target exit orders, and check for exit conditions for the open entry orders.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#strategy_exit_position","title":"strategy_exit_position","text":"<ul> <li>Here is where we actually place the exit order for where we exit the order which was placed during entry. If the order is placed successfully we clear the order in a class variable such that we can add new orders to the vacant place in variable in the entry methods.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#7-other-common-methods","title":"7. Other common methods","text":"<p>There are other methods that are used in the strategy:</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#check_and_place_stoploss_order","title":"check_and_place_stoploss_order","text":"<p>This method is called in the <code>strategy_select_instruments_for_exit</code> when our entry order is open, and we want to place a stoploss exit order for the same.</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#set_all_none","title":"set_all_none","text":"<p>This method is called in the <code>strategy_exit_position</code> when our entry order has exited, and we want to remove the order object from the <code>self.main_order</code> variable.</p>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#8-cleanup","title":"8. Cleanup","text":"<ol> <li>Add comments and docstrings wherever possible to improve code readability.</li> <li>Once the strategy is completed you can optimize imports, give proper indentation and proper formatting to the strategy code and remove unwanted imports, variables, and methods before delivering the code.</li> </ol>"},{"location":"member/strategies/strategy_guides/common_regular_strategy.html#10-check-out-our-docs-for-developed-regular-strategies","title":"10. Check out our docs for developed Regular strategies","text":"<ul> <li>Aroon Crossover</li> <li>Bollinger Bands</li> <li>EMA Crossover</li> <li>Inverse EMA Scalping</li> <li>Reverse RSI</li> <li>Stochastic Crossover</li> <li>VWAP Crossover</li> </ul> <p>Tip</p> <p>To know more about a strategy from our given template, simply check the first line of comment in the code of that specific strategy.  </p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html","title":"Common Strategy Building Guide","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#understanding-the-strategy-structure","title":"Understanding the Strategy Structure","text":"<p>The strategy code is basically a Python Class, with its Base Class as StrategyBase (for regular strategies) or StrategyBaseOptionsV2 (for options strategies). In this documentation we will focus on a regular strategy called \u2018EMA Regular Order\u2019  - a strategy which gives BUY and SELL signals based on two EMA indicators and takes new-entry &amp; previous-exit at every crossover. We also will be discussing about an options strategy called \"Options Bear Call Ladder Strategy\" - strategy which uses 3 legs to optimize the risk and returns of the options. Inside the strategy class there are many methods that could be divided into 2 different sections: Mandatory Methods: Initialization Methods, 4-Core Loop Methods &amp; Optional Methods: Algorithmic Calculation Methods &amp; Miscellaneous Methods. These sections are explained briefly below.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#mandatory-functions","title":"Mandatory Functions:","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#initialization-methods","title":"Initialization Methods","text":"<p>In this section, you will have the Strategy Class\u2019 \u201cinit\u201d method (a.k.a. Constructor). This method will extract the Strategy\u2019s Configured Parameters and save them in the different variables. There is another method in this section called \u201cinitialization\u201d, which will be called at the start of every trading day that will occur inside the timeline for which you are executing the strategy.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#4-core-loop-methods","title":"4 Core Loop Methods","text":"<p>These are the main methods that will be called by the AlgoBulls Core in a sequence for every candle (candle is the minimum time range for which the Open, High, Low and Close values of that instrument are available. Basically it is a representation of a time period and the data corresponds to the trades executed during that period). All the logic design methods are called inside these Core Methods, along with the helping methods.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#optional-function","title":"Optional Function","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#algorithmic-calculations-methods","title":"Algorithmic Calculations Methods","text":"<p>This section contains the methods that are defined by the user. These are not mandatory but good to keep your code organized and simple. Their main purpose will be to perform operations on historical data or LTP data of the selected instrument.  Based on the results of these operations, it needs to decide whether it should Buy, Sell or take no action on the instrument. Apart from decision making, some of the other methods can also be useful to calculate the stop loss or target price for a trade. Point being, the purpose of these methods are totally dependent on the application of the user.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#miscellaneous-methods","title":"Miscellaneous Methods","text":"<p>These are handy methods that are created by a team of expert strategy developers and they are already a part of the base class. These methods do a lot of heavy lifting under the hood and can be used here for various purposes like getting the latest price of a stock, placing an order etc. These methods are not always necessary to be used and are generally a part of other methods mentioned above.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#working-flow-of-the-strategy","title":"Working Flow of the Strategy","text":"<p>Below Diagram is Sample Diagram on how the strategy execution engine works. Blocks in green are the mandatory methods that need to be implemented for every strategy.  </p> <p></p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#setting-up-imports-and-environment","title":"Setting Up: Imports and Environment","text":"<p>Before we dive into building of a strategy we need to fist setup our workspace depending the tool we are using. The available tools for creating a workspace of strategy are Pyalgotrading and Phoenix Web.  </p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#pyalgotrading","title":"Pyalgotrading","text":"<p>If you're coding on your local machine, I recommend setting up a virtual environment and installing the \"pyalgotrading\" Python package to keep things organised. <pre><code>pip3 install pyalgotrading\n</code></pre> Once you've got it installed, it's time to bring in the magic. Import the package and its constants into your Python file where your trading strategy will take shape.</p> <pre><code>from pyalgotrading.algobulls import AlgoBullsConnection\nfrom pyalgotrading.strategy import *\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#phoenix-web","title":"Phoenix Web","text":"<p>Now, if you prefer a web-based approach, we've got you covered. Head over to the \"Code New Strategy\" section on the Phoenix page of the AlgoBulls website. Here, you can craft your strategy without the need to import any classes or packages. The choice is yours \u2013 flexibility at its best.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#strategy-code-creation-lets-get-started","title":"Strategy Code Creation: Let's Get Started","text":"<p>With the groundwork laid, it's time to create your strategy class. Be sure to choose the appropriate base class for your strategy. For regular equity strategies, the base class is <code>StrategyBase</code> while for options strategies, it's <code>StrategyOptionsBaseV2</code>.</p> <p>Examples:</p> RegularOptions <pre><code>class MovingAverageCrossoverV2(StrategyBase):\n    name = 'Moving Average Crossover V2'\n</code></pre> <pre><code>class StrategyOptionsBearCallLadder(StrategyOptionsBaseV2):\n    name = 'Options Bear Call Ladder Template'\n</code></pre> <p>Feel free to get creative with your class name, but it's good practice to make it unique among your strategy class names. Below this declaration, we set the strategy's name.</p> <p>For Pyalgotrading users</p> <p>If you are uploading the strategy via pyalgotrading functions, then this <code>name</code> parameter's value will be the name of the strategy. That means this name will be displayed in My Coded Strategies section in Phoenix.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#initialization-functions","title":"Initialization Functions","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#init","title":"init()","text":"<p>Every great trading strategy starts with a solid foundation \u2013 the constructor method, also known as the \"init\" method. Here's what it looks like:</p> <p><pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n</code></pre> Within this method, you extract the parameters provided by the user. These user-defined parameters are stored in a dictionary called \"self.strategy_parameters.\" Here's how you can access these values:</p> <p><pre><code>self.timeperiod1 = self.strategy_parameters['TIMEPERIOD1']\nself.timeperiod2 = self.strategy_parameters['TIMEPERIOD2']\n</code></pre> Feel free to initialise other variables here, such as <code>self.main_order</code>, <code>self.number_of_allowed_expiry_dates</code>, <code>self.transaction_type_map</code> and more.</p> <p>Example: This is how the declaration of class along with its constructor would look like.</p> RegularOptions <pre><code>class StrategyEMARegularOrder(StrategyBase):\n    name = 'EMA Regular Order Strategy'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.timeperiod1 = self.strategy_parameters['TIMEPERIOD1']\n        self.timeperiod2 = self.strategy_parameters['TIMEPERIOD2']\n\n        self.main_order_map = None\n</code></pre> <pre><code>class StrategyOptionsBearCallLadder(StrategyOptionsBaseV2):\n    name = 'Options Bear Call Ladder Template'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # Parameters (currently set with default values, can be overridden from the Parameters Configuration Pane)\n        self._leg_one_transaction_type = self.strategy_parameters.get('LEG_ONE_TRANSACTION_TYPE', 1)  # BUY: 1 | SELL: 2\n        self._leg_one_tradingsymbol_suffix = self.strategy_parameters.get('LEG_ONE_TRADING_SYMBOL_SUFFIX', 1)  # CE: 1 | PE: 2\n        self._leg_one_strike_direction = self.strategy_parameters.get('LEG_ONE_STRIKE_DIRECTION', 1)  # ITM: 0| ATM: 1| OTM: 2\n        self._leg_one_number_of_strikes = self.strategy_parameters.get('LEG_ONE_NUMBER_OF_STRIKES', 0)\n\n        self._leg_two_transaction_type = self.strategy_parameters.get('LEG_TWO_TRANSACTION_TYPE', 1)  # BUY: 1 | SELL: 2\n        self._leg_two_tradingsymbol_suffix = self.strategy_parameters.get('LEG_TWO_TRADING_SYMBOL_SUFFIX', 1)  # CE: 1 | PE: 2\n        self._leg_two_strike_direction = self.strategy_parameters.get('LEG_TWO_STRIKE_DIRECTION', 2)  # ITM: 0| ATM: 1| OTM: 2\n        self._leg_two_number_of_strikes = self.strategy_parameters.get('LEG_TWO_NUMBER_OF_STRIKES', 2)\n\n        self._leg_three_transaction_type = self.strategy_parameters.get('LEG_THREE_TRANSACTION_TYPE', 2)  # BUY: 1 | SELL: 2\n        self._leg_three_tradingsymbol_suffix = self.strategy_parameters.get('LEG_THREE_TRADING_SYMBOL_SUFFIX', 1)  # CE: 1 | PE: 2\n        self._leg_three_strike_direction = self.strategy_parameters.get('LEG_THREE_STRIKE_DIRECTION', 0)  # ITM: 0| ATM: 1| OTM: 2\n        self._leg_three_number_of_strikes = self.strategy_parameters.get('LEG_THREE_NUMBER_OF_STRIKES', 2)\n\n        # Maps\n        self.transaction_type_map = {1: \"BUY\", 2: \"SELL\"}\n        self.tradingsymbol_suffix_map = {1: \"CE\", 2: \"PE\"}\n        self.strike_direction_map = {0: OptionsStrikeDirection.ITM, 1: OptionsStrikeDirection.ATM, 2: OptionsStrikeDirection.OTM}\n\n        # Variables\n        self.number_of_allowed_expiry_dates = 1\n        self.instruments_done_for_the_day = None\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#initialize","title":"initialize()","text":"<p>The \"initialize\" method is your strategy's workspace, where you get everything ready for a fresh trading day. It's called at the start of each trading day, allowing you to reset variables, set up your tools, and perform any other tasks to ensure your strategy is primed and ready.</p> <p>Example:</p> <p>Examples:</p> RegularOptions <pre><code>def initialize(self):\n    self.main_order_map = {}\n</code></pre> <pre><code>def initialize(self):\n    super().initialize()\n    self.instruments_done_for_the_day = []\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#algorithmic-calculation-functions","title":"Algorithmic Calculation Functions","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#get_decision","title":"get_decision()","text":"<p>Now, let's dive into the heart of your strategy \u2013 the \"get_decision\" method. This method is where the magic happens, where you decide when to enter or exit a trade, set stop losses, and target prices. Here's how it works: Historical data of the instrument up to a certain point in your strategy is collected using:</p> <ul> <li>Historical data is a time series data of open, high, low and close values of an instrument. These values are fetched at an interval same as that of the candle interval. The method given below fetches multiple historical data values till the current candle on which the strategy is executing. Historical data of the instrument up to a certain point in your strategy is collected using:     <pre><code>hist_data = self.get_historical_data(instrument)\n</code></pre>   Here the variable hist_data is a pandas.Dataframe object. A Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns. The hist_data Dataframe will have 4 columns named as : \u201copen\u201d, \u201chigh\u201d, \u201cclose\u201c and \u201clow\u201d. For every row there will be a unique timestamp and the difference between each timestamp is of candle interval.</li> <li>To access all the values of one particular column from the hist_data, you can use the following syntax code. Remember the data type of the column fetched here is pandas.Series     <pre><code>hist_data[\u2018&lt;column_name&gt;\u2019]\n</code></pre> Example: <pre><code>close = hist_data[\u2018close\u2019]\n</code></pre></li> <li>To access the O-H-L-C values of the current latest candle you can use the following code. This also tells us that the index -1 is for latest, -2 will be for second latest and so on. This also implies that index 0 will get the oldest data, index 1 will give second oldest data and so on. <pre><code>latest_ohlc = hist_data.iloc[-1]\n</code></pre></li> <li> <p>Next, you analyse this historical data to determine trading signals and calculate indicator values. You can rely on functions from \"talib\" for this, as shown below:     <pre><code>ema_x = talib.EMA(hist_data['close'], timeperiod=self.timeperiod1)\nema_y = talib.EMA(hist_data['close'], timeperiod=self.timeperiod2)\n</code></pre>     As you can see, we have passed the \u201cclose\u201d column and a strategy parameter value called \u201cself.timeperiod1\u201d and \u201cself.timeperiod2\u201d to the talib function. Each of the talib functions require unique input values, some require pandas.Series, some require constants like integers and floats and some require both. To understand the working of each talib function, refer here.</p> </li> <li> <p>In many strategies, the condition to buy or sell can be triggered based on the crossover direction of 2 signals/indicators. A crossover refers to an instance where an indicator and a price, or multiple indicators, overlap and cross one another. Crossovers are used in technical analysis to confirm patterns and trends such as reversals and breakouts, generating buy or sell signals accordingly. Below we have given an example of how to calculate the crossover of the 2 indicator values we had calculated above. <pre><code>crossover_value = self.utils.crossover(ema_x, ema_y)\n</code></pre>     Here if crossover_value is 0 then the indicators ema_x and ema_y have not crossed. If it is 1 then indicator ema_x has crossed ema_y in upward direction. Similarly if it is -1 then indicator ema_x has crossed ema_y in downward direction</p> </li> </ul> <p>By combining these calculated values with historical data, you can make informed decisions about when to initiate or close a trade. Additionally, you can use this information to compute potential target prices or set stop losses. AlgoBulls' Phoenix empowers you to navigate the complexities of options trading with ease. </p> <p>Example: </p> <p>This is how an ideal get_decision() function would look like. This example is from RSI Crossover Strategy.</p> <pre><code>def get_crossover_value(self, instrument):\n    hist_data = self.get_historical_data(instrument)\n\n    rsi_value = talib.RSI(hist_data['close'],    timeperiod=self.time_period)\n\n    oversold_list = [self.oversold_value] * rsi_value.size\n    overbought_list = [self.overbought_value] * rsi_value.size\n\n    oversold_crossover_value = self.utils.crossover(rsi_value, oversold_list)\n    overbought_crossover_value = self.utils.crossover(rsi_value, overbought_list)\n\n    return oversold_crossover_value, overbought_crossover_value\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#miscellaneous-functions","title":"Miscellaneous Functions","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#get_child_instrument_details","title":"get_child_instrument_details()","text":"<p>The get_child_instrument_details function is at your disposal. It takes several parameters:  </p> <ul> <li>base_instrument: The foundation of your options strategy, often represented by an index.</li> <li>tradingsymbol_suffix: Specifies whether the option should be a call option (CE) or a put option (PE), determining the trading symbol's suffix.</li> <li>strike_direction: Defines the direction relative to the current strike price, with options like \"In The Money\" (ITM), \"Out of The Money\" (OTM), and \"At the Money\" (ATM).</li> <li>no_of_strikes: Specifies how many strikes away from the current strike price the function should consider, setting the distance in strike prices within the chosen strike direction.</li> </ul> <p>This function calls two other functions: <code>self.get_allowed_expiry_dates()</code> and <code>get_options_instrument_with_strike_direction()</code>.</p> <p>Example: This is how the function looks ideally. This example was taken from \u201cOptions Bear Call Strategy\u201d from ready templates.</p> <pre><code>    def get_child_instrument_details(self, base_instrument, tradingsymbol_suffix, strike_direction, no_of_strikes):\n        expiry_date = self.get_allowed_expiry_dates()[0]\n        child_instrument = self.get_options_instrument_with_strike_direction(base_instrument, expiry_date, tradingsymbol_suffix, strike_direction, no_of_strikes)\n        return child_instrument\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#get_allowed_expiry_dates","title":"get_allowed_expiry_dates()","text":"<p>In options strategies, the get_allowed_expiry_dates function plays a vital role. It doesn't require parameters; instead, it relies on the number_of_allowed_expiry_dates variable defined in the constructor method.  </p> <ul> <li>If number_of_allowed_expiry_dates is set to 1, the function returns the monthly expiry date.</li> <li>If number_of_allowed_expiry_dates is set to 0, the function returns a weekly expiry date.</li> </ul> <p>In essence, this function helps you select the appropriate expiry date based on the value you assign to <code>number_of_allowed_expiry_dates</code> variable.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#get_options_instrument_with_strike_direction","title":"get_options_instrument_with_strike_direction()","text":"<p>This function is a key player in options strategies, taking parameters such as:  </p> <ul> <li>base_instrument: The foundation of your options strategy.</li> <li>expiry_date: The expiry date of the child instrument, calculated using the \"get_allowed_expiry_dates\" function.</li> <li>tradingsymbol_suffix: Specifies whether the option should be a call option (CE) or a put option (PE), helping identify the appropriate options.</li> <li>strike_direction: Determines the direction in relation to the current strike price, offering options like \"In The Money\" (ITM), \"Out of The Money\" (OTM), and \"At the Money\" (ATM).</li> <li>no_of_strikes: Specifies how many strikes away from the current strike price the function should consider, defining the distance in strike prices within the chosen strike direction.</li> </ul>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#options_instruments_set_up_local","title":"options_instruments_set_up_local()","text":"<p>Now, let's talk about a crucial piece of the options strategy puzzle \u2013 <code>options_instruments_set_up_local</code>. This function creates local instances of all available child instruments based on specified parameters:  </p> <ul> <li>base_instrument: The foundation of your options strategy, typically an index.</li> <li>tradingsymbol_suffix: Specifies whether the child instrument should be a call option (CE) or a put option (PE), aiding in the identification of the appropriate options.</li> <li>current_close (strike_price): The current price of the base instrument, also known as the strike price.</li> <li>direction: Determines the direction in relation to the current strike price, helping select the child instrument (i.e., ATM, ITM, or OTM).</li> </ul> <p>Once executed, this function sets up and stores local instances of child instruments matching your criteria. These instances become valuable assets for further analysis or operations, including utilising the \"get_child_instrument_details\" function.</p> <p>Example: This is how this function looks ideally. This example was taken from \u201cOptions Bear Call Ladder\u201d from ready templates.</p> <pre><code>def options_instruments_set_up_local(self, base_instrument, tradingsymbol_suffix, current_close, direction=OptionsInstrumentDirection.EXACT):\n        expiry_dates = self.get_allowed_expiry_dates()\n        for expiry_date in expiry_dates:\n            self.options_instruments_set_up(base_instrument, direction, expiry_date, tradingsymbol_suffix, current_close)\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#options_instruments_set_up","title":"options_instruments_set_up()","text":"<p>The final piece of the puzzle is \"options_instruments_set_up.\" This function takes parameters like:  </p> <ul> <li>base_instrument: The foundation of your options strategy.</li> <li>direction: Determines the direction in relation to the current strike price, helping select the child instrument (i.e., ATM, ITM, or OTM).</li> <li>expiry_date: The expiry date of the child instrument, calculated using the \"get_allowed_expiry_dates\" function.</li> <li>tradingsymbol_suffix: Specifies whether the child instrument should be a call option (CE) or a put option (PE), aiding in the identification of the appropriate options.</li> <li>current_close: The current price of the base instrument, also known as the strike price.</li> </ul> <p>Now, let's talk about the engine that drives your strategy \u2013 the core loop functions. </p> <p>These include \"strategy_select_instruments_for_entry\", \"strategy_enter_position\", \"strategy_select_instruments_for_exit\" and \"strategy_exit_position\" These functions are called within a loop from the AlgoBulls core until an Exit Event for the strategy occurs.</p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#the-4-core-loop-functions","title":"The 4 Core Loop Functions","text":""},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry()","text":"<p>This function takes parameters:  </p> <ul> <li>candle: The current candle where the strategy is executing its algorithm.</li> <li>instrument_bucket: A list of all the instruments provided by the user when starting the strategy. Here, you iterate through the instruments, calling \"self.get_decision()\" to determine actions for each. For options strategies, you can also use \"self.options_instruments_set_up_local()\" to set up child instruments for each base instrument. The selected instruments and their meta-information are returned by the function.</li> </ul> <p>Example: This function would ideally look like this. This example was taken from \u201cOptions Straddle\u201d from Ready Templates.</p> <p>Examples:</p> RegularOptions <pre><code>def strategy_select_instruments_for_entry(self, candle, instruments_bucket):\n    selected_instruments, meta = [], []\n\n    for instrument in instruments_bucket:\n        crossover = self.get_decision(instrument)\n        action_constants = {1: 'BUY', -1: 'SELL'}\n\n        if crossover in [-1, 1]:\n            selected_instruments.append(instrument)\n            meta.append({'action': action_constants[crossover]})\n\n    return selected_instruments, meta\n</code></pre> <pre><code>def strategy_select_instruments_for_entry(self, candle, instruments_bucket):\n    selected_instruments, meta = [], []\n\n    for instrument in instruments_bucket:\n        if instrument not in self.instruments_done_for_the_day:\n            self.instruments_done_for_the_day.append(instrument)\n            ltp = self.broker.get_ltp(instrument)\n\n            self.options_instruments_set_up_local(instrument, \"CE\", ltp)\n            self.options_instruments_set_up_local(instrument, \"PE\", ltp)\n\n            leg_wise_list = [('LEG_ONE', self._leg_one_tradingsymbol_suffix, self._leg_one_strike_direction, self._leg_one_number_of_strikes, self._leg_one_transaction_type),\n                             ('LEG_TWO', self._leg_two_tradingsymbol_suffix, self._leg_two_strike_direction, self._leg_two_number_of_strikes, self._leg_two_transaction_type),\n                             ('LEG_THREE', self._leg_three_tradingsymbol_suffix, self._leg_three_strike_direction, self._leg_three_number_of_strikes, self._leg_three_transaction_type)]\n\n            for leg_number, tradingingsymbol_suffix, strike_direction, number_of_strikes, transaction_type in leg_wise_list:\n                self.logger.info(f'Processing {leg_number}...')\n                child_instrument = self.get_child_instrument_details(instrument, self.tradingsymbol_suffix_map[tradingingsymbol_suffix], self.strike_direction_map[strike_direction], number_of_strikes)\n                selected_instruments.append(child_instrument)\n                meta.append({'base_instrument': instrument, 'action': self.transaction_type_map[transaction_type]})\n\n    return selected_instruments, meta\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#strategy_enter_position","title":"strategy_enter_position()","text":"<p>This function takes parameters:  </p> <ul> <li>candle: The current candle where the strategy is executing its algorithm.</li> <li>instrument: One of the instruments from the selected instruments list returned by \"strategy_select_instruments_for_entry.\"</li> <li>meta: Meta-information of that particular instrument, aligning with the instrument from the meta list.</li> </ul> <p>Here, you place orders for the selected instruments, updating them in \"self.main_order\" for easy access in exit functions.</p> <p>Example: This function would ideally look like this. This example was taken from \u201cOptions Straddle\u201d from Ready Templates.</p> <p>Examples:</p> RegularOptions <pre><code>def strategy_enter_position(self, candle, instrument, meta):\n    self.main_order_map[instrument] = _ = self.broker.OrderRegular(instrument, meta['action'], quantity=self.number_of_lots * instrument.lot_size)\n    return _\n</code></pre> <pre><code>def strategy_enter_position(self, candle, instrument, sideband_info):\n    _ = self.broker.OrderRegular(instrument, sideband_info['action'], quantity=self.number_of_lots * instrument.lot_size)\n    return _\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#orderregular","title":"OrderRegular","text":"<p>The <code>self.broker.OrderRegular</code> is used to place the entry/exit orders.          </p>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#parameters","title":"Parameters:","text":"<ul> <li><code>instrument</code>: Instrument object on which to place the order.</li> <li><code>action</code>: Action to be taken, either 'BUY' or 'SELL'.</li> <li><code>quantity</code>: The quantity of the order, generally calculated as <code>self.number_of_lots * instrument.lot_size</code>.</li> <li><code>order_variety</code>: (Optional) Type of order. Default is MARKET order (<code>BrokerOrderVarietyConstants.MARKET</code>).</li> <li><code>price</code>: (Optional) The price at which the limit order will be placed.</li> <li><code>trigger_price</code>: (Optional) The trigger price for stop-loss orders.</li> </ul> <p>Click on each of the tabs to see the relevant code snippet.</p> Market OrderLimit OrderStoploss Market OrderStoploss Limit Order <pre><code>self.broker.OrderRegular(\n    instrument,\n    action, \n    quantity \n    )\n</code></pre> <pre><code>self.broker.OrderRegular(\n    instrument, \n    action, \n    quantity, \n    order_variety=BrokerOrderVarietyConstants.LIMIT, \n    price=price \n    )\n</code></pre> <pre><code>self.broker.OrderRegular(\n    instrument, \n    action, \n    quantity, \n    order=order_variety=BrokerOrderVarietyConstants.STOPLOSS_MARKET, \n    trigger_price=trigger_price\n    )\n</code></pre> <pre><code>self.broker.OrderRegular(\n    instrument,  \n    action, \n    quantity,  \n    order_variety=BrokerOrderVarietyConstants.STOPLOSS_LIMIT, \n    price=price, \n    trigger_price=trigger_price\n)\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit()","text":"<p>Similar to entry, this function takes parameters:</p> <ul> <li>candle: The current candle where the strategy is executing its algorithm.</li> <li>instrument_bucket: A list of all instruments provided by the user when starting the strategy.</li> </ul> <p>The function iterates through the instrument bucket, checking if the instrument is present in \"self.main_order\" and whether its exit condition is satisfied. Instruments meeting exit conditions are added to the selected instruments list, along with their respective actions and meta-information.</p> <p>Example: This function should ideally look like this. This example was taken from \u201cEMA Crossover Strategy\u201d.</p> <pre><code>    def strategy_select_instruments_for_exit(self, candle, instruments_bucket):\n        selected_instruments, meta = [], []\n\n        for instrument in instruments_bucket:\n            if self.main_order_map.get(instrument) is not None:\n                crossover = self.get_decision(instrument)\n\n                if crossover in [1, -1]:\n                    selected_instruments.append(instrument)\n                    meta.append({'action': 'EXIT'})\n\n        return selected_instruments, meta\n</code></pre>"},{"location":"member/strategies/strategy_guides/common_strategy_guide.html#strategy_exit_position","title":"strategy_exit_position()","text":"<p>Finally, this function takes parameters:</p> <ul> <li>candle: The current candle where the strategy is executing its algorithm.</li> <li>instrument: One of the instruments from the selected instruments list returned by \"strategy_select_instruments_for_exit.\"</li> <li>meta: Meta-information of that particular instrument, aligning with the instrument from the meta list.</li> </ul> <p>Here, you place orders for the selected instruments, removing them from \"self.main_order\" to prepare for the next iteration of the AlgoBulls core loop.</p> <p>Example: This function should ideally look like this. This example was taken from the \"EMA Crossover Strategy\". Here, we are telling the core to exit all positions: <pre><code>def strategy_exit_position(self, candle, instrument, meta):\n    if meta['action'] == 'EXIT':\n        self.main_order_map[instrument].exit_position()\n        self.main_order_map[instrument] = None\n        return True\n    return False\n</code></pre> If you want the strategy to place the exit order instead of letting the core handle it, then this is what the function should look like: <pre><code>def strategy_exit_position(self, candle, instrument, meta):\n    if meta['action'] == 'EXIT':\n        self.broker.OrderRegular(\n            instrument,\n            action,\n            quantity,\n            related_order=entry_order,\n            position=BrokerExistingOrderPositionConstants.EXIT\n            )\n        return True\n    return False\n</code></pre></p> <p>Note</p> <ul> <li><code>meta['action']</code> has to be opposite of the entry order's transaction type. For example: if the entry order is 'BUY', then <code>meta['action']</code> should be 'SELL', and vice versa.</li> <li>Pass the entry order object as the <code>related_order</code> parameter.</li> <li>You can specify a lesser quantity if you want to partially exit your entry order. In case of partial exits, ensure that you return 'True' only if the quantity becomes zero after placing this order, else return 'False' for your intermediate/partial exits.</li> </ul>"},{"location":"member/strategies/strategy_guides/structure.html","title":"Code Structure of Strategy","text":"<p>Coding Prerequisites</p> <ul> <li>For pyalgotrading check here.</li> <li>For Phoenix Web check here.</li> </ul>"},{"location":"member/strategies/strategy_guides/structure.html#methods","title":"Methods","text":""},{"location":"member/strategies/strategy_guides/structure.html#strategy_select_instruments_for_entry","title":"strategy_select_instruments_for_entry()","text":"<p>This function helps you choose which trading instruments you want your strategy to work with. The system will use this function to go through each instrument one by one, at each candle's time. You get to write code that decides whether to place an order for a specific instrument or not.</p>"},{"location":"member/strategies/strategy_guides/structure.html#strategy_enter_position","title":"strategy_enter_position()","text":"<p>This function is where you can place orders for the instruments you selected earlier. It's executed for each instrument you picked in the previous function.</p>"},{"location":"member/strategies/strategy_guides/structure.html#strategy_select_instruments_for_exit","title":"strategy_select_instruments_for_exit()","text":"<p>After you've entered a position for an instrument, this function is called for each of those instruments at each candle interval. You can use it to decide whether an instrument should be exited from the position.</p>"},{"location":"member/strategies/strategy_guides/structure.html#strategy_exit_position","title":"strategy_exit_position()","text":"<p>In this function, you can close or exit positions for the instruments you marked for exiting in the previous function. It's done instrument by instrument.</p>"},{"location":"member/strategies/strategy_guides/structure.html#supporting-methods","title":"Supporting Methods","text":"<p>You have the following supporting methods:</p>"},{"location":"member/strategies/strategy_guides/structure.html#init","title":"init()","text":"<p>This method is like a starter for your strategy. It checks if the values you give it make sense and sets up some useful information for your strategy to use.</p>"},{"location":"member/strategies/strategy_guides/structure.html#initialize","title":"initialize()","text":"<p>This method is called when your strategy begins, both at the very start and at the beginning of each trading day. It's like setting up your strategy's workspace and giving your tools a starting position.</p>"},{"location":"member/strategies/strategy_guides/structure.html#name","title":"name()","text":"<p>This method gives your strategy a special name. It's like giving your strategy a unique nickname.</p>"},{"location":"member/strategies/strategy_guides/structure.html#versions_supported","title":"versions_supported()","text":"<p>This method lets you specify which version of the AlgoBulls Platform your strategy works well with. It's like saying, \"My strategy is ready for this specific version of the platform.\"</p>"},{"location":"member/strategies/strategy_guides/structure.html#utility-functions","title":"Utility Functions","text":"<p>You have the following utility function to be used in this strategy :</p> <p>Links</p> <ul> <li>Strategy Structure (regular)</li> <li>Strategy Structure (options)</li> </ul>"},{"location":"member/strategies/strategy_guides/structure.html#get_crossover_value","title":"get_crossover_value()","text":"This handy function calculates something called the \"crossover value\" for you. It's like having a calculator that figures out this specific value for your strategy."},{"location":"member/strategies/strategy_guides/structure.html#flowchart","title":"Flowchart","text":"<p>Once you create your own strategy or use a ready strategy from the pyalgostrategypool package, this is how it works internally on the AlgoBulls Core Trading Engine.</p> <p></p>"},{"location":"member/support/support_pyalgo.html","title":"Support pyalgo","text":"<p>In this dedicated section, you'll find everything you need to receive the support you deserve for pyalgotrading. Whether it's troubleshooting an issue or seeking clarification, we've got you covered every step of the way. Requesting Support from pyalgotrading Module:</p> <p>If you're looking to raise a support request from pyalgotrading module, follow these simple steps:  <code>- Start by executing your strategy from the pyalgotrading module. - Next, navigate to the \"My Coded Strategies\" section in Phoenix web.</code></p> <p>My Coded Strategies: This section displays all the strategies you've created or modified. It includes both new and updated strategies.</p> <p></p> <p>From this section, select the strategy you're experiencing issues with.</p> <p>Need Support: If you require assistance with a specific strategy, you can raise a support request from here. Please ensure that your strategy is present in the <code>My Coded Strategies</code> section.</p> <p></p> <p>After clicking on <code>Need Support</code>, you'll see a popup window. Here, select the strategy for which you need assistance and explain you issue in brief.</p> <p></p> <p>Then, click the <code>Submit</code> button. Our support team will actively assist you with any issues you're facing.</p>"},{"location":"member/support/support_pybuild.html","title":"Phoenix Support","text":"<p>Welcome to the realm of unparalleled support at AlgoBulls, where your algorithmic trading journey takes centre stage. Whether you're navigating the Phoenix Web or harnessing the power of pyalgotrading, our commitment to your success remains unwavering. The Phoenix Support page is your gateway to a world where every query, every challenge is met with expertise and dedication. We understand that your experience matters, and so does every line of code you craft.</p>"},{"location":"member/support/support_pybuild.html#steps-to-get-the-support-you-need","title":"Steps to get the support you need.","text":""},{"location":"member/support/support_pybuild.html#choose-your-strategy","title":"Choose your strategy","text":"<ul> <li>Log in to your AlgoBulls account and choose Phoenix from the left-side menu.     </li> <li>From the Phoenix Splash Screen, choose the <code>My Coded Strategies</code> section display card. This is the section that holds all your saved strategies, whether you have coded them from scratch or modified them from ready templates.     </li> <li> <p>Click and open the strategy that you think requires our assistance.</p> <p></p> </li> </ul>"},{"location":"member/support/support_pybuild.html#need-support","title":"Need Support","text":"<ul> <li> <p>In the chosen strategy, click on the <code>Need Support</code> button on the top right corner of the page.</p> <p></p> </li> <li> <p>From the pop-up window that appears, click on the <code>Select Strategy</code> dropdown and choose the name of your strategy.</p> </li> <li> <p>Write your query in the <code>Explain your query briefly</code> dialog box. This will help our team to get the best solution for you.</p> </li> <li> <p>Click the <code>Submit</code> button. Our team will reach out to you with the solution within 1-2 business days.     </p> </li> </ul>"}]}